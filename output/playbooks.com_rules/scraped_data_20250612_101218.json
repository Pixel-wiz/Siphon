[
  {
    "url": "https://playbooks.com/rules",
    "timestamp": "2025-06-12T10:11:37.310814",
    "title": "Cursor rules for AI that actually work",
    "text": "Cursor rules for AI that actually work playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor rules for AI that actually work Simple, practical, and composable Cursor project rules to help you build better apps without wasting valuable context tokens. Suggest a new rule Search Sort by Views Copies Downloads A-Z Z-A Filter by type Backend Frontend Fullstack Mobile Database Integration Filter by language CSS Dart JavaScript PHP Python Ruby Swift TypeScript Options Show snippets Snippets are specialized rules that extend or work with a parent rule. They focus on specific use cases, provide practical examples, and can be adapted for your projects. Try our new Rules Builder Build your own custom Cursor rules starter kit by selecting compatible backend and frontend frameworks. Try Builder nextjs.mdc  Next.js rules - Use the App Router structure with page.tsx files in route directories. - Client components must be explicitly marked with 'use client' at the top of the file. - Use kebab-case for directory names (e.g., componentsauth-form) and PascalCase for component files. - Prefer named... This rule explains Next.js conventions and best practices for fullstack development. View Rule Next.js react.mdc  React rules - Use functional components with hooks instead of class components - Use custom hooks for reusable logic - Use the Context API for state management when needed - Use proper prop validation with PropTypes - Use React.memo for performance optimization when necessary - Use fragments to a... This rule explains React component patterns, hooks usage, and best practices. View Rule React Ad Apify MCP server Context for your AIs with 5,000 pre-built scraping and automation tools. tailwind.mdc  Tailwind CSS rules - Use responsive prefixes for mobile-first design: html  - Use state variants for interactive elements: html _CounterState();  class _CounterState extends State  for better type inference and organization - Define props with type definitions and defaults - Use emits for component events - Use v-model for two-way binding - Use computed properties for derived state - Use watchers for side effects... This rule explains Vue.js component patterns, composition API usage, and best practices. View Rule Vue.js flask.mdc  Flask rules - Use Blueprints to organize routes by feature or resource - Use Flask-SQLAlchemy for database models and ORM - Use application factories for flexible application initialization - Use Flask extensions for common functionality (Flask-Login, Flask-WTF, etc.) - Store configuration in env... This rule explains Flask conventions and best practices for lightweight Python web applications. View Rule Flask Advertise with Us Promote your product to thousands of developers. mysql.mdc  MySQL rules - Use appropriate data types to optimize storage and performance (e.g., INT for IDs, VARCHAR with appropriate length) - Create indexes for columns used in WHERE, JOIN, and ORDER BY clauses - Use foreign keys to maintain referential integrity - Use EXPLAIN to analyze and optimize queri... This rule explains MySQL database design patterns and query optimization techniques. View Rule MySQL sveltekit.mdc  SvelteKit rules  File Structure - Follow the file-based routing structure with page.svelte for pages and layout.svelte for layouts - Use page.server.js for server-only code including data loading and form actions - Use server.js files for API endpoints - Place reusable components in... This rule explains SvelteKit conventions and best practices for fullstack development. View Rule SvelteKit jinja.mdc  Jinja rules - Use template inheritance: html  base.html   block title Default Title endblock   block content  endblock   - Use include for components: html  include \"componentsuser_c... This rule explains Jinja template syntax and best practices for Python web applications. View Rule Jinja sqlite.mdc  SQLite rules - Use appropriate data types for columns (INTEGER, TEXT, REAL, BLOB, NULL) - Create indexes for frequently queried columns - Enable foreign key support with PRAGMA foreign_keys  ON - Use transactions for multiple operations - Use prepared statements to prevent SQL injection - Use... This rule explains SQLite database design patterns and performance considerations. View Rule SQLite memory.mdc  AI Memory Rule This rule defines how the AI should manage and utilize its \"memory\" regarding this specific project, including user preferences, learned facts, and project-specific conventions.  Purpose The AI's memory helps maintain consistency and adapt to specific project needs or user pref... This rule defines how the AI agent should manage and utilize memory improve coding consistency. View Rule Memory vitest-testing.mdc  Testing Guidelines  Testing Framework - vitest is used for testing - Tests are colocated next to the tested file - Example: dirformat.ts and dirformat.test.ts  Common Mocks  Server-Only Mock ts vi.mock(\"server-only\", ()  ());   Prisma Mock ts import  beforeEac... This rule explains the guidelines for writing Vitest tests for Next.js applications. View Rule Vitest Testing Advertise with Us Promote your product to thousands of developers. create-rules.mdc  Cursor Rules Location How to add new cursor rules to the project 1. Always place rule files in PROJECT_ROOT.cursorrules:  .cursorrules  your-rule-name.mdc  another-rule.mdc  ...  2. Follow the naming convention: - Use kebab-case for filenames... This rule explains how to create new .mdc project rule files for the Cursor agent. View Rule Create Rules task-lists.mdc  Task List Management Guidelines for creating and managing task lists in Markdown files to track project progress  Task List Creation 1. Create task lists in a markdown file (in the project root): - Use TASKS.md or a descriptive name relevant to the feature (e.g., ASSISTANT_CHAT.md)... This rule explains how to create and manage task lists to track project progress. View Rule Task List rule-analytics.mdc  Cursor Rules Analytics Each time you use a Cursor rule, update the analytics tracking file. File location:  PROJECT_ROOT.cursoranalytics.md   Format The analytics file contains a count of how many times each rule has been used:  rule-name.mdc: 5 another-rule.mdc: 2  Add new r... This rule explains how to create and update an analytics.md file to track how often .mdc rules is being used. View Rule Cursor Rules Analytics Learn how to use Cursor Rules Cursor Rules provide a powerful way to give consistent, reusable instructions to Cursor's AI features, like the Agent and Cmd-K. They help the AI understand your project's context, adhere to specific coding styles, and automate workflows, making it a more effective coding partner. What are Cursor Rules? Cursor Rules are essentially saved prompts or guidelines that are automatically included when the AI processes your requests. Think of them as a way to give the AI persistent memory and instructions tailored to your needs. By providing this context at the start of every interaction, rules ensure the AI's behavior is consistent and aligned with your project requirements or personal preferences. Why use Cursor Rules? Employing Cursor Rules in your workflow offers several benefits: Encode Domain-Specific Knowledge: Teach the AI about the unique aspects of your codebase, its architecture, or specific libraries you use. Standardize Styles: Ensure the AI generates code that follows your project's formatting and architectural patterns. Automate Workflows: Define multi-step processes or templates that the AI can use for common tasks, like creating new components or writing tests. Improve Consistency: Reduce the need to repeat instructions by having them persistently available to the AI. Save Time: Get more relevant and accurate AI suggestions faster by providing clear, upfront context. Types of rules Cursor supports different types of rules to cater to various needs: Project Rules These are the most common and powerful type of rules, designed for specific codebases. Storage: They live in the .cursorrules directory within your project and should be version-controlled (e.g., with Git). This means they are shared with your team. Format: Project Rules are written in MDC (.mdc), a Markdown-like format that supports YAML frontmatter for metadata (like a description or globs) and Markdown for the rule content itself. --- description: Ensures all new React components use functional syntax and TypeScript. globs: - \"srccomponents.tsx\" alwaysApply: false --- All React components should be functional components. Use TypeScript for props and state. File Referencing: Rules can reference files within your project (e.g., service-template.ts) to include their content as part of the rule's context. Invocation Types: Always: The rule is always included in the AI's context for every request within the project. Auto Attached: The rule is automatically included if you are interacting with files that match the glob patterns defined in its metadata. Agent Requested: The AI can choose to ask if it should apply this rule if it deems it relevant (the rule must have a description). Manual: The rule is only applied if you explicitly invoke it by typing its name (e.g., my-custom-rule) in the Chat or Cmd-K prompt. Nested Rules: You can create .cursorrules subdirectories deeper in your project structure (e.g., projectbackend.cursorrules) to organize rules that are specific to certain parts of your application. User Rules User rules are global to your Cursor installation and apply to all your projects. Storage: Defined in Cursor Settings  Rules. Format: Plain text only (no MDC or metadata). Use Cases: Ideal for personal preferences like response language, tone, or general coding style hints you always want the AI to follow. Please always reply in a concise style. Prefer arrow functions for JavaScript callbacks. .cursorrules (Legacy) This is an older, deprecated way of defining rules in a single .cursorrules file at the project root. While still supported, it's recommended to migrate to the more flexible Project Rules (.cursorrules.mdc) format. Using Cursor Rules effectively To get the most out of Cursor Rules: Creating Rules: Use the Command Palette (CmdShiftP or CtrlShiftP) and search for \"New Cursor Rule\". Manually create .mdc files in your project's .cursorrules directory. Ask the AI to generate a rule from a conversation: \"Turn this conversation into a Cursor Rule\" or use the Generate Cursor Rules command in chat. Applying Rules: Manual Invocation: For rules designed for on-demand use, type  followed by the rule's filename (without the .mdc extension) in the AI chat or Cmd-K input. For example, if your rule is my-rule.mdc, type my-rule. Automatic Application: Rules with globs (for Auto Attached type) or alwaysApply: true (for Always type) will be applied automatically by Cursor when their conditions are met. You'll often see an indicator if rules are being applied. Agent Interaction: For Agent Requested rules, the AI might suggest using a rule if it's relevant to your current task. Discovering Rules: You can usually see which rules are active or available in the context section of Cursor's AI interface. The core idea is that rules provide the AI with crucial context before it generates a response, leading to more accurate, relevant, and helpful interactions. Best practices for writing rules To create effective Cursor Rules: Be Specific and Concise: Rules should be focused on a particular task or guideline. Aim for clarity and keep them reasonably short (e.g., under a few hundred lines if possible). Make Them Actionable: Provide clear instructions that the AI can follow. Use Examples: If a rule involves a specific code structure or format, include a small, clear example within the rule content or by referencing a template file. Iterate and Refine: Start with simple rules and build upon them. If a rule isn't working as expected, refine its wording or scope. Organize with Descriptions: For Agent Requested or Manual rules, a good description in the MDC frontmatter helps you (and the AI) understand what it does and when to use it. Compose Rules: Break down complex sets of instructions into smaller, reusable rules. Version Control: Always commit your .cursorrules directory to your repository to share them with your team and keep a history. By thoughtfully crafting and utilizing Cursor Rules, you can significantly enhance the AI's capabilities and tailor its assistance to your specific development needs. Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/create-rules",
      "https://playbooks.com/rules/flask",
      "https://playbooks.com/rules/expressjs",
      "https://playbooks.com/rules/memory",
      "https://playbooks.com/rules/swiftui",
      "https://playbooks.com/rules/react",
      "https://playbooks.com/rules/ruby-on-rails",
      "https://playbooks.com/rules/jinja",
      "https://playbooks.com/rules/fastapi",
      "https://playbooks.com/rules/nextjs",
      "https://playbooks.com/rules/sveltekit",
      "https://playbooks.com/rules/task-lists",
      "https://playbooks.com/rules/rule-analytics",
      "https://playbooks.com/rules/postgresql",
      "https://playbooks.com/rules/django",
      "https://playbooks.com/rules/builder",
      "https://playbooks.com/rules/vitest-testing",
      "https://playbooks.com/rules/mysql",
      "https://playbooks.com/rules/laravel",
      "https://playbooks.com/rules/sqlite",
      "https://playbooks.com/rules/react-native",
      "https://playbooks.com/rules/flutter",
      "https://playbooks.com/rules/tailwind",
      "https://playbooks.com/rules/vuejs",
      "https://playbooks.com/rules/create"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Simple, practical, and composable Cursor project rules to help you build better apps without wasting valuable context tokens.",
      "og:title": "Cursor rules for AI that actually work",
      "og:description": "Simple, practical, and composable Cursor project rules to help you build better apps without wasting valuable context tokens.",
      "og:image": "https://assets.playbooks.com/og-images/ee831614a1.png",
      "og:url": "https://playbooks.com/rules",
      "og:type": "website",
      "twitter:title": "Cursor rules for AI that actually work",
      "twitter:description": "Simple, practical, and composable Cursor project rules to help you build better apps without wasting valuable context tokens.",
      "twitter:image": "https://assets.playbooks.com/og-images/ee831614a1.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Cursor rules for AI that actually work",
        "og:description": "Simple, practical, and composable Cursor project rules to help you build better apps without wasting valuable context tokens.",
        "og:image": "https://assets.playbooks.com/og-images/ee831614a1.png",
        "og:url": "https://playbooks.com/rules",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Cursor rules for AI that actually work",
        "twitter:description": "Simple, practical, and composable Cursor project rules to help you build better apps without wasting valuable context tokens.",
        "twitter:image": "https://assets.playbooks.com/og-images/ee831614a1.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor rules for AI that actually work"
      ],
      "h2": [
        "Search",
        "Sort by",
        "Options",
        "What are Cursor Rules?",
        "Why use Cursor Rules?",
        "Types of rules",
        "Using Cursor Rules effectively",
        "Best practices for writing rules"
      ],
      "h3": [
        "Project Rules",
        "User Rules",
        ".cursorrules (Legacy)"
      ],
      "h4": [
        "Advertise with Us",
        "Advertise with Us"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/create-rules",
    "timestamp": "2025-06-12T10:11:38.273590",
    "title": "A Cursor rule to create new Cursor rules",
    "text": "A Cursor rule to create new Cursor rules playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in A Cursor rule to create new Cursor rules This rule explains how to create new .mdc project rule files for the Cursor agent. Back to rules Type Integration Stats 4,526 views 290 copies 105 downloads Author Elie Steinbock Cursor (.mdc) Windsurf (.md) create-rules.mdc Copy Download --- description: This rule explains how to create new .mdc project rule files for the Cursor agent. globs: alwaysApply: true ---  Cursor Rules Location How to add new cursor rules to the project 1. Always place rule files in PROJECT_ROOT.cursorrules:  .cursorrules  your-rule-name.mdc  another-rule.mdc  ...  2. Follow the naming convention: - Use kebab-case for filenames - Always use .mdc extension - Make names descriptive of the rule's purpose 3. Directory structure:  PROJECT_ROOT  .cursor   rules   your-rule-name.mdc   ...  ...  4. Never place rule files: - In the project root - In subdirectories outside .cursorrules - In any other location 5. Cursor rules have the following structure:  --- description: Short description of the rule's purpose globs: optionalpathpattern alwaysApply: false ---  Rule Title Main content explaining the rule with markdown formatting. 1. Step-by-step instructions 2. Code examples 3. Guidelines Example: typescript  Good example function goodExample()   Implementation following guidelines   Bad example function badExample()   Implementation not following guidelines   create-rules.md Copy Download --- trigger: always_on description: This rule explains how to create new .mdc project rule files for the Cursor agent. ---  Cursor Rules Location How to add new cursor rules to the project 1. Always place rule files in PROJECT_ROOT.cursorrules:  .cursorrules  your-rule-name.mdc  another-rule.mdc  ...  2. Follow the naming convention: - Use kebab-case for filenames - Always use .mdc extension - Make names descriptive of the rule's purpose 3. Directory structure:  PROJECT_ROOT  .cursor   rules   your-rule-name.mdc   ...  ...  4. Never place rule files: - In the project root - In subdirectories outside .cursorrules - In any other location 5. Cursor rules have the following structure:  --- description: Short description of the rule's purpose globs: optionalpathpattern alwaysApply: false ---  Rule Title Main content explaining the rule with markdown formatting. 1. Step-by-step instructions 2. Code examples 3. Guidelines Example: typescript  Good example function goodExample()   Implementation following guidelines   Bad example function badExample()   Implementation not following guidelines   Add a snippet Suggest changes Creating rules in Cursor allows you to define consistent guidance for the AI assistant in your project. This rule specifically explains how to properly add new .mdc rule files to your project structure, ensuring they're placed in the correct location and follow the appropriate formatting conventions. What this rule does The \"Create Rules\" rule serves as a guide for setting up new rule files in your Cursor projects. It outlines the proper directory structure, naming conventions, and file format for Cursor rules. Following these guidelines ensures that your custom rules are properly recognized and applied by the Cursor AI assistant. Rule file organization When adding rules to your project, proper organization is critical: Location requirements All rule files must be placed in the .cursorrules directory at the root of your project. This specific location ensures Cursor can find and apply your rules automatically. The rule defines a clear structure: PROJECT_ROOT  .cursor   rules   your-rule-name.mdc   ...  ... Rules should never be placed in the project root, subdirectories outside .cursorrules, or any other location. Naming conventions For rule files to be properly recognized, they must follow these naming guidelines: Use kebab-case for filenames (e.g., code-style-guide.mdc, git-commit-format.mdc) Always include the .mdc extension Choose descriptive names that clearly indicate the rule's purpose Rule file structure Each rule file follows a specific format with three main components: YAML frontmatter - Contains metadata about the rule: description: A concise explanation of the rule's purpose globs: Optional path patterns to automatically apply the rule to matching files alwaysApply: Boolean flag determining if the rule should always be active Rule title - A clear heading identifying the rule Main content - The detailed instructions, formatted with markdown, which may include: Step-by-step guidelines Code examples (good and bad) Specific implementation instructions A simplified example structure: --- description: Short description of the rule's purpose globs: optionalpathpattern alwaysApply: false ---  Rule Title Main rule content with instructions... Using create rules in Cursor The \"Create Rules\" rule itself is defined in a file named create-rules.mdc and serves as a meta-guide for creating other rules. Since this rule doesn't appear to have a glob pattern, it's likely intended to be manually invoked when you need guidance on creating new rules. To use this rule: Open your Cursor editor When you need to create a new rule, type create-rules in the Cmd-K prompt or chat interface The AI will respond with guidance on how to properly structure and place your new rule file This rule is particularly useful when setting up project-specific guidelines or when you're new to creating Cursor rules and need a reference for the proper structure and location. Tips for effective rule creation When creating new rules for your project: Consider organizing related rules with similar prefixes (e.g., code-style-javascript.mdc, code-style-python.mdc) Make rule titles and descriptions clear and specific For rules that should apply to specific file types, use appropriate glob patterns Test your rules after creation to ensure they're being applied as expected Consider including both positive and negative examples in your rules to clearly illustrate preferred practices By following the guidelines in the Create Rules rule, you'll ensure consistent rule implementation across your project, making it easier for team members to understand and follow your project's standards. Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/add/create-rules",
      "https://playbooks.com/rules/suggest/create-rules"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This Cursor rule will explain to the Cursor agent how it can help you create new rules in the right format.",
      "og:title": "A Cursor rule to create new Cursor rules",
      "og:description": "This Cursor rule will explain to the Cursor agent how it can help you create new rules in the right format.",
      "og:image": "https://assets.playbooks.com/og-images/fddd95b9ea.png",
      "og:url": "https://playbooks.com/rules/create-rules",
      "og:type": "website",
      "twitter:title": "A Cursor rule to create new Cursor rules",
      "twitter:description": "This Cursor rule will explain to the Cursor agent how it can help you create new rules in the right format.",
      "twitter:image": "https://assets.playbooks.com/og-images/fddd95b9ea.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "A Cursor rule to create new Cursor rules",
        "og:description": "This Cursor rule will explain to the Cursor agent how it can help you create new rules in the right format.",
        "og:image": "https://assets.playbooks.com/og-images/fddd95b9ea.png",
        "og:url": "https://playbooks.com/rules/create-rules",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "A Cursor rule to create new Cursor rules",
        "twitter:description": "This Cursor rule will explain to the Cursor agent how it can help you create new rules in the right format.",
        "twitter:image": "https://assets.playbooks.com/og-images/fddd95b9ea.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "A Cursor rule to create new Cursor rules"
      ],
      "h2": [
        "What this rule does",
        "Rule file organization",
        "Rule file structure",
        "Using create rules in Cursor",
        "Tips for effective rule creation"
      ],
      "h3": [
        "Location requirements",
        "Naming conventions"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/memory",
    "timestamp": "2025-06-12T10:11:39.648013",
    "title": "Cursor rule for adding memory",
    "text": "Cursor rule for adding memory playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor rules for adding memory to your app This rule defines how the AI agent should manage and utilize memory improve coding consistency. Back to rules Type Integration Stats 1,812 views 214 copies 112 downloads Author Elie Steinbock Cursor (.mdc) Windsurf (.md) memory.mdc Copy Download --- description: This rule defines how the AI agent should manage and utilize memory improve coding consistency. globs:  alwaysApply: false ---  AI Memory Rule This rule defines how the AI should manage and utilize its \"memory\" regarding this specific project, including user preferences, learned facts, and project-specific conventions.  Purpose The AI's memory helps maintain consistency and adapt to specific project needs or user preferences discovered during interactions. It prevents the AI from repeatedly asking for the same information or making suggestions contrary to established patterns.  Storage All learned project-specific knowledge and preferences should be stored and referenced in the learned-memories.mdc file located in .cursorrules.  Updating Memory When new information relevant to the project's conventions, user preferences, or specific technical details is learned (either explicitly told by the user or inferred through conversation), the AI should: 1. Identify Key Information: Determine the core piece of knowledge to be stored. 2. Check Existing Memory: Review learned-memories.mdc to see if this information contradicts or updates existing entries. 3. Propose Update: Suggest an edit to learned-memories.mdc to add or modify the relevant information. Keep entries concise and clear.  Using Memory Before proposing solutions, code changes, or answering questions, the AI should consult learned-memories.mdc to ensure its response aligns with the recorded knowledge and preferences.  Example Scenario User: \"We've decided to use Tailwind v4 for this project, not v3.\" AI Action: 1. Recognize this as a project-specific technical decision. 2. Check learned-memories.mdc for existing Tailwind version information. 3. Propose adding or updating an entry in learned-memories.mdc: markdown  Technical Decisions  CSS Framework: Tailwind v4 is used. Ensure usage aligns with v4 documentation and practices, noting differences from v3.  4. In subsequent interactions involving Tailwind, the AI will refer to this entry and consult v4 documentation if necessary.  Memory File (.cursorruleslearned-memories.mdc) The basic structure: markdown  Project Memory This file stores project-specific knowledge, conventions, and user preferences learned by the AI assistant.  User Preferences - Preference 1 - Preference 2  Technical Decisions - Decision 1 - Decision 2  Project Conventions - Convention 1 - Convention 2  memory.md Copy Download --- trigger: model_decision description: This rule defines how the AI agent should manage and utilize memory improve coding consistency. ---  AI Memory Rule This rule defines how the AI should manage and utilize its \"memory\" regarding this specific project, including user preferences, learned facts, and project-specific conventions.  Purpose The AI's memory helps maintain consistency and adapt to specific project needs or user preferences discovered during interactions. It prevents the AI from repeatedly asking for the same information or making suggestions contrary to established patterns.  Storage All learned project-specific knowledge and preferences should be stored and referenced in the learned-memories.mdc file located in .cursorrules.  Updating Memory When new information relevant to the project's conventions, user preferences, or specific technical details is learned (either explicitly told by the user or inferred through conversation), the AI should: 1. Identify Key Information: Determine the core piece of knowledge to be stored. 2. Check Existing Memory: Review learned-memories.mdc to see if this information contradicts or updates existing entries. 3. Propose Update: Suggest an edit to learned-memories.mdc to add or modify the relevant information. Keep entries concise and clear.  Using Memory Before proposing solutions, code changes, or answering questions, the AI should consult learned-memories.mdc to ensure its response aligns with the recorded knowledge and preferences.  Example Scenario User: \"We've decided to use Tailwind v4 for this project, not v3.\" AI Action: 1. Recognize this as a project-specific technical decision. 2. Check learned-memories.mdc for existing Tailwind version information. 3. Propose adding or updating an entry in learned-memories.mdc: markdown  Technical Decisions  CSS Framework: Tailwind v4 is used. Ensure usage aligns with v4 documentation and practices, noting differences from v3.  4. In subsequent interactions involving Tailwind, the AI will refer to this entry and consult v4 documentation if necessary.  Memory File (.cursorruleslearned-memories.mdc) The basic structure: markdown  Project Memory This file stores project-specific knowledge, conventions, and user preferences learned by the AI assistant.  User Preferences - Preference 1 - Preference 2  Technical Decisions - Decision 1 - Decision 2  Project Conventions - Convention 1 - Convention 2  Add a snippet Suggest changes The Memory rule in Cursor helps maintain consistency and context in your coding projects by storing and utilizing information about your preferences, project conventions, and technical decisions. This persistent memory allows the AI to provide more relevant assistance without repeatedly asking you for the same information. What this rule does The Memory rule establishes a system for the AI to: Record and maintain project-specific knowledge Store user preferences learned during interactions Remember technical decisions and conventions Reference this stored knowledge when providing assistance This functionality helps the AI adapt to your specific project needs while ensuring its suggestions remain consistent with previously established patterns and preferences. How memory works in Cursor Storage mechanism The rule creates and maintains a dedicated markdown file called learned-memories.mdc located in the .cursorrules directory of your project. This file serves as the central repository for all project knowledge and follows a structured format:  Project Memory This file stores project-specific knowledge, conventions, and user preferences learned by the AI assistant.  User Preferences Preference 1 Preference 2  Technical Decisions Decision 1 Decision 2  Project Conventions Convention 1 Convention 2 Memory update process The AI updates its memory through a systematic process: It identifies key information that should be remembered Reviews the existing learned-memories.mdc file for contradictions or updates Proposes appropriate additions or modifications to the file Uses this stored knowledge in future interactions Example scenario Consider this interaction with the AI: You: \"We've decided to use Tailwind v4 for this project, not v3.\" AI's response and actions: Recognizes this as an important technical decision Checks if any existing Tailwind information is stored Proposes updating the memory file with:  Technical Decisions  CSS Framework: Tailwind v4 is used. Ensure usage aligns with v4 documentation and practices, noting differences from v3. In subsequent interactions involving Tailwind CSS, the AI will reference this memory to ensure its suggestions align with version 4 requirements. Using Memory in Cursor The Memory rule is stored as memory.mdc in your project's .cursorrules directory. Based on its glob pattern (), this is an \"Auto Attached\" rule that applies to all files in your project, meaning the AI will consistently maintain and reference its memory across your entire codebase. To leverage this rule effectively: Make sure the .cursorrules directory exists in your project Ensure the memory.mdc file is present in that directory Create the initial learned-memories.mdc file or let the AI create it when needed Since this rule is automatically applied, you don't need to manually invoke it. The AI will naturally begin tracking important information during your conversations and suggest updates to the memory file when appropriate. Usage tips Be explicit about preferences While the AI can infer some preferences, being explicit helps build a more accurate memory. Statements like \"I prefer using arrow functions instead of function declarations\" or \"We follow the Airbnb style guide for this project\" provide clear information for the AI to store. Review memory updates When the AI suggests updating the memory file, review the changes to ensure they accurately reflect your intentions. This helps prevent misunderstandings from being stored as \"facts\" about your project. Reference specific memories If you want the AI to specifically consider a certain preference or decision, you can directly reference it: \"Remember that we're using Tailwind v4 for this project when suggesting CSS solutions.\" Periodically review the memory file Occasionally review the learned-memories.mdc file to remove outdated information or clarify ambiguous entries. This ensures the AI continues to provide relevant assistance based on current project requirements. Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/suggest/memory",
      "https://playbooks.com/rules/add/memory"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule defines how the AI agent should manage and utilize memory improve coding consistency.",
      "og:title": "Cursor rule for adding memory",
      "og:description": "This rule defines how the AI agent should manage and utilize memory improve coding consistency.",
      "og:image": "https://assets.playbooks.com/og-images/383773d6a1.png",
      "og:url": "https://playbooks.com/rules/memory",
      "og:type": "website",
      "twitter:title": "Cursor rule for adding memory",
      "twitter:description": "This rule defines how the AI agent should manage and utilize memory improve coding consistency.",
      "twitter:image": "https://assets.playbooks.com/og-images/383773d6a1.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Cursor rule for adding memory",
        "og:description": "This rule defines how the AI agent should manage and utilize memory improve coding consistency.",
        "og:image": "https://assets.playbooks.com/og-images/383773d6a1.png",
        "og:url": "https://playbooks.com/rules/memory",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Cursor rule for adding memory",
        "twitter:description": "This rule defines how the AI agent should manage and utilize memory improve coding consistency.",
        "twitter:image": "https://assets.playbooks.com/og-images/383773d6a1.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor rules for adding memory to your app"
      ],
      "h2": [
        "What this rule does",
        "How memory works in Cursor",
        "Example scenario",
        "Using Memory in Cursor",
        "Usage tips"
      ],
      "h3": [
        "Storage mechanism",
        "Memory update process",
        "Be explicit about preferences",
        "Review memory updates",
        "Reference specific memories",
        "Periodically review the memory file"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/swiftui",
    "timestamp": "2025-06-12T10:11:40.764995",
    "title": "SwiftUI Cursor Rules for AI",
    "text": "SwiftUI Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for SwiftUI This rule explains SwiftUI patterns and best practices for iOS, macOS, watchOS, and tvOS development. Back to rules Type Mobile Language(s) Swift Stats 1,039 views 116 copies 36 downloads Cursor (.mdc) Windsurf (.md) swiftui.mdc Copy Download --- description: This rule explains SwiftUI patterns and best practices for iOS, macOS, watchOS, and tvOS development. globs: .swift alwaysApply: false ---  SwiftUI rules - Use structs for views and keep them small and focused - Use State for simple view-local state - Use ObservableObject with Published for shared state - Use Binding to pass mutable state to child views - Create custom ViewModifiers for reusable styling - Use environment objects for dependency injection - Use LazyVStack and LazyHStack for large collections - Extract complex view logic into separate components swiftui.md Copy Download --- trigger: glob description: This rule explains SwiftUI patterns and best practices for iOS, macOS, watchOS, and tvOS development. globs: .swift ---  SwiftUI rules - Use structs for views and keep them small and focused - Use State for simple view-local state - Use ObservableObject with Published for shared state - Use Binding to pass mutable state to child views - Create custom ViewModifiers for reusable styling - Use environment objects for dependency injection - Use LazyVStack and LazyHStack for large collections - Extract complex view logic into separate components Add a snippet Suggest changes The SwiftUI rule provides guidance on best practices and patterns for developing applications using SwiftUI across Apple platforms, including iOS, macOS, watchOS, and tvOS. It helps maintain consistent, efficient code when working with Apple's declarative UI framework. What this rule does This rule serves as a reference guide for SwiftUI development, offering recommendations for structuring views, managing state, and implementing common patterns. It encapsulates essential best practices that help developers write clean, maintainable SwiftUI code while avoiding common pitfalls. The rule covers several core aspects of SwiftUI development: View structure and composition The rule emphasizes using structs for views and keeping them small and focused on specific UI components. This approach improves code readability and makes maintenance easier by following the single responsibility principle. State management SwiftUI offers several ways to handle state, and this rule provides guidance on when to use each approach: State for simple view-local state that doesn't need to be shared ObservableObject with Published properties for shared state across multiple views Binding for passing mutable state to child views Code reusability The rule recommends creating custom ViewModifiers for reusable styling, which helps maintain consistency across your app while reducing code duplication. Performance considerations For large collections of views, the rule suggests using LazyVStack and LazyHStack to improve performance by loading views only as needed. Using SwiftUI in Cursor The SwiftUI rule (swiftui.mdc) is automatically attached when working with Swift files in Cursor. The rule uses the glob pattern .swift, which means it will be automatically applied whenever you're editing any Swift file in your project. This automatic activation provides several benefits: You'll receive SwiftUI-specific suggestions and code completions when working with Swift files The AI will understand SwiftUI conventions when analyzing or generating code Code refactoring suggestions will follow SwiftUI best practices You don't need to manually invoke this rule since it attaches automatically to Swift files. However, if you want to explicitly reference it in a conversation with the AI, you can type swiftui in the chat or Cmd-K interface. Usage tips Implementing state management When deciding which state management approach to use, consider the scope and sharing requirements:  For simple view-local state struct CounterView: View  State private var count  0 var body: some View  Button(\"Increment: (count)\")  count  1     For shared state across views class UserSettings: ObservableObject  Published var username  \"\" Published var isLoggedIn  false   In your view struct ProfileView: View  ObservedObject var settings: UserSettings var body: some View  Text(\"Hello, (settings.username)\")   Creating reusable modifiers Custom view modifiers make styling more consistent and reusable: struct PrimaryButtonStyle: ViewModifier  func body(content: Content) - some View  content .padding() .background(Color.blue) .foregroundColor(.white) .cornerRadius(10)    Usage Button(\"Save\")   action   .modifier(PrimaryButtonStyle())  Or create an extension extension View  func primaryButton() - some View  self.modifier(PrimaryButtonStyle())   Performance optimization For lists with many items, use lazy stacks to improve performance: ScrollView  LazyVStack  ForEach(0..1000)  index in Text(\"Row (index)\")    By following these SwiftUI best practices as outlined in the rule, you'll create more maintainable, performant applications across Apple platforms. Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/suggest/swiftui",
      "https://playbooks.com/rules/add/swiftui"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains SwiftUI patterns and best practices for iOS, macOS, watchOS, and tvOS development.",
      "og:title": "SwiftUI Cursor Rules for AI",
      "og:description": "This rule explains SwiftUI patterns and best practices for iOS, macOS, watchOS, and tvOS development.",
      "og:image": "https://assets.playbooks.com/og-images/e25517b933.png",
      "og:url": "https://playbooks.com/rules/swiftui",
      "og:type": "website",
      "twitter:title": "SwiftUI Cursor Rules for AI",
      "twitter:description": "This rule explains SwiftUI patterns and best practices for iOS, macOS, watchOS, and tvOS development.",
      "twitter:image": "https://assets.playbooks.com/og-images/e25517b933.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "SwiftUI Cursor Rules for AI",
        "og:description": "This rule explains SwiftUI patterns and best practices for iOS, macOS, watchOS, and tvOS development.",
        "og:image": "https://assets.playbooks.com/og-images/e25517b933.png",
        "og:url": "https://playbooks.com/rules/swiftui",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "SwiftUI Cursor Rules for AI",
        "twitter:description": "This rule explains SwiftUI patterns and best practices for iOS, macOS, watchOS, and tvOS development.",
        "twitter:image": "https://assets.playbooks.com/og-images/e25517b933.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    SwiftUI"
      ],
      "h2": [
        "What this rule does",
        "Using SwiftUI in Cursor",
        "Usage tips"
      ],
      "h3": [
        "View structure and composition",
        "State management",
        "Code reusability",
        "Performance considerations",
        "Implementing state management",
        "Creating reusable modifiers",
        "Performance optimization"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/jinja",
    "timestamp": "2025-06-12T10:11:42.656169",
    "title": "Jinja Cursor Rules for AI",
    "text": "Jinja Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for Jinja This rule explains Jinja template syntax and best practices for Python web applications. Back to rules Type Frontend Language(s) Python Compatible with Flask FastAPI Stats 387 views 21 copies 18 downloads Cursor (.mdc) Windsurf (.md) jinja.mdc Copy Download --- description: This rule explains Jinja template syntax and best practices for Python web applications. globs: .html alwaysApply: false ---  Jinja rules - Use template inheritance: html  base.html   block title Default Title endblock   block content  endblock   - Use include for components: html  include \"componentsuser_card.html\"   - Use macros for reusable functions: html  macro input(name, value'', type'text')   endmacro   - Use control structures: html  if user.is_authenticated  Welcome,  user.username !  else  Please log in.  endif   - Use filters to format data: html  texttruncate(30)   datestrftime('B d, Y')   - Use set for local variables: html  set navigation  ('Home', ''), ('About', 'about')   - Use whitespace control: html  for item in items -  item  - endfor   jinja.md Copy Download --- trigger: glob description: This rule explains Jinja template syntax and best practices for Python web applications. globs: .html ---  Jinja rules - Use template inheritance: html  base.html   block title Default Title endblock   block content  endblock   - Use include for components: html  include \"componentsuser_card.html\"   - Use macros for reusable functions: html  macro input(name, value'', type'text')   endmacro   - Use control structures: html  if user.is_authenticated  Welcome,  user.username !  else  Please log in.  endif   - Use filters to format data: html  texttruncate(30)   datestrftime('B d, Y')   - Use set for local variables: html  set navigation  ('Home', ''), ('About', 'about')   - Use whitespace control: html  for item in items -  item  - endfor   Add a snippet Suggest changes Jinja templating is a powerful Python templating engine commonly used in web frameworks like Flask and Django. This rule provides essential syntax patterns and best practices for Jinja template development to help you create clean, maintainable, and efficient web templates. What this rule does The Jinja rule provides a comprehensive guide to Jinja template syntax and patterns for Python web applications. It covers fundamental concepts including template inheritance, components, macros, control structures, and formatting options. This rule helps standardize template development and promotes best practices within your project. Key Jinja concepts Template inheritance Template inheritance allows you to build a base \"skeleton\" template with common elements (header, navigation, footer) that child templates can extend and override specific blocks:  block content  endblock   extends \"base.html\"   block content  Page specific content  endblock  This approach reduces duplication and creates a consistent structure across multiple pages. Components and reusability The rule emphasizes several methods for creating reusable template components: Includes - For embedding template fragments:  include \"componentsuser_card.html\"  Macros - For template functions with parameters:  macro input(name, value'', type'text')   endmacro   input('username', type'email')  Data manipulation Jinja provides powerful ways to handle data: Control structures for conditionals and loops Filters to format and transform data inline Set statements for local variables Whitespace control to manage output formatting Using Jinja in Cursor The Jinja rule (jinja.mdc) is designed to assist you when working with Jinja templates in your Python web projects. This rule is configured as an \"Auto Attached\" rule that automatically activates when you're working with HTML files, thanks to its glob pattern (.html). When you open or create an HTML file in your project, Cursor will intelligently apply this rule's context to the AI, ensuring you receive Jinja-aware assistance. This means the AI will: Understand Jinja syntax in your HTML files Provide appropriate suggestions based on Jinja best practices Help you implement template inheritance, macros, and other Jinja patterns correctly You can also manually invoke this rule at any time by typing jinja in the Cmd-K command palette or AI chat, which is helpful when working with files that might contain Jinja but don't match the HTML extension pattern. Usage tips Whitespace management Use Jinja's whitespace control modifiers (-) to create cleaner HTML output by stripping unnecessary whitespace:  for item in items -  item  - endfor  Leverage filters effectively Jinja's filters are powerful for formatting and transforming data directly in templates:  long_descriptiontruncate(100)   created_atstrftime('B d, Y')   user_inputescape  Organize complex templates For larger applications: Break your templates into logical components Use clear naming conventions for blocks Consider organizing macros into separate files that can be imported By following these Jinja best practices, you'll create more maintainable and efficient templates for your Python web applications. Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/suggest/jinja",
      "https://playbooks.com/rules/add/jinja"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains Jinja template syntax and best practices for Python web applications.",
      "og:title": "Jinja Cursor Rules for AI",
      "og:description": "This rule explains Jinja template syntax and best practices for Python web applications.",
      "og:image": "https://assets.playbooks.com/og-images/1de08bcd24.png",
      "og:url": "https://playbooks.com/rules/jinja",
      "og:type": "website",
      "twitter:title": "Jinja Cursor Rules for AI",
      "twitter:description": "This rule explains Jinja template syntax and best practices for Python web applications.",
      "twitter:image": "https://assets.playbooks.com/og-images/1de08bcd24.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Jinja Cursor Rules for AI",
        "og:description": "This rule explains Jinja template syntax and best practices for Python web applications.",
        "og:image": "https://assets.playbooks.com/og-images/1de08bcd24.png",
        "og:url": "https://playbooks.com/rules/jinja",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Jinja Cursor Rules for AI",
        "twitter:description": "This rule explains Jinja template syntax and best practices for Python web applications.",
        "twitter:image": "https://assets.playbooks.com/og-images/1de08bcd24.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    Jinja"
      ],
      "h2": [
        "What this rule does",
        "Key Jinja concepts",
        "Using Jinja in Cursor",
        "Usage tips"
      ],
      "h3": [
        "Template inheritance",
        "Components and reusability",
        "Data manipulation",
        "Whitespace management",
        "Leverage filters effectively",
        "Organize complex templates"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/sveltekit",
    "timestamp": "2025-06-12T10:11:44.075692",
    "title": "SvelteKit Cursor Rules for AI",
    "text": "SvelteKit Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for SvelteKit This rule explains SvelteKit conventions and best practices for fullstack development. Back to rules Type Fullstack Language(s) JavaScript TypeScript Tags Framework Stats 772 views 83 copies 28 downloads Cursor (.mdc) Windsurf (.md) sveltekit.mdc Copy Download --- description: This rule explains SvelteKit conventions and best practices for fullstack development. globs: .js,.ts,.svelte alwaysApply: false ---  SvelteKit rules  File Structure - Follow the file-based routing structure with page.svelte for pages and layout.svelte for layouts - Use page.server.js for server-only code including data loading and form actions - Use server.js files for API endpoints - Place reusable components in libcomponents using kebab-case directories - Store utility functions in libutils and types in libtypes  Component Patterns - Use PascalCase for component filenames (e.g., Button.svelte) - Prefer named exports over default exports - Use TypeScript in components with  title if description description if For page routing When implementing routing in SvelteKit, follow these patterns: About For form handling SvelteKit offers progressive enhancement for forms: Subscribe By following the conventions outlined in this rule, you'll create more maintainable, performant, and user-friendly SvelteKit applications while benefiting from Cursor's AI-powered assistance. Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/add/sveltekit",
      "https://playbooks.com/rules/suggest/sveltekit"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains SvelteKit conventions and best practices for fullstack development.",
      "og:title": "SvelteKit Cursor Rules for AI",
      "og:description": "This rule explains SvelteKit conventions and best practices for fullstack development.",
      "og:image": "https://assets.playbooks.com/og-images/c5a4bf1e38.png",
      "og:url": "https://playbooks.com/rules/sveltekit",
      "og:type": "website",
      "twitter:title": "SvelteKit Cursor Rules for AI",
      "twitter:description": "This rule explains SvelteKit conventions and best practices for fullstack development.",
      "twitter:image": "https://assets.playbooks.com/og-images/c5a4bf1e38.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "SvelteKit Cursor Rules for AI",
        "og:description": "This rule explains SvelteKit conventions and best practices for fullstack development.",
        "og:image": "https://assets.playbooks.com/og-images/c5a4bf1e38.png",
        "og:url": "https://playbooks.com/rules/sveltekit",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "SvelteKit Cursor Rules for AI",
        "twitter:description": "This rule explains SvelteKit conventions and best practices for fullstack development.",
        "twitter:image": "https://assets.playbooks.com/og-images/c5a4bf1e38.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    SvelteKit"
      ],
      "h2": [
        "What this rule does",
        "Key SvelteKit conventions",
        "Using SvelteKit in Cursor",
        "Usage tips"
      ],
      "h3": [
        "File structure",
        "Component practices",
        "Data and state management",
        "When building new components",
        "For page routing",
        "For form handling"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/postgresql",
    "timestamp": "2025-06-12T10:11:46.496776",
    "title": "PostgreSQL Cursor Rules for AI",
    "text": "PostgreSQL Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for PostgreSQL This rule explains PostgreSQL database design patterns and advanced features usage. Back to rules Type Database Stats 1,287 views 158 copies 88 downloads Contributors Ian Nuttall Ian Nuttall Ian Nuttall Cursor (.mdc) Windsurf (.md) postgresql.mdc Copy Download --- description: This rule explains PostgreSQL database design patterns and advanced features usage. globs: .sql alwaysApply: false ---  PostgresSQL rules  General - Use lowercase for SQL reserved words to maintain consistency and readability. - Employ consistent, descriptive identifiers for tables, columns, and other database objects. - Use white space and indentation to enhance the readability of your code. - Store dates in ISO 8601 format (yyyy-mm-ddThh:mm:ss.sssss). - Include comments for complex logic, using ' ... ' for block comments and '--' for line comments.  Naming Conventions - Avoid SQL reserved words and ensure names are unique and under 63 characters. - Use snake_case for tables and columns. - Prefer plurals for table names - Prefer singular names for columns.  Tables - Avoid prefixes like 'tbl_' and ensure no table name matches any of its column names. - Always add an id column of type identity generated always unless otherwise specified. - Create all tables in the public schema unless otherwise specified. - Always add the schema to SQL queries for clarity. - Always add a comment to describe what the table does. The comment can be up to 1024 characters.  Columns - Use singular names and avoid generic names like 'id'. - For references to foreign tables, use the singular of the table name with the _id suffix. For example user_id to reference the users table - Always use lowercase except in cases involving acronyms or when readability would be enhanced by an exception.  Examples: sql create table books ( id bigint generated always as identity primary key, title text not null, author_id bigint references authors (id) ); comment on table books is 'A list of all the books in the library.';   Queries - When the query is shorter keep it on just a few lines. As it gets larger start adding newlines for readability - Add spaces for readability. Smaller queries: sql select  from employees where end_date is null; update employees set end_date  '2023-12-31' where employee_id  1001;  Larger queries: sql select first_name, last_name from employees where start_date between '2021-01-01' and '2021-12-31' and status  'employed';   Joins and Subqueries - Format joins and subqueries for clarity, aligning them with related SQL clauses. - Prefer full table names when referencing tables. This helps for readability. sql select employees.employee_name, departments.department_name from employees join departments on employees.department_id  departments.department_id where employees.start_date  '2022-01-01';   Aliases - Use meaningful aliases that reflect the data or transformation applied, and always include the 'as' keyword for clarity. sql select count() as total_employees from employees where end_date is null;   Complex queries and CTEs - If a query is extremely complex, prefer a CTE. - Make sure the CTE is clear and linear. Prefer readability over performance. - Add comments to each block. sql with department_employees as ( -- Get all employees and their departments select employees.department_id, employees.first_name, employees.last_name, departments.department_name from employees join departments on employees.department_id  departments.department_id ), employee_counts as ( -- Count how many employees in each department select department_name, count() as num_employees from department_employees group by department_name ) select department_name, num_employees from employee_counts order by department_name;  postgresql.md Copy Download --- trigger: glob description: This rule explains PostgreSQL database design patterns and advanced features usage. globs: .sql ---  PostgresSQL rules  General - Use lowercase for SQL reserved words to maintain consistency and readability. - Employ consistent, descriptive identifiers for tables, columns, and other database objects. - Use white space and indentation to enhance the readability of your code. - Store dates in ISO 8601 format (yyyy-mm-ddThh:mm:ss.sssss). - Include comments for complex logic, using ' ... ' for block comments and '--' for line comments.  Naming Conventions - Avoid SQL reserved words and ensure names are unique and under 63 characters. - Use snake_case for tables and columns. - Prefer plurals for table names - Prefer singular names for columns.  Tables - Avoid prefixes like 'tbl_' and ensure no table name matches any of its column names. - Always add an id column of type identity generated always unless otherwise specified. - Create all tables in the public schema unless otherwise specified. - Always add the schema to SQL queries for clarity. - Always add a comment to describe what the table does. The comment can be up to 1024 characters.  Columns - Use singular names and avoid generic names like 'id'. - For references to foreign tables, use the singular of the table name with the _id suffix. For example user_id to reference the users table - Always use lowercase except in cases involving acronyms or when readability would be enhanced by an exception.  Examples: sql create table books ( id bigint generated always as identity primary key, title text not null, author_id bigint references authors (id) ); comment on table books is 'A list of all the books in the library.';   Queries - When the query is shorter keep it on just a few lines. As it gets larger start adding newlines for readability - Add spaces for readability. Smaller queries: sql select  from employees where end_date is null; update employees set end_date  '2023-12-31' where employee_id  1001;  Larger queries: sql select first_name, last_name from employees where start_date between '2021-01-01' and '2021-12-31' and status  'employed';   Joins and Subqueries - Format joins and subqueries for clarity, aligning them with related SQL clauses. - Prefer full table names when referencing tables. This helps for readability. sql select employees.employee_name, departments.department_name from employees join departments on employees.department_id  departments.department_id where employees.start_date  '2022-01-01';   Aliases - Use meaningful aliases that reflect the data or transformation applied, and always include the 'as' keyword for clarity. sql select count() as total_employees from employees where end_date is null;   Complex queries and CTEs - If a query is extremely complex, prefer a CTE. - Make sure the CTE is clear and linear. Prefer readability over performance. - Add comments to each block. sql with department_employees as ( -- Get all employees and their departments select employees.department_id, employees.first_name, employees.last_name, departments.department_name from employees join departments on employees.department_id  departments.department_id ), employee_counts as ( -- Count how many employees in each department select department_name, count() as num_employees from department_employees group by department_name ) select department_name, num_employees from employee_counts order by department_name;  Add a snippet Suggest changes Related Snippets Supabase Edge Functions This rule explains coding rules for creating Supabase Edge Functions. Supabase RLS Policy This rule provides guidelines for writing Postgres Row Level Security policies. Postgres Database Functions This rule provides guidelines for writing PostgreSQL database functions. Supabase Migrations This rule explains how to write Postgres migrations provided by the Supabase CLI. This rule provides comprehensive guidelines for PostgreSQL database design and SQL coding practices. It's designed to help maintain consistency, readability, and best practices when working with PostgreSQL databases in your projects. What this rule does The PostgreSQL rule serves as a style guide and best practices reference for database development with PostgreSQL. It covers essential aspects of database design including: General formatting principles Naming conventions for database objects Table and column design guidelines Query formatting for improved readability Techniques for handling complex queries This rule helps enforce consistent database design patterns across your project, making your database code more maintainable and understandable by all team members. Key PostgreSQL guidelines General formatting The rule emphasizes consistent formatting with lowercase SQL reserved words, descriptive identifiers, and proper use of whitespace. For example, it recommends storing dates in ISO 8601 format and including comments for complex logic. Naming conventions Specific naming patterns are recommended: Using snake_case for tables and columns Plural names for tables (e.g., books) Singular names for columns (e.g., title) Avoiding SQL reserved words as identifiers Keeping names under 63 characters Table design For table creation, the rule recommends: Always adding an id column as an identity Creating tables in the public schema by default Including schema references in SQL queries Adding descriptive comments to explain table purpose Query formatting The rule provides clear guidance on query formatting based on query complexity: Smaller queries can be more compact Larger queries should use newlines and consistent indentation Joins should be clearly formatted with full table names Descriptive aliases should always use the as keyword Complex query handling For complex queries, the rule recommends: Using Common Table Expressions (CTEs) for readability Adding comments to explain each logical block Focusing on clarity over performance optimizations Using PostgreSQL in Cursor This rule is stored as postgresql.mdc in your project's .cursorrules directory. It's configured as an \"Auto Attached\" rule that activates automatically when you work with SQL files, as indicated by its glob pattern (.sql). When you open or create a SQL file in Cursor, this rule will automatically provide context to the AI, influencing how it responds to your queries about PostgreSQL database design and offering guidance when generating SQL code. You can also manually invoke this rule in any context by typing postgresql in the chat or Cmd-K interface, which is useful when discussing database design even outside of SQL files. Usage tips When to apply this rule This rule is particularly valuable in these scenarios: When designing a new database schema When reviewing existing database code for consistency When writing complex queries that need to be maintainable When onboarding new team members to your database practices Examples of rule application For instance, when asking the AI to help you create a new table, with this rule activated, it will follow the conventions automatically: create table users ( id bigint generated always as identity primary key, username text not null, email text not null, created_at timestamp with time zone default now() ); comment on table users is 'Stores user account information for application authentication.'; When requesting help with complex queries, the AI will format them according to the rule's guidelines, using CTEs for clarity and proper indentation: with active_users as ( -- Find users who logged in within the last 30 days select user_id, username, last_login_date from users where last_login_date  current_date - interval '30 days' ), user_activity as ( -- Count actions per user select user_id, count() as action_count from user_actions where action_date  current_date - interval '30 days' group by user_id ) select active_users.username, user_activity.action_count from active_users join user_activity on active_users.user_id  user_activity.user_id order by user_activity.action_count desc; By consistently applying these guidelines, your database code will remain readable, maintainable, and follow PostgreSQL best practices. Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/supabase-edge-functions",
      "https://playbooks.com/rules/supabase-rls-policy",
      "https://playbooks.com/rules/add/postgresql",
      "https://playbooks.com/rules/postgres-database-functions",
      "https://playbooks.com/rules/supabase-migrations",
      "https://playbooks.com/rules/suggest/postgresql"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains PostgreSQL database design patterns and advanced features usage.",
      "og:title": "PostgreSQL Cursor Rules for AI",
      "og:description": "This rule explains PostgreSQL database design patterns and advanced features usage.",
      "og:image": "https://assets.playbooks.com/og-images/80f6037a79.png",
      "og:url": "https://playbooks.com/rules/postgresql",
      "og:type": "website",
      "twitter:title": "PostgreSQL Cursor Rules for AI",
      "twitter:description": "This rule explains PostgreSQL database design patterns and advanced features usage.",
      "twitter:image": "https://assets.playbooks.com/og-images/80f6037a79.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "PostgreSQL Cursor Rules for AI",
        "og:description": "This rule explains PostgreSQL database design patterns and advanced features usage.",
        "og:image": "https://assets.playbooks.com/og-images/80f6037a79.png",
        "og:url": "https://playbooks.com/rules/postgresql",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "PostgreSQL Cursor Rules for AI",
        "twitter:description": "This rule explains PostgreSQL database design patterns and advanced features usage.",
        "twitter:image": "https://assets.playbooks.com/og-images/80f6037a79.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    PostgreSQL"
      ],
      "h2": [
        "Related Snippets",
        "What this rule does",
        "Key PostgreSQL guidelines",
        "Using PostgreSQL in Cursor",
        "Usage tips"
      ],
      "h3": [
        "Supabase Edge Functions",
        "Supabase RLS Policy",
        "Postgres Database Functions",
        "Supabase Migrations",
        "General formatting",
        "Naming conventions",
        "Table design",
        "Query formatting",
        "Complex query handling",
        "When to apply this rule",
        "Examples of rule application"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/mysql",
    "timestamp": "2025-06-12T10:11:53.265250",
    "title": "MySQL Cursor Rules for AI",
    "text": "MySQL Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for MySQL This rule explains MySQL database design patterns and query optimization techniques. Back to rules Type Database Stats 743 views 50 copies 45 downloads Cursor (.mdc) Windsurf (.md) mysql.mdc Copy Download --- description: This rule explains MySQL database design patterns and query optimization techniques. globs: ..sql alwaysApply: false ---  MySQL rules - Use appropriate data types to optimize storage and performance (e.g., INT for IDs, VARCHAR with appropriate length) - Create indexes for columns used in WHERE, JOIN, and ORDER BY clauses - Use foreign keys to maintain referential integrity - Use EXPLAIN to analyze and optimize queries - Avoid using SELECT  and only retrieve needed columns - Use prepared statements to prevent SQL injection - Use appropriate character set and collation (e.g., utf8mb4_unicode_ci) - Use transactions for operations that must be atomic mysql.md Copy Download --- trigger: glob description: This rule explains MySQL database design patterns and query optimization techniques. globs: ..sql ---  MySQL rules - Use appropriate data types to optimize storage and performance (e.g., INT for IDs, VARCHAR with appropriate length) - Create indexes for columns used in WHERE, JOIN, and ORDER BY clauses - Use foreign keys to maintain referential integrity - Use EXPLAIN to analyze and optimize queries - Avoid using SELECT  and only retrieve needed columns - Use prepared statements to prevent SQL injection - Use appropriate character set and collation (e.g., utf8mb4_unicode_ci) - Use transactions for operations that must be atomic Add a snippet Suggest changes The MySQL rule in Cursor provides guidance on database design patterns and query optimization techniques for MySQL databases. It helps you follow best practices for efficient database schema design, query performance, and security considerations when working with MySQL. What this rule does This rule provides a set of best practices and recommendations for working with MySQL databases. It covers fundamental aspects of database design, performance optimization, and security considerations that are essential for building robust MySQL-based applications. The rule specifically focuses on: Appropriate data type selection Index optimization Referential integrity Query performance Security best practices Character encoding Transaction management Key MySQL best practices Data type optimization The rule encourages using appropriate data types to optimize storage and performance. For example: Use INT for ID columns Use VARCHAR with appropriate length limitations rather than oversized fields Choose specialized types when applicable (such as DATETIME for timestamps) Using proper data types reduces storage requirements and improves query performance. Index creation Indexes are critical for MySQL performance. The rule recommends creating indexes for columns used in: WHERE clauses (filtering) JOIN conditions ORDER BY operations Without proper indexes, MySQL must scan entire tables, resulting in slow query performance as data volumes grow. Referential integrity The rule emphasizes using foreign keys to maintain referential integrity between related tables. This ensures data consistency by preventing orphaned records and enforcing relationships at the database level. Query optimization Several query optimization techniques are highlighted: Using EXPLAIN to analyze query execution plans Avoiding SELECT  in favor of selecting only needed columns Writing efficient queries that leverage indexes Security considerations The rule recommends using prepared statements to prevent SQL injection attacks, one of the most common security vulnerabilities in database applications. Character encoding Setting appropriate character sets and collations (such as utf8mb4_unicode_ci) ensures proper handling of international characters and special symbols. Transaction management For operations that need to be atomic (either all succeed or all fail), the rule suggests using transactions to maintain data integrity. Using MySQL in Cursor The MySQL rule (mysql.mdc) is designed to provide context to the AI when you're working with MySQL database files. Based on the glob pattern ..sql, this rule is likely set up as an \"Auto Attached\" rule, meaning it will be automatically applied when you open or work with SQL files in your project. When this rule is active, Cursor's AI assistant will understand MySQL best practices and can provide better suggestions, code completions, and answers to your questions specifically tailored to MySQL database development. You can also manually invoke this rule by typing mysql in the chat or Cmd-K prompt if you need MySQL-specific assistance while working on files that don't match the glob pattern. Practical usage tips Analyzing existing queries When optimizing an existing query, use the EXPLAIN statement to identify performance bottlenecks: EXPLAIN SELECT users.name, orders.order_date FROM users JOIN orders ON users.id  orders.user_id WHERE orders.status  'completed' ORDER BY orders.order_date DESC; Creating optimized indexes Create targeted indexes for your specific query patterns: -- Index for filtering by status and sorting by date CREATE INDEX idx_orders_status_date ON orders (status, order_date); -- Index for the join condition CREATE INDEX idx_orders_user_id ON orders (user_id); Using prepared statements Implement prepared statements to prevent SQL injection: -- Using prepared statements in a server-side language PREPARE stmt FROM 'SELECT  FROM users WHERE email  ?'; SET email  'email protected'; EXECUTE stmt USING email; DEALLOCATE PREPARE stmt; By following these MySQL best practices as guided by the rule, you'll develop more efficient, secure, and maintainable database implementations. Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/add/mysql",
      "https://playbooks.com/rules/suggest/mysql"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains MySQL database design patterns and query optimization techniques.",
      "og:title": "MySQL Cursor Rules for AI",
      "og:description": "This rule explains MySQL database design patterns and query optimization techniques.",
      "og:image": "https://assets.playbooks.com/og-images/b71f1df174.png",
      "og:url": "https://playbooks.com/rules/mysql",
      "og:type": "website",
      "twitter:title": "MySQL Cursor Rules for AI",
      "twitter:description": "This rule explains MySQL database design patterns and query optimization techniques.",
      "twitter:image": "https://assets.playbooks.com/og-images/b71f1df174.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "MySQL Cursor Rules for AI",
        "og:description": "This rule explains MySQL database design patterns and query optimization techniques.",
        "og:image": "https://assets.playbooks.com/og-images/b71f1df174.png",
        "og:url": "https://playbooks.com/rules/mysql",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "MySQL Cursor Rules for AI",
        "twitter:description": "This rule explains MySQL database design patterns and query optimization techniques.",
        "twitter:image": "https://assets.playbooks.com/og-images/b71f1df174.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    MySQL"
      ],
      "h2": [
        "What this rule does",
        "Key MySQL best practices",
        "Using MySQL in Cursor",
        "Practical usage tips"
      ],
      "h3": [
        "Data type optimization",
        "Index creation",
        "Referential integrity",
        "Query optimization",
        "Security considerations",
        "Character encoding",
        "Transaction management",
        "Analyzing existing queries",
        "Creating optimized indexes",
        "Using prepared statements"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/create",
    "timestamp": "2025-06-12T10:12:10.459978",
    "title": "Login | Playbooks",
    "text": "Login  Playbooks Log in to playbooks and join the community for free Continue with Google Continue with GitHub Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Login to your Playbooks account",
      "og:title": "Login | Playbooks",
      "og:description": "Login to your Playbooks account",
      "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "og:url": "https://playbooks.com/login",
      "og:type": "website",
      "twitter:title": "Login | Playbooks",
      "twitter:description": "Login to your Playbooks account",
      "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Login | Playbooks",
        "og:description": "Login to your Playbooks account",
        "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "og:url": "https://playbooks.com/login",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Login | Playbooks",
        "twitter:description": "Login to your Playbooks account",
        "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Log in to playbooks and join the community for free"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/add/task-lists",
    "timestamp": "2025-06-12T10:12:11.511156",
    "title": "Login | Playbooks",
    "text": "Login  Playbooks Log in to playbooks and join the community for free Continue with Google Continue with GitHub Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Login to your Playbooks account",
      "og:title": "Login | Playbooks",
      "og:description": "Login to your Playbooks account",
      "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "og:url": "https://playbooks.com/login",
      "og:type": "website",
      "twitter:title": "Login | Playbooks",
      "twitter:description": "Login to your Playbooks account",
      "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Login | Playbooks",
        "og:description": "Login to your Playbooks account",
        "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "og:url": "https://playbooks.com/login",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Login | Playbooks",
        "twitter:description": "Login to your Playbooks account",
        "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Log in to playbooks and join the community for free"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/add/django",
    "timestamp": "2025-06-12T10:12:12.046577",
    "title": "Login | Playbooks",
    "text": "Login  Playbooks Log in to playbooks and join the community for free Continue with Google Continue with GitHub Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Login to your Playbooks account",
      "og:title": "Login | Playbooks",
      "og:description": "Login to your Playbooks account",
      "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "og:url": "https://playbooks.com/login",
      "og:type": "website",
      "twitter:title": "Login | Playbooks",
      "twitter:description": "Login to your Playbooks account",
      "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Login | Playbooks",
        "og:description": "Login to your Playbooks account",
        "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "og:url": "https://playbooks.com/login",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Login | Playbooks",
        "twitter:description": "Login to your Playbooks account",
        "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Log in to playbooks and join the community for free"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/suggest/django",
    "timestamp": "2025-06-12T10:12:12.562993",
    "title": "Login | Playbooks",
    "text": "Login  Playbooks Log in to playbooks and join the community for free Continue with Google Continue with GitHub Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Login to your Playbooks account",
      "og:title": "Login | Playbooks",
      "og:description": "Login to your Playbooks account",
      "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "og:url": "https://playbooks.com/login",
      "og:type": "website",
      "twitter:title": "Login | Playbooks",
      "twitter:description": "Login to your Playbooks account",
      "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Login | Playbooks",
        "og:description": "Login to your Playbooks account",
        "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "og:url": "https://playbooks.com/login",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Login | Playbooks",
        "twitter:description": "Login to your Playbooks account",
        "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Log in to playbooks and join the community for free"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/supabase-rls-policy",
    "timestamp": "2025-06-12T10:12:13.841232",
    "title": "Supabase RLS Policy Cursor Rules for AI",
    "text": "Supabase RLS Policy Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for Supabase RLS Policy This rule provides guidelines for writing Postgres Row Level Security policies. Back to rules Type Database Used with PostgreSQL Stats 180 views 16 copies 8 downloads Author Ian Nuttall Cursor (.mdc) Windsurf (.md) supabase-rls-policy.mdc Copy Download --- description: This rule provides guidelines for writing Postgres Row Level Security policies. globs: .sql alwaysApply: false ---  Supabase RLS Policy rules You're a Supabase Postgres expert in writing row level security policies. Your purpose is to generate a policy with the constraints given by the user. You should first retrieve schema information to write policies for, usually the 'public' schema. The output should use the following instructions: - The generated SQL must be valid SQL. - You can use only CREATE POLICY or ALTER POLICY queries, no other queries are allowed. - Always use double apostrophe in SQL strings (eg. 'Night''s watch') - You can add short explanations to your messages. - The result should be a valid markdown. The SQL code should be wrapped in  (including sql language tag). - Always use \"auth.uid()\" instead of \"current_user\". - SELECT policies should always have USING but not WITH CHECK - INSERT policies should always have WITH CHECK but not USING - UPDATE policies should always have WITH CHECK and most often have USING - DELETE policies should always have USING but not WITH CHECK - Don't use FOR ALL. Instead separate into 4 separate policies for select, insert, update, and delete. - The policy name should be short but detailed text explaining the policy, enclosed in double quotes. - Always put explanations as separate text. Never use inline SQL comments. - If the user asks for something that's not related to SQL policies, explain to the user that you can only help with policies. - Discourage RESTRICTIVE policies and encourage PERMISSIVE policies, and explain why. The output should look like this: sql CREATE POLICY \"My descriptive policy.\" ON books FOR INSERT to authenticated USING ( (select auth.uid())  author_id ) WITH ( true );  Since you are running in a Supabase environment, take note of these Supabase-specific additions below.  Authenticated and unauthenticated roles Supabase maps every request to one of the roles: - anon: an unauthenticated request (the user is not logged in) - authenticated: an authenticated request (the user is logged in) These are actually Postgres Roles(docsguidesdatabasepostgresroles). You can use these roles within your Policies using the TO clause: sql create policy \"Profiles are viewable by everyone\" on profiles for select to authenticated, anon using ( true ); -- OR create policy \"Public profiles are viewable only by authenticated users\" on profiles for select to authenticated using ( true );  Note that for ... must be added after the table but before the roles. to ... must be added after for ...:  Incorrect sql create policy \"Public profiles are viewable only by authenticated users\" on profiles to authenticated for select using ( true );   Correct sql create policy \"Public profiles are viewable only by authenticated users\" on profiles for select to authenticated using ( true );   Multiple operations PostgreSQL policies do not support specifying multiple operations in a single FOR clause. You need to create separate policies for each operation.  Incorrect sql create policy \"Profiles can be created and deleted by any user\" on profiles for insert, delete -- cannot create a policy on multiple operators to authenticated with check ( true ) using ( true );   Correct sql create policy \"Profiles can be created by any user\" on profiles for insert to authenticated with check ( true ); create policy \"Profiles can be deleted by any user\" on profiles for delete to authenticated using ( true );   Helper functions Supabase provides some helper functions that make it easier to write Policies.  auth.uid() Returns the ID of the user making the request.  auth.jwt() Returns the JWT of the user making the request. Anything that you store in the user's raw_app_meta_data column or the raw_user_meta_data column will be accessible using this function. It's important to know the distinction between these two: - raw_user_meta_data - can be updated by the authenticated user using the supabase.auth.update() function. It is not a good place to store authorization data. - raw_app_meta_data - cannot be updated by the user, so it's a good place to store authorization data. The auth.jwt() function is extremely versatile. For example, if you store some team data inside app_metadata, you can use it to determine whether a particular user belongs to a team. For example, if this was an array of IDs: sql create policy \"User is in team\" on my_table to authenticated using ( team_id in (select auth.jwt() - 'app_metadata' - 'teams'));   MFA The auth.jwt() function can be used to check for Multi-Factor Authentication(docsguidesauthauth-mfaenforce-rules-for-mfa-logins). For example, you could restrict a user from updating their profile unless they have at least 2 levels of authentication (Assurance Level 2): sql create policy \"Restrict updates.\" on profiles as restrictive for update to authenticated using ( (select auth.jwt()-'aal')  'aal2' );   RLS performance recommendations Every authorization system has an impact on performance. While row level security is powerful, the performance impact is important to keep in mind. This is especially true for queries that scan every row in a table - like many select operations, including those using limit, offset, and ordering. Based on a series of tests(https:github.comGaryAustin1RLS-Performance), we have a few recommendations for RLS:  Add indexes Make sure you've added indexes(docsguidesdatabasepostgresindexes) on any columns used within the Policies which are not already indexed (or primary keys). For a Policy like this: sql create policy \"Users can access their own records\" on test_table to authenticated using ( (select auth.uid())  user_id );  You can add an index like: sql create index userid on test_table using btree (user_id);   Call functions with select You can use select statement to improve policies that use functions. For example, instead of this: sql create policy \"Users can access their own records\" on test_table to authenticated using ( auth.uid()  user_id );  You can do: sql create policy \"Users can access their own records\" on test_table to authenticated using ( (select auth.uid())  user_id );  This method works well for JWT functions like auth.uid() and auth.jwt() as well as security definer Functions. Wrapping the function causes an initPlan to be run by the Postgres optimizer, which allows it to \"cache\" the results per-statement, rather than calling the function on each row. Caution: You can only use this technique if the results of the query or function do not change based on the row data.  Minimize joins You can often rewrite your Policies to avoid joins between the source and the target table. Instead, try to organize your policy to fetch all the relevant data from the target table into an array or set, then you can use an IN or ANY operation in your filter. For example, this is an example of a slow policy which joins the source test_table to the target team_user: sql create policy \"Users can access records belonging to their teams\" on test_table to authenticated using ( (select auth.uid()) in ( select user_id from team_user where team_user.team_id  team_id -- joins to the source \"test_table.team_id\" ) );  We can rewrite this to avoid this join, and instead select the filter criteria into a set: sql create policy \"Users can access records belonging to their teams\" on test_table to authenticated using ( team_id in ( select team_id from team_user where user_id  (select auth.uid()) -- no join ) );   Specify roles in your policies Always use the Role of inside your policies, specified by the TO operator. For example, instead of this query: sql create policy \"Users can access their own records\" on rls_test using ( auth.uid()  user_id );  Use: sql create policy \"Users can access their own records\" on rls_test to authenticated using ( (select auth.uid())  user_id );  This prevents the policy ( (select auth.uid())  user_id ) from running for any anon users, since the execution stops at the to authenticated step. supabase-rls-policy.md Copy Download --- trigger: glob description: This rule provides guidelines for writing Postgres Row Level Security policies. globs: .sql ---  Supabase RLS Policy rules You're a Supabase Postgres expert in writing row level security policies. Your purpose is to generate a policy with the constraints given by the user. You should first retrieve schema information to write policies for, usually the 'public' schema. The output should use the following instructions: - The generated SQL must be valid SQL. - You can use only CREATE POLICY or ALTER POLICY queries, no other queries are allowed. - Always use double apostrophe in SQL strings (eg. 'Night''s watch') - You can add short explanations to your messages. - The result should be a valid markdown. The SQL code should be wrapped in  (including sql language tag). - Always use \"auth.uid()\" instead of \"current_user\". - SELECT policies should always have USING but not WITH CHECK - INSERT policies should always have WITH CHECK but not USING - UPDATE policies should always have WITH CHECK and most often have USING - DELETE policies should always have USING but not WITH CHECK - Don't use FOR ALL. Instead separate into 4 separate policies for select, insert, update, and delete. - The policy name should be short but detailed text explaining the policy, enclosed in double quotes. - Always put explanations as separate text. Never use inline SQL comments. - If the user asks for something that's not related to SQL policies, explain to the user that you can only help with policies. - Discourage RESTRICTIVE policies and encourage PERMISSIVE policies, and explain why. The output should look like this: sql CREATE POLICY \"My descriptive policy.\" ON books FOR INSERT to authenticated USING ( (select auth.uid())  author_id ) WITH ( true );  Since you are running in a Supabase environment, take note of these Supabase-specific additions below.  Authenticated and unauthenticated roles Supabase maps every request to one of the roles: - anon: an unauthenticated request (the user is not logged in) - authenticated: an authenticated request (the user is logged in) These are actually Postgres Roles(docsguidesdatabasepostgresroles). You can use these roles within your Policies using the TO clause: sql create policy \"Profiles are viewable by everyone\" on profiles for select to authenticated, anon using ( true ); -- OR create policy \"Public profiles are viewable only by authenticated users\" on profiles for select to authenticated using ( true );  Note that for ... must be added after the table but before the roles. to ... must be added after for ...:  Incorrect sql create policy \"Public profiles are viewable only by authenticated users\" on profiles to authenticated for select using ( true );   Correct sql create policy \"Public profiles are viewable only by authenticated users\" on profiles for select to authenticated using ( true );   Multiple operations PostgreSQL policies do not support specifying multiple operations in a single FOR clause. You need to create separate policies for each operation.  Incorrect sql create policy \"Profiles can be created and deleted by any user\" on profiles for insert, delete -- cannot create a policy on multiple operators to authenticated with check ( true ) using ( true );   Correct sql create policy \"Profiles can be created by any user\" on profiles for insert to authenticated with check ( true ); create policy \"Profiles can be deleted by any user\" on profiles for delete to authenticated using ( true );   Helper functions Supabase provides some helper functions that make it easier to write Policies.  auth.uid() Returns the ID of the user making the request.  auth.jwt() Returns the JWT of the user making the request. Anything that you store in the user's raw_app_meta_data column or the raw_user_meta_data column will be accessible using this function. It's important to know the distinction between these two: - raw_user_meta_data - can be updated by the authenticated user using the supabase.auth.update() function. It is not a good place to store authorization data. - raw_app_meta_data - cannot be updated by the user, so it's a good place to store authorization data. The auth.jwt() function is extremely versatile. For example, if you store some team data inside app_metadata, you can use it to determine whether a particular user belongs to a team. For example, if this was an array of IDs: sql create policy \"User is in team\" on my_table to authenticated using ( team_id in (select auth.jwt() - 'app_metadata' - 'teams'));   MFA The auth.jwt() function can be used to check for Multi-Factor Authentication(docsguidesauthauth-mfaenforce-rules-for-mfa-logins). For example, you could restrict a user from updating their profile unless they have at least 2 levels of authentication (Assurance Level 2): sql create policy \"Restrict updates.\" on profiles as restrictive for update to authenticated using ( (select auth.jwt()-'aal')  'aal2' );   RLS performance recommendations Every authorization system has an impact on performance. While row level security is powerful, the performance impact is important to keep in mind. This is especially true for queries that scan every row in a table - like many select operations, including those using limit, offset, and ordering. Based on a series of tests(https:github.comGaryAustin1RLS-Performance), we have a few recommendations for RLS:  Add indexes Make sure you've added indexes(docsguidesdatabasepostgresindexes) on any columns used within the Policies which are not already indexed (or primary keys). For a Policy like this: sql create policy \"Users can access their own records\" on test_table to authenticated using ( (select auth.uid())  user_id );  You can add an index like: sql create index userid on test_table using btree (user_id);   Call functions with select You can use select statement to improve policies that use functions. For example, instead of this: sql create policy \"Users can access their own records\" on test_table to authenticated using ( auth.uid()  user_id );  You can do: sql create policy \"Users can access their own records\" on test_table to authenticated using ( (select auth.uid())  user_id );  This method works well for JWT functions like auth.uid() and auth.jwt() as well as security definer Functions. Wrapping the function causes an initPlan to be run by the Postgres optimizer, which allows it to \"cache\" the results per-statement, rather than calling the function on each row. Caution: You can only use this technique if the results of the query or function do not change based on the row data.  Minimize joins You can often rewrite your Policies to avoid joins between the source and the target table. Instead, try to organize your policy to fetch all the relevant data from the target table into an array or set, then you can use an IN or ANY operation in your filter. For example, this is an example of a slow policy which joins the source test_table to the target team_user: sql create policy \"Users can access records belonging to their teams\" on test_table to authenticated using ( (select auth.uid()) in ( select user_id from team_user where team_user.team_id  team_id -- joins to the source \"test_table.team_id\" ) );  We can rewrite this to avoid this join, and instead select the filter criteria into a set: sql create policy \"Users can access records belonging to their teams\" on test_table to authenticated using ( team_id in ( select team_id from team_user where user_id  (select auth.uid()) -- no join ) );   Specify roles in your policies Always use the Role of inside your policies, specified by the TO operator. For example, instead of this query: sql create policy \"Users can access their own records\" on rls_test using ( auth.uid()  user_id );  Use: sql create policy \"Users can access their own records\" on rls_test to authenticated using ( (select auth.uid())  user_id );  This prevents the policy ( (select auth.uid())  user_id ) from running for any anon users, since the execution stops at the to authenticated step. Suggest changes Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/suggest/supabase-rls-policy"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule provides guidelines for writing Postgres Row Level Security policies.",
      "og:title": "Supabase RLS Policy Cursor Rules for AI",
      "og:description": "This rule provides guidelines for writing Postgres Row Level Security policies.",
      "og:image": "https://assets.playbooks.com/og-images/efdeadb69a.png",
      "og:url": "https://playbooks.com/rules/supabase-rls-policy",
      "og:type": "website",
      "twitter:title": "Supabase RLS Policy Cursor Rules for AI",
      "twitter:description": "This rule provides guidelines for writing Postgres Row Level Security policies.",
      "twitter:image": "https://assets.playbooks.com/og-images/efdeadb69a.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Supabase RLS Policy Cursor Rules for AI",
        "og:description": "This rule provides guidelines for writing Postgres Row Level Security policies.",
        "og:image": "https://assets.playbooks.com/og-images/efdeadb69a.png",
        "og:url": "https://playbooks.com/rules/supabase-rls-policy",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Supabase RLS Policy Cursor Rules for AI",
        "twitter:description": "This rule provides guidelines for writing Postgres Row Level Security policies.",
        "twitter:image": "https://assets.playbooks.com/og-images/efdeadb69a.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    Supabase RLS Policy"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/suggest/postgresql",
    "timestamp": "2025-06-12T10:12:14.379642",
    "title": "Login | Playbooks",
    "text": "Login  Playbooks Log in to playbooks and join the community for free Continue with Google Continue with GitHub Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Login to your Playbooks account",
      "og:title": "Login | Playbooks",
      "og:description": "Login to your Playbooks account",
      "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "og:url": "https://playbooks.com/login",
      "og:type": "website",
      "twitter:title": "Login | Playbooks",
      "twitter:description": "Login to your Playbooks account",
      "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Login | Playbooks",
        "og:description": "Login to your Playbooks account",
        "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "og:url": "https://playbooks.com/login",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Login | Playbooks",
        "twitter:description": "Login to your Playbooks account",
        "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Log in to playbooks and join the community for free"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/laravel-vilt",
    "timestamp": "2025-06-12T10:12:15.733055",
    "title": "Laravel VILT Stack Cursor Rules for AI",
    "text": "Laravel VILT Stack Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for Laravel VILT Stack This rule explains how to build Vue components with Inertia.js in Laravel applications. Back to rules Type Frontend Language(s) PHP Used with Laravel Stats 413 views 21 copies 13 downloads Cursor (.mdc) Windsurf (.md) laravel-vilt.mdc Copy Download --- description: This rule explains how to build Vue components with Inertia.js in Laravel applications. globs: .vue alwaysApply: false ---  Laravel VILT rules - Inertia.js components should be placed in the resourcesjsPages directory - Use Inertia::render() for server-side routing instead of traditional Blade views - Vue components must have a single root element, similar to Livewire components - Use inertia.visit() or   for navigation instead of traditional links - For form handling, use inertia.post(), inertia.put(), etc. instead of traditional form submissions - When using Vue 3, prefer the Composition API with   laravel-vilt.md Copy Download --- trigger: glob description: This rule explains how to build Vue components with Inertia.js in Laravel applications. globs: .vue ---  Laravel VILT rules - Inertia.js components should be placed in the resourcesjsPages directory - Use Inertia::render() for server-side routing instead of traditional Blade views - Vue components must have a single root element, similar to Livewire components - Use inertia.visit() or   for navigation instead of traditional links - For form handling, use inertia.post(), inertia.put(), etc. instead of traditional form submissions - When using Vue 3, prefer the Composition API with   Suggest changes Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/suggest/laravel-vilt"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains how to build Vue components with Inertia.js in Laravel applications.",
      "og:title": "Laravel VILT Stack Cursor Rules for AI",
      "og:description": "This rule explains how to build Vue components with Inertia.js in Laravel applications.",
      "og:image": "https://assets.playbooks.com/og-images/4cb1d0e452.png",
      "og:url": "https://playbooks.com/rules/laravel-vilt",
      "og:type": "website",
      "twitter:title": "Laravel VILT Stack Cursor Rules for AI",
      "twitter:description": "This rule explains how to build Vue components with Inertia.js in Laravel applications.",
      "twitter:image": "https://assets.playbooks.com/og-images/4cb1d0e452.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Laravel VILT Stack Cursor Rules for AI",
        "og:description": "This rule explains how to build Vue components with Inertia.js in Laravel applications.",
        "og:image": "https://assets.playbooks.com/og-images/4cb1d0e452.png",
        "og:url": "https://playbooks.com/rules/laravel-vilt",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Laravel VILT Stack Cursor Rules for AI",
        "twitter:description": "This rule explains how to build Vue components with Inertia.js in Laravel applications.",
        "twitter:image": "https://assets.playbooks.com/og-images/4cb1d0e452.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    Laravel VILT Stack"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/suggest/mysql",
    "timestamp": "2025-06-12T10:12:16.203665",
    "title": "Login | Playbooks",
    "text": "Login  Playbooks Log in to playbooks and join the community for free Continue with Google Continue with GitHub Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Login to your Playbooks account",
      "og:title": "Login | Playbooks",
      "og:description": "Login to your Playbooks account",
      "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "og:url": "https://playbooks.com/login",
      "og:type": "website",
      "twitter:title": "Login | Playbooks",
      "twitter:description": "Login to your Playbooks account",
      "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Login | Playbooks",
        "og:description": "Login to your Playbooks account",
        "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "og:url": "https://playbooks.com/login",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Login | Playbooks",
        "twitter:description": "Login to your Playbooks account",
        "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Log in to playbooks and join the community for free"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/add/react-native",
    "timestamp": "2025-06-12T10:12:16.654084",
    "title": "Login | Playbooks",
    "text": "Login  Playbooks Log in to playbooks and join the community for free Continue with Google Continue with GitHub Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Login to your Playbooks account",
      "og:title": "Login | Playbooks",
      "og:description": "Login to your Playbooks account",
      "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "og:url": "https://playbooks.com/login",
      "og:type": "website",
      "twitter:title": "Login | Playbooks",
      "twitter:description": "Login to your Playbooks account",
      "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Login | Playbooks",
        "og:description": "Login to your Playbooks account",
        "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "og:url": "https://playbooks.com/login",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Login | Playbooks",
        "twitter:description": "Login to your Playbooks account",
        "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Log in to playbooks and join the community for free"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/flask",
    "timestamp": "2025-06-12T10:11:39.985878",
    "title": "Flask Cursor Rules for AI",
    "text": "Flask Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for Flask This rule explains Flask conventions and best practices for lightweight Python web applications. Back to rules Type Backend Language(s) Python Compatible with Next.js React Vue.js Jinja SvelteKit Stats 1,040 views 104 copies 45 downloads Cursor (.mdc) Windsurf (.md) flask.mdc Copy Download --- description: This rule explains Flask conventions and best practices for lightweight Python web applications. globs: .py alwaysApply: false ---  Flask rules - Use Blueprints to organize routes by feature or resource - Use Flask-SQLAlchemy for database models and ORM - Use application factories for flexible application initialization - Use Flask extensions for common functionality (Flask-Login, Flask-WTF, etc.) - Store configuration in environment variables - Use Flask-Migrate for database migrations - Implement proper error handling with error handlers - Use Flask-RESTful or similar for building APIs flask.md Copy Download --- trigger: glob description: This rule explains Flask conventions and best practices for lightweight Python web applications. globs: .py ---  Flask rules - Use Blueprints to organize routes by feature or resource - Use Flask-SQLAlchemy for database models and ORM - Use application factories for flexible application initialization - Use Flask extensions for common functionality (Flask-Login, Flask-WTF, etc.) - Store configuration in environment variables - Use Flask-Migrate for database migrations - Implement proper error handling with error handlers - Use Flask-RESTful or similar for building APIs Add a snippet Suggest changes This rule provides guidance on Flask conventions and best practices for building lightweight Python web applications. It offers recommendations for structuring your Flask projects, utilizing extensions, and implementing key functionality to ensure your web applications follow industry standards. What this rule does The Flask rule serves as a reference guide for developers working with Flask, a popular Python web framework. It outlines recommended practices for organizing your Flask applications, managing databases, handling authentication, and building APIs. By following these conventions, you can create more maintainable, scalable, and robust web applications. Key Flask best practices Blueprint organization Blueprints are a powerful feature in Flask that allow you to organize related routes and functionality into separate modules. The rule recommends using blueprints to group routes by feature or resource, which improves code organization and maintainability. For example, you might structure your application with blueprints like this:  authroutes.py from flask import Blueprint auth_bp  Blueprint('auth', __name__) auth_bp.route('login') def login(): return \"Login page\"  In your app factory def create_app(): app  Flask(__name__) from myapp.auth.routes import auth_bp app.register_blueprint(auth_bp, url_prefix'auth') return app Database management The rule emphasizes using Flask-SQLAlchemy for database operations and Flask-Migrate for managing database schema changes. This combination provides a powerful ORM and straightforward migration capabilities: from flask_sqlalchemy import SQLAlchemy from flask_migrate import Migrate db  SQLAlchemy() migrate  Migrate() def create_app(): app  Flask(__name__) app.config'SQLALCHEMY_DATABASE_URI'  os.environ.get('DATABASE_URL') db.init_app(app) migrate.init_app(app, db) return app Application factories Using application factories provides flexibility in initializing your Flask application, which is particularly useful for testing and different deployment environments: def create_app(config_classConfig): app  Flask(__name__) app.config.from_object(config_class)  Initialize extensions db.init_app(app) login.init_app(app)  Register blueprints from app.main import bp as main_bp app.register_blueprint(main_bp) return app Error handling Implementing proper error handlers helps provide better user experience when things go wrong: app.errorhandler(404) def not_found_error(error): return render_template('404.html'), 404 app.errorhandler(500) def internal_error(error): db.session.rollback() return render_template('500.html'), 500 Using Flask in Cursor The Flask rule (flask.mdc) is automatically applied when you're working with Python files in your project, as indicated by its glob pattern of .py. This means that whenever you're editing a Python file and interact with Cursor's AI features (like CmdK or the AI chat), the assistant will have this Flask knowledge available. You'll benefit from this rule when: Asking for help structuring a new Flask application Requesting guidance on implementing Flask-specific features Seeking advice on Flask best practices Getting code suggestions that align with Flask conventions If you need to manually invoke the rule in a non-Python file, you can type flask in the chat or CmdK dialog to explicitly bring this context to the AI assistant. Practical tips for Flask development Configuration management As recommended by the rule, store your configuration in environment variables rather than hardcoding them:  config.py import os class Config: SECRET_KEY  os.environ.get('SECRET_KEY') or 'dev-key' SQLALCHEMY_DATABASE_URI  os.environ.get('DATABASE_URL') or 'sqlite:app.db' MAIL_SERVER  os.environ.get('MAIL_SERVER')  other config variables API development For RESTful API development, use Flask-RESTful or similar extensions as suggested by the rule: from flask_restful import Resource, Api api  Api(app) class UserResource(Resource): def get(self, user_id): user  User.query.get_or_404(user_id) return user.to_dict() def put(self, user_id):  Update user pass api.add_resource(UserResource, 'apiusers ') By following these conventions and best practices outlined in the Flask rule, you'll create more maintainable and robust Flask applications while getting the most out of Cursor's AI assistance for your Flask development work. Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/jinja",
      "https://playbooks.com/rules/add/flask",
      "https://playbooks.com/rules/suggest/flask",
      "https://playbooks.com/rules/nextjs",
      "https://playbooks.com/rules/sveltekit",
      "https://playbooks.com/rules/vuejs"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains Flask conventions and best practices for lightweight Python web applications.",
      "og:title": "Flask Cursor Rules for AI",
      "og:description": "This rule explains Flask conventions and best practices for lightweight Python web applications.",
      "og:image": "https://assets.playbooks.com/og-images/6746459ce9.png",
      "og:url": "https://playbooks.com/rules/flask",
      "og:type": "website",
      "twitter:title": "Flask Cursor Rules for AI",
      "twitter:description": "This rule explains Flask conventions and best practices for lightweight Python web applications.",
      "twitter:image": "https://assets.playbooks.com/og-images/6746459ce9.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Flask Cursor Rules for AI",
        "og:description": "This rule explains Flask conventions and best practices for lightweight Python web applications.",
        "og:image": "https://assets.playbooks.com/og-images/6746459ce9.png",
        "og:url": "https://playbooks.com/rules/flask",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Flask Cursor Rules for AI",
        "twitter:description": "This rule explains Flask conventions and best practices for lightweight Python web applications.",
        "twitter:image": "https://assets.playbooks.com/og-images/6746459ce9.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    Flask"
      ],
      "h2": [
        "What this rule does",
        "Key Flask best practices",
        "Using Flask in Cursor",
        "Practical tips for Flask development"
      ],
      "h3": [
        "Blueprint organization",
        "Database management",
        "Application factories",
        "Error handling",
        "Configuration management",
        "API development"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/ruby-on-rails",
    "timestamp": "2025-06-12T10:11:41.915261",
    "title": "Ruby on Rails Cursor Rules for AI",
    "text": "Ruby on Rails Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for Ruby on Rails This rule explains Ruby on Rails conventions and best practices for backend development. Back to rules Type Backend Language(s) Ruby Compatible with Next.js React Vue.js ERB Hotwire SvelteKit Stats 783 views 60 copies 19 downloads Cursor (.mdc) Windsurf (.md) ruby-on-rails.mdc Copy Download --- description: This rule explains Ruby on Rails conventions and best practices for backend development. globs: .rb alwaysApply: false ---  Ruby on Rails rules - Use Rails generators to create models, controllers, and migrations. - Follow Rails naming conventions (singular for models, plural for controllers). - Use ActiveRecord methods instead of raw SQL queries when possible. - Avoid N1 queries by using eager loading with includes, preload, or eager_load: ruby  Good pattern users  User.includes(:posts) users.each  user puts user.posts.count   - Use strong parameters in controllers for mass assignment protection: ruby def user_params params.require(:user).permit(:name, :email, :password) end  - Use scopes for common query patterns and concerns to share code between models. - Use service objects for complex business logic that doesn't belong in models or controllers. ruby-on-rails.md Copy Download --- trigger: glob description: This rule explains Ruby on Rails conventions and best practices for backend development. globs: .rb ---  Ruby on Rails rules - Use Rails generators to create models, controllers, and migrations. - Follow Rails naming conventions (singular for models, plural for controllers). - Use ActiveRecord methods instead of raw SQL queries when possible. - Avoid N1 queries by using eager loading with includes, preload, or eager_load: ruby  Good pattern users  User.includes(:posts) users.each  user puts user.posts.count   - Use strong parameters in controllers for mass assignment protection: ruby def user_params params.require(:user).permit(:name, :email, :password) end  - Use scopes for common query patterns and concerns to share code between models. - Use service objects for complex business logic that doesn't belong in models or controllers. Add a snippet Suggest changes Related Snippets ERB This rule explains ERB template syntax and best practices for Ruby applications. Hotwire This rule explains Hotwire (Turbo and Stimulus) patterns for modern Rails applications. This rule provides guidance for Ruby on Rails development, helping you adhere to conventions and best practices while coding in the Rails framework. It's designed to assist with creating maintainable, efficient backend code that follows standard Rails patterns. What this rule does The Ruby on Rails rule acts as a specialized guide for backend development with the Rails framework. It encapsulates key conventions and best practices that help maintain code quality and consistency in Rails projects. The rule focuses on several core aspects of Rails development: Rails conventions The rule emphasizes following Rails' established naming conventions, such as using singular names for models and plural names for controllers. It also recommends utilizing Rails generators for creating models, controllers, and migrations - leveraging Rails' built-in tooling for consistent code generation. Database interaction best practices To ensure efficient database interactions, the rule provides guidance on: Using ActiveRecord methods instead of raw SQL when possible Avoiding performance-killing N1 queries through eager loading Implementing proper security with strong parameters For example, the rule recommends this pattern for avoiding N1 queries:  Good pattern users  User.includes(:posts) users.each  user puts user.posts.count  Code organization strategies The rule encourages sound code organization through: Using scopes for common query patterns Implementing concerns to share code between models Creating service objects for complex business logic that doesn't belong in models or controllers Using Ruby on Rails in Cursor The Ruby on Rails rule is configured in the file ruby-on-rails.mdc within your .cursorrules directory. Based on the glob pattern .rb, this rule is automatically activated whenever you're working with Ruby files in your project. This means when you open any .rb file in your Rails project, Cursor will automatically apply this context to the AI, making it aware of Rails conventions and best practices. The AI will then provide more Rails-aligned suggestions, code completions, and responses to your queries. You can also manually invoke this rule by typing ruby-on-rails in Cmd-K or chat if you need Rails-specific guidance while working in non-Ruby files (like JavaScript or HTML templates that interact with your Rails backend). Usage tips When to rely on this rule This rule is most valuable when: You're new to Rails development and need guidance on conventions You're working on optimizing database queries You're structuring controller actions and need reminders about strong parameters You're deciding where to place complex business logic Complementary practices While using this rule, consider these complementary practices: Run rails routes regularly to keep track of your application's routing structure Use the Rails console (rails c) to test ActiveRecord queries before implementing them Implement comprehensive tests for your service objects and complex model methods Consider using Rubocop with Rails-specific extensions to further enforce style conventions By leveraging this rule consistently, you'll develop Rails applications that are more maintainable, perform better, and align with community standards. Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/hotwire",
      "https://playbooks.com/rules/add/ruby-on-rails",
      "https://playbooks.com/rules/suggest/ruby-on-rails",
      "https://playbooks.com/rules/erb",
      "https://playbooks.com/rules/nextjs",
      "https://playbooks.com/rules/sveltekit",
      "https://playbooks.com/rules/vuejs"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains Ruby on Rails conventions and best practices for backend development.",
      "og:title": "Ruby on Rails Cursor Rules for AI",
      "og:description": "This rule explains Ruby on Rails conventions and best practices for backend development.",
      "og:image": "https://assets.playbooks.com/og-images/0a16573436.png",
      "og:url": "https://playbooks.com/rules/ruby-on-rails",
      "og:type": "website",
      "twitter:title": "Ruby on Rails Cursor Rules for AI",
      "twitter:description": "This rule explains Ruby on Rails conventions and best practices for backend development.",
      "twitter:image": "https://assets.playbooks.com/og-images/0a16573436.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Ruby on Rails Cursor Rules for AI",
        "og:description": "This rule explains Ruby on Rails conventions and best practices for backend development.",
        "og:image": "https://assets.playbooks.com/og-images/0a16573436.png",
        "og:url": "https://playbooks.com/rules/ruby-on-rails",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Ruby on Rails Cursor Rules for AI",
        "twitter:description": "This rule explains Ruby on Rails conventions and best practices for backend development.",
        "twitter:image": "https://assets.playbooks.com/og-images/0a16573436.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    Ruby on Rails"
      ],
      "h2": [
        "Related Snippets",
        "What this rule does",
        "Using Ruby on Rails in Cursor",
        "Usage tips"
      ],
      "h3": [
        "ERB",
        "Hotwire",
        "Rails conventions",
        "Database interaction best practices",
        "Code organization strategies",
        "When to rely on this rule",
        "Complementary practices"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/nextjs",
    "timestamp": "2025-06-12T10:11:44.036546",
    "title": "Next.js Cursor Rules for AI",
    "text": "Next.js Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for Next.js This rule explains Next.js conventions and best practices for fullstack development. Back to rules Type Fullstack Language(s) JavaScript TypeScript Tags Framework Stats 6,308 views 917 copies 218 downloads Cursor (.mdc) Windsurf (.md) nextjs.mdc Copy Download --- description: This rule explains Next.js conventions and best practices for fullstack development. globs: .js,.jsx,.ts,.tsx alwaysApply: false ---  Next.js rules - Use the App Router structure with page.tsx files in route directories. - Client components must be explicitly marked with 'use client' at the top of the file. - Use kebab-case for directory names (e.g., componentsauth-form) and PascalCase for component files. - Prefer named exports over default exports, i.e. export function Button()   ...   instead of export default function Button()   ...  . - Minimize 'use client' directives: - Keep most components as React Server Components (RSC) - Only use client components when you need interactivity and wrap in Suspense with fallback UI - Create small client component wrappers around interactive elements - Avoid unnecessary useState and useEffect when possible: - Use server components for data fetching - Use React Server Actions for form handling - Use URL search params for shareable state - Use nuqs for URL search param state management nextjs.md Copy Download --- trigger: glob description: This rule explains Next.js conventions and best practices for fullstack development. globs: .js,.jsx,.ts,.tsx ---  Next.js rules - Use the App Router structure with page.tsx files in route directories. - Client components must be explicitly marked with 'use client' at the top of the file. - Use kebab-case for directory names (e.g., componentsauth-form) and PascalCase for component files. - Prefer named exports over default exports, i.e. export function Button()   ...   instead of export default function Button()   ...  . - Minimize 'use client' directives: - Keep most components as React Server Components (RSC) - Only use client components when you need interactivity and wrap in Suspense with fallback UI - Create small client component wrappers around interactive elements - Avoid unnecessary useState and useEffect when possible: - Use server components for data fetching - Use React Server Actions for form handling - Use URL search params for shareable state - Use nuqs for URL search param state management Add a snippet Suggest changes This rule provides guidance for Next.js development within Cursor, focusing on best practices for the App Router structure, component organization, and efficient state management techniques. It helps ensure your Next.js projects follow modern conventions and performance standards. What this rule does The Next.js rule in Cursor serves as a comprehensive guide for fullstack development using Next.js, particularly with the newer App Router architecture. It establishes conventions for: File structure and naming conventions Proper usage of Server and Client Components Export patterns and component organization State management optimization Performance best practices These guidelines help maintain consistency across your Next.js projects while promoting patterns that enhance performance and developer experience. Key Next.js conventions App Router structure The rule emphasizes using the App Router structure, which uses directory-based routing with page.tsx files within route directories. This approach, introduced in Next.js 13, replaces the older Pages Router system with a more intuitive and flexible routing mechanism. Component organization Several important component practices are recommended: Use kebab-case for directory names (e.g., componentsauth-form) Use PascalCase for component files Prefer named exports over default exports:  Recommended export function Button()   ...    Not recommended export default function Button()   ...   Client vs. Server Components The rule provides guidance on the effective use of React Server Components (RSC) and Client Components: Server Components are the default in Next.js App Router Only mark components with 'use client' when they require client-side interactivity Minimize the use of client components to improve performance Create small client component wrappers around interactive elements Wrap client components in Suspense with appropriate fallback UI State management The rule recommends optimizing state management by: Using server components for data fetching rather than client-side fetching Leveraging React Server Actions for form handling Using URL search parameters for shareable state Utilizing the nuqs library for URL search parameter state management Using Next.js in Cursor The Next.js rule (nextjs.mdc) is configured to automatically activate when you're working with JavaScript or TypeScript files. The glob pattern .js,.jsx,.ts,.tsx ensures that the AI gets this context whenever you're editing relevant files. When active, this rule guides Cursor's AI to make recommendations and generate code that follows Next.js best practices. For example: When creating new components, the AI will suggest named exports rather than default exports When implementing interactive features, it will recommend patterns that minimize client components When organizing your project, it will follow the proper directory structure conventions You can also manually invoke this rule by typing nextjs in Cursor's Cmd-K interface or chat if you need explicit Next.js guidance for a specific task. Usage tips Minimizing client components One of the key performance optimizations in modern Next.js is minimizing the use of client components. Consider this pattern for interactive elements:  ButtonWrapper.tsx - Small client component 'use client' import  useState  from 'react' export function ButtonWrapper( children )  const count, setCount  useState(0) return ( setCount(count  1) children count )   Page.tsx - Server component that uses the client component import  ButtonWrapper  from '.ButtonWrapper' export default function Page()   This component remains a server component return ( My Page Click me )  Using URL state effectively For state that needs to be shareable or persisted between page loads, the rule recommends using URL search parameters with the nuqs library: 'use client' import  useQueryState  from 'nuqs' export function FilterComponent()   This will manage the 'category' state in the URL const category, setCategory  useQueryState('category') return ( setCategory(e.target.value)  All Electronics Clothing )  Following these practices will help you build performant, maintainable Next.js applications that leverage the full capabilities of the framework. Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/add/nextjs",
      "https://playbooks.com/rules/suggest/nextjs"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains Next.js conventions and best practices for fullstack development.",
      "og:title": "Next.js Cursor Rules for AI",
      "og:description": "This rule explains Next.js conventions and best practices for fullstack development.",
      "og:image": "https://assets.playbooks.com/og-images/50aa3f94ad.png",
      "og:url": "https://playbooks.com/rules/nextjs",
      "og:type": "website",
      "twitter:title": "Next.js Cursor Rules for AI",
      "twitter:description": "This rule explains Next.js conventions and best practices for fullstack development.",
      "twitter:image": "https://assets.playbooks.com/og-images/50aa3f94ad.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Next.js Cursor Rules for AI",
        "og:description": "This rule explains Next.js conventions and best practices for fullstack development.",
        "og:image": "https://assets.playbooks.com/og-images/50aa3f94ad.png",
        "og:url": "https://playbooks.com/rules/nextjs",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Next.js Cursor Rules for AI",
        "twitter:description": "This rule explains Next.js conventions and best practices for fullstack development.",
        "twitter:image": "https://assets.playbooks.com/og-images/50aa3f94ad.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    Next.js"
      ],
      "h2": [
        "What this rule does",
        "Key Next.js conventions",
        "Using Next.js in Cursor",
        "Usage tips"
      ],
      "h3": [
        "App Router structure",
        "Component organization",
        "Client vs. Server Components",
        "State management",
        "Minimizing client components",
        "Using URL state effectively"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/task-lists",
    "timestamp": "2025-06-12T10:11:45.019101",
    "title": "Cursor rules for creating task lists",
    "text": "Cursor rules for creating task lists playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor rules for creating task lists This rule explains how to create and manage task lists to track project progress. Back to rules Type Integration Stats 5,974 views 1,006 copies 198 downloads Author Elie Steinbock Cursor (.mdc) Windsurf (.md) task-lists.mdc Copy Download --- description: This rule explains how to create and manage task lists to track project progress. globs:  alwaysApply: false ---  Task List Management Guidelines for creating and managing task lists in Markdown files to track project progress  Task List Creation 1. Create task lists in a markdown file (in the project root): - Use TASKS.md or a descriptive name relevant to the feature (e.g., ASSISTANT_CHAT.md) - Include a clear title and description of the feature being implemented 2. Structure the file with these sections: markdown  Feature Name Implementation Brief description of the feature and its purpose.  Completed Tasks - x Task 1 that has been completed - x Task 2 that has been completed  In Progress Tasks -   Task 3 currently being worked on -   Task 4 to be completed soon  Future Tasks -   Task 5 planned for future implementation -   Task 6 planned for future implementation  Implementation Plan Detailed description of how the feature will be implemented.  Relevant Files - pathtofile1.ts - Description of purpose - pathtofile2.ts - Description of purpose   Task List Maintenance 1. Update the task list as you progress: - Mark tasks as completed by changing   to x - Add new tasks as they are identified - Move tasks between sections as appropriate 2. Keep \"Relevant Files\" section updated with: - File paths that have been created or modified - Brief descriptions of each file's purpose - Status indicators (e.g., ) for completed components 3. Add implementation details: - Architecture decisions - Data flow descriptions - Technical components needed - Environment configuration  AI Instructions When working with task lists, the AI should: 1. Regularly update the task list file after implementing significant components 2. Mark completed tasks with x when finished 3. Add new tasks discovered during implementation 4. Maintain the \"Relevant Files\" section with accurate file paths and descriptions 5. Document implementation details, especially for complex features 6. When implementing tasks one by one, first check which task to implement next 7. After implementing a task, update the file to reflect progress  Example Task Update When updating a task from \"In Progress\" to \"Completed\": markdown  In Progress Tasks -   Implement database schema -   Create API endpoints for data access  Completed Tasks - x Set up project structure - x Configure environment variables  Should become: markdown  In Progress Tasks -   Create API endpoints for data access  Completed Tasks - x Set up project structure - x Configure environment variables - x Implement database schema  task-lists.md Copy Download --- trigger: model_decision description: This rule explains how to create and manage task lists to track project progress. ---  Task List Management Guidelines for creating and managing task lists in Markdown files to track project progress  Task List Creation 1. Create task lists in a markdown file (in the project root): - Use TASKS.md or a descriptive name relevant to the feature (e.g., ASSISTANT_CHAT.md) - Include a clear title and description of the feature being implemented 2. Structure the file with these sections: markdown  Feature Name Implementation Brief description of the feature and its purpose.  Completed Tasks - x Task 1 that has been completed - x Task 2 that has been completed  In Progress Tasks -   Task 3 currently being worked on -   Task 4 to be completed soon  Future Tasks -   Task 5 planned for future implementation -   Task 6 planned for future implementation  Implementation Plan Detailed description of how the feature will be implemented.  Relevant Files - pathtofile1.ts - Description of purpose - pathtofile2.ts - Description of purpose   Task List Maintenance 1. Update the task list as you progress: - Mark tasks as completed by changing   to x - Add new tasks as they are identified - Move tasks between sections as appropriate 2. Keep \"Relevant Files\" section updated with: - File paths that have been created or modified - Brief descriptions of each file's purpose - Status indicators (e.g., ) for completed components 3. Add implementation details: - Architecture decisions - Data flow descriptions - Technical components needed - Environment configuration  AI Instructions When working with task lists, the AI should: 1. Regularly update the task list file after implementing significant components 2. Mark completed tasks with x when finished 3. Add new tasks discovered during implementation 4. Maintain the \"Relevant Files\" section with accurate file paths and descriptions 5. Document implementation details, especially for complex features 6. When implementing tasks one by one, first check which task to implement next 7. After implementing a task, update the file to reflect progress  Example Task Update When updating a task from \"In Progress\" to \"Completed\": markdown  In Progress Tasks -   Implement database schema -   Create API endpoints for data access  Completed Tasks - x Set up project structure - x Configure environment variables  Should become: markdown  In Progress Tasks -   Create API endpoints for data access  Completed Tasks - x Set up project structure - x Configure environment variables - x Implement database schema  Add a snippet Suggest changes Task lists are a powerful way to track project progress within your development workflow. This rule provides a structured approach to creating and maintaining task lists in Markdown files, helping you organize completed work, in-progress items, and future development plans. What this rule does The Task List rule establishes a systematic approach to project management through Markdown-based task lists. It defines a clear structure for tracking project progress, including sections for completed tasks, in-progress work, and planned future tasks. The rule also provides guidance on maintaining task lists as your project evolves, ensuring your documentation stays current with development progress. Creating effective task lists Following the structure defined in this rule, your task lists should include: Basic structure Task lists should be created in dedicated Markdown files, typically named TASKS.md or with descriptive names related to specific features (e.g., ASSISTANT_CHAT.md). Each task list should begin with a title and description of the feature being implemented. The recommended structure includes these primary sections: Completed Tasks: Items that have been fully implemented In Progress Tasks: Work currently being done Future Tasks: Planned items for future development Implementation Plan: Detailed explanation of the feature implementation Relevant Files: List of key files with descriptions Task formatting Tasks use standard Markdown checkbox syntax:   Incomplete task x Completed task As you make progress, you'll move tasks between sections and update their status accordingly. Maintaining your task lists Effective task list management involves: Regularly updating task status by changing   to x as items are completed Moving tasks between sections as their status changes Adding new tasks as they're identified during development Keeping the \"Relevant Files\" section updated with accurate file paths and descriptions Documenting implementation details, architectural decisions, and data flow Using task list in Cursor The Task List rule is defined in the file task-lists.mdc in your project's .cursorrules directory. This rule appears to be configured with a glob pattern of , which means it can be automatically attached when working with any file in your project. To leverage this rule: Access the rule by typing task-lists in the AI chat or command palette (Cmd-K) The AI will then have context about how to help you manage and update your task lists You can ask the AI to help create a new task list, update existing tasks, or organize your project tracking This rule is particularly valuable when you're working on complex features and need to maintain clear visibility of progress across multiple components or when collaborating with team members who need to understand the project status. Task list best practices To get the most value from your task lists: Regular updates Task lists should be living documents. Update them after implementing significant components or when identifying new requirements. This creates a natural progress log for your project. Right level of detail Balance between too much detail (which becomes tedious to maintain) and too little (which doesn't provide enough guidance). Focus on meaningful implementation steps rather than minute code changes. Use for AI collaboration When working with Cursor's AI, refer to your task list to provide context about what's next. The AI can help implement the specific task you're focused on while keeping the bigger picture in mind. Example workflow Here's how a typical task list update might look: Check your task list to identify the next in-progress item Implement that feature or component Update the task list by marking the item as complete and moving it to the \"Completed Tasks\" section Add any new tasks discovered during implementation Update the \"Relevant Files\" section with any new or modified files This systematic approach ensures your project documentation always reflects the current state of development. Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/add/task-lists",
      "https://playbooks.com/rules/suggest/task-lists"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains how to create and manage task lists to track project progress.",
      "og:title": "Cursor rules for creating task lists",
      "og:description": "This rule explains how to create and manage task lists to track project progress.",
      "og:image": "https://assets.playbooks.com/og-images/e713b63966.png",
      "og:url": "https://playbooks.com/rules/task-lists",
      "og:type": "website",
      "twitter:title": "Cursor rules for creating task lists",
      "twitter:description": "This rule explains how to create and manage task lists to track project progress.",
      "twitter:image": "https://assets.playbooks.com/og-images/e713b63966.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Cursor rules for creating task lists",
        "og:description": "This rule explains how to create and manage task lists to track project progress.",
        "og:image": "https://assets.playbooks.com/og-images/e713b63966.png",
        "og:url": "https://playbooks.com/rules/task-lists",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Cursor rules for creating task lists",
        "twitter:description": "This rule explains how to create and manage task lists to track project progress.",
        "twitter:image": "https://assets.playbooks.com/og-images/e713b63966.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor rules for creating task lists"
      ],
      "h2": [
        "What this rule does",
        "Creating effective task lists",
        "Maintaining your task lists",
        "Using task list in Cursor",
        "Task list best practices"
      ],
      "h3": [
        "Basic structure",
        "Task formatting",
        "Regular updates",
        "Right level of detail",
        "Use for AI collaboration",
        "Example workflow"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/django",
    "timestamp": "2025-06-12T10:11:46.403777",
    "title": "Django Cursor Rules for AI",
    "text": "Django Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for Django This rule explains Django conventions and best practices for backend development. Back to rules Type Backend Language(s) Python Compatible with Next.js React Vue.js Django Template Language SvelteKit Stats 755 views 54 copies 28 downloads Cursor (.mdc) Windsurf (.md) django.mdc Copy Download --- description: This rule explains Django conventions and best practices for backend development. globs: .py alwaysApply: false ---  Django rules - Use python manage.py startapp to create new apps within your project - Keep models in models.py and register them in admin.py for admin interface - Use Django's ORM instead of raw SQL queries - Avoid N1 queries with select_related and prefetch_related: python  Good pattern users  User.objects.select_related('profile') posts  Post.objects.prefetch_related('tags')  - Use Django forms for validation: python class UserForm(forms.ModelForm): class Meta: model  User fields  'username', 'email'  - Create custom model managers for common queries: python class ActiveUserManager(models.Manager): def get_queryset(self): return super().get_queryset().filter(is_activeTrue)  - Use Django's built-in authentication system - Store settings in environment variables and access via settings.py django.md Copy Download --- trigger: glob description: This rule explains Django conventions and best practices for backend development. globs: .py ---  Django rules - Use python manage.py startapp to create new apps within your project - Keep models in models.py and register them in admin.py for admin interface - Use Django's ORM instead of raw SQL queries - Avoid N1 queries with select_related and prefetch_related: python  Good pattern users  User.objects.select_related('profile') posts  Post.objects.prefetch_related('tags')  - Use Django forms for validation: python class UserForm(forms.ModelForm): class Meta: model  User fields  'username', 'email'  - Create custom model managers for common queries: python class ActiveUserManager(models.Manager): def get_queryset(self): return super().get_queryset().filter(is_activeTrue)  - Use Django's built-in authentication system - Store settings in environment variables and access via settings.py Add a snippet Suggest changes Related Snippets Django Template Language This rule explains Django Template Language syntax and best practices. This rule helps you follow Django best practices and conventions when developing backend applications. It provides guidance on structuring your Django projects, using the ORM effectively, and implementing common Django patterns to maintain clean, efficient code. What this rule does The Django rule serves as a reference guide for Django development within Cursor. It encapsulates common Django conventions and best practices to help you write more efficient and maintainable code. The rule covers several important aspects of Django development: Project organization and app creation Model definition and admin registration Database query optimization Form handling and validation Custom model managers Authentication and settings management Key Django practices Project structure and organization The rule emphasizes using Django's built-in commands for creating new apps within your project structure. This ensures your project follows Django's conventional layout, making it easier for other developers to understand and navigate your codebase. Database efficiency One of the most valuable aspects of this rule is its guidance on database optimization. It recommends: Using Django's ORM instead of writing raw SQL Avoiding N1 query problems with select_related and prefetch_related For example, instead of fetching related objects in separate queries:  Fetches all users, then makes a separate query for each profile users  User.objects.all() for user in users: profile  user.profile  Additional query for each user The rule recommends this optimized approach:  Fetches users and their profiles in a single query users  User.objects.select_related('profile') Forms and validation The rule encourages using Django's form system for data validation, which helps maintain data integrity while reducing the amount of code you need to write: class UserForm(forms.ModelForm): class Meta: model  User fields  'username', 'email' Custom model managers For frequently used queries, the rule suggests creating custom model managers: class ActiveUserManager(models.Manager): def get_queryset(self): return super().get_queryset().filter(is_activeTrue) Using Django in Cursor The Django rule (django.mdc) is designed to be automatically applied when working with Python files in your Django project. This happens through the glob pattern .py, which means the rule will be activated whenever you're editing any Python file in your project. To use this rule: Ensure the rule file (django.mdc) is placed in your project's .cursorrules directory Open any Python file in your Django project The rule will automatically provide context to Cursor's AI when you're working on these files You can also manually invoke the rule by typing django in the Cmd-K prompt or in chat, which is useful when you want Django-specific assistance regardless of the current file type. Benefits of using this rule By following the practices in this rule, you'll: Write more maintainable Django code Avoid common performance pitfalls Structure your project according to Django conventions Leverage Django's built-in features effectively This rule is particularly helpful for teams working on Django projects, as it promotes consistency and best practices across the codebase. Tips for Django development in Cursor When asking Cursor's AI for help with Django-related tasks, reference this rule for more accurate, convention-following responses Use this rule as a quick reference when you forget specific Django patterns For large Django projects, consider expanding this rule with project-specific conventions Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/add/django",
      "https://playbooks.com/rules/vuejs",
      "https://playbooks.com/rules/django-dtl",
      "https://playbooks.com/rules/suggest/django"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains Django conventions and best practices for backend development.",
      "og:title": "Django Cursor Rules for AI",
      "og:description": "This rule explains Django conventions and best practices for backend development.",
      "og:image": "https://assets.playbooks.com/og-images/a01e87f748.png",
      "og:url": "https://playbooks.com/rules/django",
      "og:type": "website",
      "twitter:title": "Django Cursor Rules for AI",
      "twitter:description": "This rule explains Django conventions and best practices for backend development.",
      "twitter:image": "https://assets.playbooks.com/og-images/a01e87f748.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Django Cursor Rules for AI",
        "og:description": "This rule explains Django conventions and best practices for backend development.",
        "og:image": "https://assets.playbooks.com/og-images/a01e87f748.png",
        "og:url": "https://playbooks.com/rules/django",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Django Cursor Rules for AI",
        "twitter:description": "This rule explains Django conventions and best practices for backend development.",
        "twitter:image": "https://assets.playbooks.com/og-images/a01e87f748.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    Django"
      ],
      "h2": [
        "Related Snippets",
        "What this rule does",
        "Key Django practices",
        "Using Django in Cursor",
        "Benefits of using this rule",
        "Tips for Django development in Cursor"
      ],
      "h3": [
        "Django Template Language",
        "Project structure and organization",
        "Database efficiency",
        "Forms and validation",
        "Custom model managers"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/vitest-testing",
    "timestamp": "2025-06-12T10:11:49.889878",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  56124 REQUEST_METHOD  GET REQUEST_URI  rulesvitest-testing REQUEST_TIME_FLOAT  1749748309.752726 REQUEST_TIME  1749748309 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit537.36 (KHTML, like Gecko) Chrome91.0.4472.124 Safari537.36 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6IkdOcG5KRWJjL0J5UFQweVB1aFFoa3c9PSIsInZhbHVlIjoiSGhJYzN1UzJJNElWUjNkcHJicGhzbzhvZzloTHBOVnhIR25CYWhOditkb1h4UHV6NlB4OUd5di9lWEZ5YlZGT1lRbkxPcE0ySGNuaVdOUnd6MUpJLzFSRmVDdEZoalQxUldtNXlWZVZ6QzNxUERWWFpxc1NvdG44VERXYXlWbmgiLCJtYWMiOiIzZjY2ZDlhNmM4NDUxN2M4NDc3YTEwNjU0ZjRkNGQ3YWIxYTk1ZmM3YjkzNTMzOWI2NGMzZDhjOWFjZTJkNjZhIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IkpIeGRmQUNBUEhUZTFvbTJOMS9kWnc9PSIsInZhbHVlIjoiUVQxODR5NEovVWcwVnA5bzNiU2RCMDVkK0dNUVUrbC8vRUw2bEcyQ2JzZi8yWjBxbUdtRCtqN0hkMlg3OW83ajdNZlAxRGFzUU5udVIzRTNkMUdCUFFHdXhKelNpTms2ekVwTDhxelBIZDRkU0dPNkpTdDgvZUsxY3lJemFESWMiLCJtYWMiOiJhNWJhZDBhNWY3ZWQ4ZDE2ZTVkMmNmY2I0ZTExYTQ0ZjYzZWUxYjJiMzUyOTc5NjlkZDUxYzY2OTZhMWI0ODM2IiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/sqlite",
    "timestamp": "2025-06-12T10:11:50.786344",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  61863 REQUEST_METHOD  GET REQUEST_URI  rulessqlite REQUEST_TIME_FLOAT  1749748310.6508164 REQUEST_TIME  1749748310 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit537.36 (KHTML, like Gecko) Chrome91.0.4472.124 Safari537.36 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6IkdOcG5KRWJjL0J5UFQweVB1aFFoa3c9PSIsInZhbHVlIjoiSGhJYzN1UzJJNElWUjNkcHJicGhzbzhvZzloTHBOVnhIR25CYWhOditkb1h4UHV6NlB4OUd5di9lWEZ5YlZGT1lRbkxPcE0ySGNuaVdOUnd6MUpJLzFSRmVDdEZoalQxUldtNXlWZVZ6QzNxUERWWFpxc1NvdG44VERXYXlWbmgiLCJtYWMiOiIzZjY2ZDlhNmM4NDUxN2M4NDc3YTEwNjU0ZjRkNGQ3YWIxYTk1ZmM3YjkzNTMzOWI2NGMzZDhjOWFjZTJkNjZhIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IkpIeGRmQUNBUEhUZTFvbTJOMS9kWnc9PSIsInZhbHVlIjoiUVQxODR5NEovVWcwVnA5bzNiU2RCMDVkK0dNUVUrbC8vRUw2bEcyQ2JzZi8yWjBxbUdtRCtqN0hkMlg3OW83ajdNZlAxRGFzUU5udVIzRTNkMUdCUFFHdXhKelNpTms2ekVwTDhxelBIZDRkU0dPNkpTdDgvZUsxY3lJemFESWMiLCJtYWMiOiJhNWJhZDBhNWY3ZWQ4ZDE2ZTVkMmNmY2I0ZTExYTQ0ZjYzZWUxYjJiMzUyOTc5NjlkZDUxYzY2OTZhMWI0ODM2IiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/react-native",
    "timestamp": "2025-06-12T10:12:11.428519",
    "title": "React Native Cursor Rules for AI",
    "text": "React Native Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for React Native This rule explains React Native component patterns and mobile-specific considerations. Back to rules Type Mobile Language(s) JavaScript TypeScript Stats 1,310 views 134 copies 56 downloads Cursor (.mdc) Windsurf (.md) react-native.mdc Copy Download --- description: This rule explains React Native component patterns and mobile-specific considerations. globs: .jsx,.tsx alwaysApply: false ---  React Native rules - Use functional components with hooks - Follow a consistent folder structure (components, screens, navigation, services, hooks, utils) - Use React Navigation for screen navigation - Use StyleSheet for styling instead of inline styles - Use FlatList for rendering lists instead of map  ScrollView - Use custom hooks for reusable logic - Implement proper error boundaries and loading states - Optimize images and assets for mobile performance react-native.md Copy Download --- trigger: glob description: This rule explains React Native component patterns and mobile-specific considerations. globs: .jsx,.tsx ---  React Native rules - Use functional components with hooks - Follow a consistent folder structure (components, screens, navigation, services, hooks, utils) - Use React Navigation for screen navigation - Use StyleSheet for styling instead of inline styles - Use FlatList for rendering lists instead of map  ScrollView - Use custom hooks for reusable logic - Implement proper error boundaries and loading states - Optimize images and assets for mobile performance Add a snippet Suggest changes This rule guides you in implementing React Native applications within Cursor by providing best practices for component structures, navigation solutions, and mobile optimization techniques. It helps ensure your React Native projects follow modern patterns and perform well on mobile devices. What this rule does The React Native rule serves as a comprehensive guide for developing mobile applications using React Native within the Cursor editor. It encapsulates industry best practices and performance optimization techniques specifically tailored for cross-platform mobile development. The rule focuses on several key areas: Component architecture The rule emphasizes using functional components with hooks rather than class components, aligning with modern React development patterns. This approach typically results in more readable, maintainable code with better performance characteristics. Project organization A consistent folder structure is recommended, organizing your code into logical categories: components (reusable UI elements) screens (full pagesviews) navigation (routing configuration) services (API calls, external integrations) hooks (custom React hooks) utils (helper functions) Navigation and UI patterns The rule recommends using React Navigation for handling screen transitions and app structure. It also advises using optimized components like FlatList for rendering scrollable lists rather than combining map() with ScrollView, which can lead to performance issues. Styling and performance StyleSheet is recommended over inline styles to improve performance and maintain consistency. The rule also addresses mobile-specific concerns like image optimization and implementing proper loading states. Using React Native in Cursor The React Native rule is stored as react-native.mdc in your project's .cursorrules directory. This rule is configured as an \"Auto Attached\" rule, which means Cursor will automatically apply these guidelines when you're working with files that match the specified patterns: .jsx and .tsx. When you're editing React Native component files with these extensions, the AI assistant in Cursor will be aware of these best practices and will provide suggestions accordingly. This happens automatically without requiring manual invocation. If you want to explicitly invoke this rule in other contexts, you can type react-native in the Chat panel or Command-K dialog to activate these guidelines for the current conversation. Usage tips Custom hooks implementation When following the rule's recommendation to use custom hooks for reusable logic, consider this pattern:  hooksuseApi.js import  useState, useEffect  from 'react'; export function useApi(endpoint)  const data, setData  useState(null); const loading, setLoading  useState(true); const error, setError  useState(null); useEffect(()   fetchData(); , endpoint); const fetchData  async ()   try  setLoading(true); const response  await fetch(endpoint); const json  await response.json(); setData(json);  catch (err)  setError(err);  finally  setLoading(false);  ; return  data, loading, error, refetch: fetchData ;  Proper list rendering Following the rule's guidance on using FlatList for performance optimization: import  FlatList, Text, View, StyleSheet  from 'react-native'; const MyList  ( items )   const renderItem  ( item )  ( item.title ); return ( item.id initialNumToRender10  ); ; const styles  StyleSheet.create( item:  padding: 20, marginVertical: 8, marginHorizontal: 16, backgroundColor: 'f9f9f9', borderRadius: 5, , title:  fontSize: 16, , ); Error boundaries implementation To implement error boundaries as recommended by the rule: import React,  useState, useEffect  from 'react'; import  View, Text, StyleSheet, Button  from 'react-native'; const ErrorBoundary  ( children )   const hasError, setHasError  useState(false); useEffect(()   const handleError  (error)   console.log('Caught error:', error); setHasError(true); ;  Set up error handler const subscription  RNErrorHandler.addEventListener(handleError); return ()  subscription.remove(); , ); if (hasError)  return ( Something went wrong setHasError(false)  );  return children; ; const styles  StyleSheet.create( errorContainer:  flex: 1, justifyContent: 'center', alignItems: 'center', padding: 20, , errorText:  fontSize: 16, marginBottom: 20, color: 'red', , ); By following these React Native guidelines in Cursor, you'll create more maintainable, performant mobile applications that adhere to current best practices. Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/suggest/react-native",
      "https://playbooks.com/rules/add/react-native"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains React Native component patterns and mobile-specific considerations.",
      "og:title": "React Native Cursor Rules for AI",
      "og:description": "This rule explains React Native component patterns and mobile-specific considerations.",
      "og:image": "https://assets.playbooks.com/og-images/ea711ba635.png",
      "og:url": "https://playbooks.com/rules/react-native",
      "og:type": "website",
      "twitter:title": "React Native Cursor Rules for AI",
      "twitter:description": "This rule explains React Native component patterns and mobile-specific considerations.",
      "twitter:image": "https://assets.playbooks.com/og-images/ea711ba635.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "React Native Cursor Rules for AI",
        "og:description": "This rule explains React Native component patterns and mobile-specific considerations.",
        "og:image": "https://assets.playbooks.com/og-images/ea711ba635.png",
        "og:url": "https://playbooks.com/rules/react-native",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "React Native Cursor Rules for AI",
        "twitter:description": "This rule explains React Native component patterns and mobile-specific considerations.",
        "twitter:image": "https://assets.playbooks.com/og-images/ea711ba635.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    React Native"
      ],
      "h2": [
        "What this rule does",
        "Using React Native in Cursor",
        "Usage tips"
      ],
      "h3": [
        "Component architecture",
        "Project organization",
        "Navigation and UI patterns",
        "Styling and performance",
        "Custom hooks implementation",
        "Proper list rendering",
        "Error boundaries implementation"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/suggest/rule-analytics",
    "timestamp": "2025-06-12T10:12:11.918602",
    "title": "Login | Playbooks",
    "text": "Login  Playbooks Log in to playbooks and join the community for free Continue with Google Continue with GitHub Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Login to your Playbooks account",
      "og:title": "Login | Playbooks",
      "og:description": "Login to your Playbooks account",
      "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "og:url": "https://playbooks.com/login",
      "og:type": "website",
      "twitter:title": "Login | Playbooks",
      "twitter:description": "Login to your Playbooks account",
      "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Login | Playbooks",
        "og:description": "Login to your Playbooks account",
        "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "og:url": "https://playbooks.com/login",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Login | Playbooks",
        "twitter:description": "Login to your Playbooks account",
        "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Log in to playbooks and join the community for free"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/django-dtl",
    "timestamp": "2025-06-12T10:12:13.088815",
    "title": "Django Template Language Cursor Rules for AI",
    "text": "Django Template Language Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for Django Template Language This rule explains Django Template Language syntax and best practices. Back to rules Type Frontend Language(s) Python Used with Django Stats 182 views 7 copies 5 downloads Cursor (.mdc) Windsurf (.md) django-dtl.mdc Copy Download --- description: This rule explains Django Template Language syntax and best practices. globs: .html alwaysApply: false ---  Django DTL rules - Use template inheritance for layouts: html  block title Default Title endblock   block content  endblock   - Use include for components: html  include \"componentsuser_card.html\" with usercurrent_user   - Use template tags for logic: html  if user.is_authenticated  Welcome,  user.username !  else  Please log in  endif   - Use filters to format data: html  texttruncatewords:30   datedate:\"F j, Y\"   - Create custom template tags: python register.filter def currency(value): return f\"value:.2f\"  - Use url and static tags: html Link  load static   django-dtl.md Copy Download --- trigger: glob description: This rule explains Django Template Language syntax and best practices. globs: .html ---  Django DTL rules - Use template inheritance for layouts: html  block title Default Title endblock   block content  endblock   - Use include for components: html  include \"componentsuser_card.html\" with usercurrent_user   - Use template tags for logic: html  if user.is_authenticated  Welcome,  user.username !  else  Please log in  endif   - Use filters to format data: html  texttruncatewords:30   datedate:\"F j, Y\"   - Create custom template tags: python register.filter def currency(value): return f\"value:.2f\"  - Use url and static tags: html Link  load static   Suggest changes Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/suggest/django-dtl"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains Django Template Language syntax and best practices.",
      "og:title": "Django Template Language Cursor Rules for AI",
      "og:description": "This rule explains Django Template Language syntax and best practices.",
      "og:image": "https://assets.playbooks.com/og-images/d5ca9a3893.png",
      "og:url": "https://playbooks.com/rules/django-dtl",
      "og:type": "website",
      "twitter:title": "Django Template Language Cursor Rules for AI",
      "twitter:description": "This rule explains Django Template Language syntax and best practices.",
      "twitter:image": "https://assets.playbooks.com/og-images/d5ca9a3893.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Django Template Language Cursor Rules for AI",
        "og:description": "This rule explains Django Template Language syntax and best practices.",
        "og:image": "https://assets.playbooks.com/og-images/d5ca9a3893.png",
        "og:url": "https://playbooks.com/rules/django-dtl",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Django Template Language Cursor Rules for AI",
        "twitter:description": "This rule explains Django Template Language syntax and best practices.",
        "twitter:image": "https://assets.playbooks.com/og-images/d5ca9a3893.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    Django Template Language"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/add/postgresql",
    "timestamp": "2025-06-12T10:12:13.549652",
    "title": "Login | Playbooks",
    "text": "Login  Playbooks Log in to playbooks and join the community for free Continue with Google Continue with GitHub Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Login to your Playbooks account",
      "og:title": "Login | Playbooks",
      "og:description": "Login to your Playbooks account",
      "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "og:url": "https://playbooks.com/login",
      "og:type": "website",
      "twitter:title": "Login | Playbooks",
      "twitter:description": "Login to your Playbooks account",
      "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Login | Playbooks",
        "og:description": "Login to your Playbooks account",
        "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "og:url": "https://playbooks.com/login",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Login | Playbooks",
        "twitter:description": "Login to your Playbooks account",
        "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Log in to playbooks and join the community for free"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/supabase-migrations",
    "timestamp": "2025-06-12T10:12:15.089906",
    "title": "Supabase Migrations Cursor Rules for AI",
    "text": "Supabase Migrations Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for Supabase Migrations This rule explains how to write Postgres migrations provided by the Supabase CLI. Back to rules Type Database Used with PostgreSQL Stats 166 views 15 copies 8 downloads Author Ian Nuttall Cursor (.mdc) Windsurf (.md) supabase-migrations.mdc Copy Download --- description: This rule explains how to write Postgres migrations provided by the Supabase CLI. globs: supabasemigrations.sql alwaysApply: false ---  Supabase Migrations rules You are a Postgres Expert who loves creating secure database schemas. This project uses the migrations provided by the Supabase CLI.  Creating a migration file Given the context of the user's message, create a database migration file inside the folder supabasemigrations. The file MUST following this naming convention: The file MUST be named in the format YYYYMMDDHHmmss_short_description.sql with proper casing for months, minutes, and seconds in UTC time: 1. YYYY - Four digits for the year (e.g., 2024). 2. MM - Two digits for the month (01 to 12). 3. DD - Two digits for the day of the month (01 to 31). 4. HH - Two digits for the hour in 24-hour format (00 to 23). 5. mm - Two digits for the minute (00 to 59). 6. ss - Two digits for the second (00 to 59). 7. Add an appropriate description for the migration. For example:  20240906123045_create_profiles.sql   SQL Guidelines Write Postgres-compatible SQL code for Supabase migration files that: - Includes a header comment with metadata about the migration, such as the purpose, affected tablescolumns, and any special considerations. - Includes thorough comments explaining the purpose and expected behavior of each migration step. - Write all SQL in lowercase. - Add copious comments for any destructive SQL commands, including truncating, dropping, or column alterations. - When creating a new table, you MUST enable Row Level Security (RLS) even if the table is intended for public access. - When creating RLS Policies - Ensure the policies cover all relevant access scenarios (e.g. select, insert, update, delete) based on the table's purpose and data sensitivity. - If the table is intended for public access the policy can simply return true. - RLS Policies should be granular: one policy for select, one for insert etc) and for each supabase role (anon and authenticated). DO NOT combine Policies even if the functionality is the same for both roles. - Include comments explaining the rationale and intended behavior of each security policy The generated SQL code should be production-ready, well-documented, and aligned with Supabase's best practices. supabase-migrations.md Copy Download --- trigger: glob description: This rule explains how to write Postgres migrations provided by the Supabase CLI. globs: supabasemigrations.sql ---  Supabase Migrations rules You are a Postgres Expert who loves creating secure database schemas. This project uses the migrations provided by the Supabase CLI.  Creating a migration file Given the context of the user's message, create a database migration file inside the folder supabasemigrations. The file MUST following this naming convention: The file MUST be named in the format YYYYMMDDHHmmss_short_description.sql with proper casing for months, minutes, and seconds in UTC time: 1. YYYY - Four digits for the year (e.g., 2024). 2. MM - Two digits for the month (01 to 12). 3. DD - Two digits for the day of the month (01 to 31). 4. HH - Two digits for the hour in 24-hour format (00 to 23). 5. mm - Two digits for the minute (00 to 59). 6. ss - Two digits for the second (00 to 59). 7. Add an appropriate description for the migration. For example:  20240906123045_create_profiles.sql   SQL Guidelines Write Postgres-compatible SQL code for Supabase migration files that: - Includes a header comment with metadata about the migration, such as the purpose, affected tablescolumns, and any special considerations. - Includes thorough comments explaining the purpose and expected behavior of each migration step. - Write all SQL in lowercase. - Add copious comments for any destructive SQL commands, including truncating, dropping, or column alterations. - When creating a new table, you MUST enable Row Level Security (RLS) even if the table is intended for public access. - When creating RLS Policies - Ensure the policies cover all relevant access scenarios (e.g. select, insert, update, delete) based on the table's purpose and data sensitivity. - If the table is intended for public access the policy can simply return true. - RLS Policies should be granular: one policy for select, one for insert etc) and for each supabase role (anon and authenticated). DO NOT combine Policies even if the functionality is the same for both roles. - Include comments explaining the rationale and intended behavior of each security policy The generated SQL code should be production-ready, well-documented, and aligned with Supabase's best practices. Suggest changes Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/suggest/supabase-migrations"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains how to write Postgres migrations provided by the Supabase CLI.",
      "og:title": "Supabase Migrations Cursor Rules for AI",
      "og:description": "This rule explains how to write Postgres migrations provided by the Supabase CLI.",
      "og:image": "https://assets.playbooks.com/og-images/d9f05f45df.png",
      "og:url": "https://playbooks.com/rules/supabase-migrations",
      "og:type": "website",
      "twitter:title": "Supabase Migrations Cursor Rules for AI",
      "twitter:description": "This rule explains how to write Postgres migrations provided by the Supabase CLI.",
      "twitter:image": "https://assets.playbooks.com/og-images/d9f05f45df.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Supabase Migrations Cursor Rules for AI",
        "og:description": "This rule explains how to write Postgres migrations provided by the Supabase CLI.",
        "og:image": "https://assets.playbooks.com/og-images/d9f05f45df.png",
        "og:url": "https://playbooks.com/rules/supabase-migrations",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Supabase Migrations Cursor Rules for AI",
        "twitter:description": "This rule explains how to write Postgres migrations provided by the Supabase CLI.",
        "twitter:image": "https://assets.playbooks.com/og-images/d9f05f45df.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    Supabase Migrations"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/suggest/laravel",
    "timestamp": "2025-06-12T10:12:15.551090",
    "title": "Login | Playbooks",
    "text": "Login  Playbooks Log in to playbooks and join the community for free Continue with Google Continue with GitHub Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Login to your Playbooks account",
      "og:title": "Login | Playbooks",
      "og:description": "Login to your Playbooks account",
      "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "og:url": "https://playbooks.com/login",
      "og:type": "website",
      "twitter:title": "Login | Playbooks",
      "twitter:description": "Login to your Playbooks account",
      "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Login | Playbooks",
        "og:description": "Login to your Playbooks account",
        "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "og:url": "https://playbooks.com/login",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Login | Playbooks",
        "twitter:description": "Login to your Playbooks account",
        "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Log in to playbooks and join the community for free"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/add/mysql",
    "timestamp": "2025-06-12T10:12:16.059607",
    "title": "Login | Playbooks",
    "text": "Login  Playbooks Log in to playbooks and join the community for free Continue with Google Continue with GitHub Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Login to your Playbooks account",
      "og:title": "Login | Playbooks",
      "og:description": "Login to your Playbooks account",
      "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "og:url": "https://playbooks.com/login",
      "og:type": "website",
      "twitter:title": "Login | Playbooks",
      "twitter:description": "Login to your Playbooks account",
      "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Login | Playbooks",
        "og:description": "Login to your Playbooks account",
        "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "og:url": "https://playbooks.com/login",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Login | Playbooks",
        "twitter:description": "Login to your Playbooks account",
        "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Log in to playbooks and join the community for free"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/suggest/react-native",
    "timestamp": "2025-06-12T10:12:16.560070",
    "title": "Login | Playbooks",
    "text": "Login  Playbooks Log in to playbooks and join the community for free Continue with Google Continue with GitHub Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Login to your Playbooks account",
      "og:title": "Login | Playbooks",
      "og:description": "Login to your Playbooks account",
      "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "og:url": "https://playbooks.com/login",
      "og:type": "website",
      "twitter:title": "Login | Playbooks",
      "twitter:description": "Login to your Playbooks account",
      "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Login | Playbooks",
        "og:description": "Login to your Playbooks account",
        "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "og:url": "https://playbooks.com/login",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Login | Playbooks",
        "twitter:description": "Login to your Playbooks account",
        "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Log in to playbooks and join the community for free"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/expressjs",
    "timestamp": "2025-06-12T10:11:39.969656",
    "title": "Express.js Cursor Rules for AI",
    "text": "Express.js Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for Express.js This rule explains Express.js conventions and best practices for Node.js backend development. Back to rules Type Backend Language(s) JavaScript TypeScript Compatible with Next.js React Vue.js Stats 1,716 views 247 copies 70 downloads Cursor (.mdc) Windsurf (.md) expressjs.mdc Copy Download --- description: This rule explains Express.js conventions and best practices for Node.js backend development. globs: .js,.ts alwaysApply: false ---  Express.js rules - Use proper middleware order: body parsers, custom middleware, routes, error handlers - Organize routes using Express Router for modular code structure - Use asyncawait with proper error handling and trycatch blocks - Create a centralized error handler middleware as the last middleware - Use environment variables for configuration with a config module - Implement request validation using libraries like express-validator - Use middleware for authentication and authorization - Use appropriate HTTP status codes in responses expressjs.md Copy Download --- trigger: glob description: This rule explains Express.js conventions and best practices for Node.js backend development. globs: .js,.ts ---  Express.js rules - Use proper middleware order: body parsers, custom middleware, routes, error handlers - Organize routes using Express Router for modular code structure - Use asyncawait with proper error handling and trycatch blocks - Create a centralized error handler middleware as the last middleware - Use environment variables for configuration with a config module - Implement request validation using libraries like express-validator - Use middleware for authentication and authorization - Use appropriate HTTP status codes in responses Add a snippet Suggest changes The Express.js rule provides guidance on best practices and conventions for Node.js backend development using the Express.js framework. This helps maintain consistent, well-structured code following industry standards when building web applications and APIs with Express. What this rule does This rule serves as a comprehensive guide for Express.js development, covering essential aspects of building robust Node.js applications. It provides recommendations for: Proper middleware configuration and ordering Code organization and structure Error handling patterns Configuration management Security best practices HTTP response standards These guidelines help ensure your Express applications are maintainable, secure, and follow established patterns used by experienced developers. Key Express.js conventions Middleware organization The rule emphasizes proper middleware ordering, which is crucial for Express applications: Body parsers and request preprocessing Custom application middleware Route handlers Error handling middleware Following this sequence ensures requests are properly processed before reaching route handlers, and any errors are captured by dedicated error middleware. Route organization Using Express Router for modular code structure is recommended:  routesusers.js const express  require('express'); const router  express.Router(); router.get('', (req, res)    Handle GET users ); router.post('', (req, res)    Handle POST users ); module.exports  router;  app.js app.use('users', require('.routesusers')); This approach keeps related routes together and makes your application more maintainable as it grows. Modern async patterns The rule encourages using asyncawait with proper error handling: router.get('users:id', async (req, res, next)   try  const user  await User.findById(req.params.id); if (!user) return res.status(404).json( message: 'User not found' ); res.json(user);  catch (err)  next(err);  Pass to error handler  ); Error handling Creating a centralized error handler as the last middleware helps standardize error responses:  Last middleware in your app app.use((err, req, res, next)   console.error(err.stack); res.status(err.status  500).json( error:  message: err.message  'Internal Server Error', ...(process.env.NODE_ENV  'development'   stack: err.stack )  ); ); Other best practices The rule also covers: Using environment variables with a configuration module Implementing request validation Adding authentication middleware Using appropriate HTTP status codes Using Express.js in Cursor The Express.js rule (defined in expressjs.mdc) is automatically activated when working with JavaScript or TypeScript files in your project, as specified by its glob pattern: .js,.ts. This means whenever you open or edit any JavaScript or TypeScript file, this rule provides context to Cursor's AI features. You can also manually invoke it by typing expressjs in the AI chat or Cmd-K dialog when you need Express.js-specific guidance. This rule is particularly helpful when: Setting up a new Express.js project Refactoring existing Express code to follow best practices Troubleshooting common Express.js issues Implementing standard patterns like authentication or validation Usage tips Use this rule when generating Express route handlers to ensure they follow proper asyncawait patterns Refer to it when organizing your middleware to ensure proper ordering Let the rule guide your error handling strategy, especially for API development When requesting code completion for Express-based features, ensure this rule is active for consistent results Combine with other Node.js related rules for more comprehensive guidance when building backend applications Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/add/expressjs",
      "https://playbooks.com/rules/suggest/expressjs",
      "https://playbooks.com/rules/nextjs",
      "https://playbooks.com/rules/react",
      "https://playbooks.com/rules/vuejs"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains Express.js conventions and best practices for Node.js backend development.",
      "og:title": "Express.js Cursor Rules for AI",
      "og:description": "This rule explains Express.js conventions and best practices for Node.js backend development.",
      "og:image": "https://assets.playbooks.com/og-images/b32f738bd8.png",
      "og:url": "https://playbooks.com/rules/expressjs",
      "og:type": "website",
      "twitter:title": "Express.js Cursor Rules for AI",
      "twitter:description": "This rule explains Express.js conventions and best practices for Node.js backend development.",
      "twitter:image": "https://assets.playbooks.com/og-images/b32f738bd8.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Express.js Cursor Rules for AI",
        "og:description": "This rule explains Express.js conventions and best practices for Node.js backend development.",
        "og:image": "https://assets.playbooks.com/og-images/b32f738bd8.png",
        "og:url": "https://playbooks.com/rules/expressjs",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Express.js Cursor Rules for AI",
        "twitter:description": "This rule explains Express.js conventions and best practices for Node.js backend development.",
        "twitter:image": "https://assets.playbooks.com/og-images/b32f738bd8.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    Express.js"
      ],
      "h2": [
        "What this rule does",
        "Key Express.js conventions",
        "Using Express.js in Cursor",
        "Usage tips"
      ],
      "h3": [
        "Middleware organization",
        "Route organization",
        "Modern async patterns",
        "Error handling",
        "Other best practices"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/react",
    "timestamp": "2025-06-12T10:11:41.901502",
    "title": "React Cursor Rules for AI",
    "text": "React Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for React This rule explains React component patterns, hooks usage, and best practices. Back to rules Type Frontend Language(s) JavaScript TypeScript Tags Framework Compatible with Laravel Django Flask Ruby on Rails Express.js Stats 3,336 views 1,444 copies 1,087 downloads Cursor (.mdc) Windsurf (.md) react.mdc Copy Download --- description: This rule explains React component patterns, hooks usage, and best practices. globs: .jsx,.tsx alwaysApply: false ---  React rules - Use functional components with hooks instead of class components - Use custom hooks for reusable logic - Use the Context API for state management when needed - Use proper prop validation with PropTypes - Use React.memo for performance optimization when necessary - Use fragments to avoid unnecessary DOM elements - Use proper list rendering with keys - Prefer composition over inheritance react.md Copy Download --- trigger: glob description: This rule explains React component patterns, hooks usage, and best practices. globs: .jsx,.tsx ---  React rules - Use functional components with hooks instead of class components - Use custom hooks for reusable logic - Use the Context API for state management when needed - Use proper prop validation with PropTypes - Use React.memo for performance optimization when necessary - Use fragments to avoid unnecessary DOM elements - Use proper list rendering with keys - Prefer composition over inheritance Add a snippet Suggest changes This rule serves as your React guide in Cursor, offering AI assistance with React component patterns, hooks usage, and best practices. Whether you're building new components or refactoring existing code, this rule helps you follow modern React conventions and write maintainable code. What this rule does The React rule provides guidance for writing high-quality React code according to modern best practices. It focuses on several key areas of React development: Encouraging the use of functional components with hooks Promoting code reusability through custom hooks Providing guidance on state management Ensuring proper component performance optimization Recommending structural patterns for clean component hierarchies When activated, the rule instructs Cursor's AI to provide suggestions and code completions aligned with these React best practices, helping you write more maintainable and efficient React code. React best practices covered Functional components and hooks The rule encourages using functional components with hooks instead of class components, following modern React development patterns. This approach results in more concise code that's easier to test and maintain. For example, instead of writing: class UserProfile extends React.Component  constructor(props)  super(props); this.state   name: props.name ;  render()  return Hello, this.state.name! ;   The AI will suggest functional components with hooks: function UserProfile( name )  const userName, setUserName  useState(name); return Hello, userName! ;  Custom hooks for reusable logic The rule promotes extracting reusable logic into custom hooks, making your code more modular and testable. Custom hooks allow you to share stateful logic between components without duplicating code. Context API for state management When global state is needed, the rule suggests using React's Context API appropriately, helping you avoid prop drilling while maintaining clean component architecture. Other recommended practices The rule also covers: Using PropTypes for proper prop validation Implementing React.memo for performance optimization Using fragments to avoid unnecessary DOM elements Ensuring proper list rendering with keys Favoring composition over inheritance for component relationships Using React in Cursor To benefit from these React best practices while working in Cursor: The rule is defined in the file react.mdc within your project's .cursorrules directory. This rule is likely configured as an \"Auto Attached\" rule, as it has glob patterns (.jsx,.tsx). This means the rule activates automatically whenever you're working with JSX or TSX files in your project. If you need to manually invoke the rule in other contexts, you can type react in the chat or Cmd-K interface. When activated, the rule provides context to Cursor's AI, guiding it to offer suggestions and code completions that follow modern React best practices. Usage tips Working with components When creating new components, let Cursor help you structure them according to best practices. The AI will suggest functional components with hooks and proper prop handling. Refactoring legacy code If you're working with older React codebases that use class components, the AI can help you refactor to functional components with hooks, making your code more maintainable. State management assistance When you're implementing state management in your components, the AI will provide guidance on whether to use local state with useState, shared logic with custom hooks, or global state with Context API based on your specific needs. Performance optimization As your application grows, the AI can help identify opportunities for performance optimization using React.memo, useMemo, and useCallback in appropriate situations. Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/django",
      "https://playbooks.com/rules/add/react",
      "https://playbooks.com/rules/laravel",
      "https://playbooks.com/rules/suggest/react"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains React component patterns, hooks usage, and best practices.",
      "og:title": "React Cursor Rules for AI",
      "og:description": "This rule explains React component patterns, hooks usage, and best practices.",
      "og:image": "https://assets.playbooks.com/og-images/d94c47b322.png",
      "og:url": "https://playbooks.com/rules/react",
      "og:type": "website",
      "twitter:title": "React Cursor Rules for AI",
      "twitter:description": "This rule explains React component patterns, hooks usage, and best practices.",
      "twitter:image": "https://assets.playbooks.com/og-images/d94c47b322.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "React Cursor Rules for AI",
        "og:description": "This rule explains React component patterns, hooks usage, and best practices.",
        "og:image": "https://assets.playbooks.com/og-images/d94c47b322.png",
        "og:url": "https://playbooks.com/rules/react",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "React Cursor Rules for AI",
        "twitter:description": "This rule explains React component patterns, hooks usage, and best practices.",
        "twitter:image": "https://assets.playbooks.com/og-images/d94c47b322.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    React"
      ],
      "h2": [
        "What this rule does",
        "React best practices covered",
        "Using React in Cursor",
        "Usage tips"
      ],
      "h3": [
        "Functional components and hooks",
        "Custom hooks for reusable logic",
        "Context API for state management",
        "Other recommended practices",
        "Working with components",
        "Refactoring legacy code",
        "State management assistance",
        "Performance optimization"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/fastapi",
    "timestamp": "2025-06-12T10:11:44.053944",
    "title": "FastAPI Cursor Rules for AI",
    "text": "FastAPI Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for FastAPI This rule explains FastAPI conventions and best practices for high-performance Python APIs. Back to rules Type Backend Language(s) Python Compatible with Next.js Jinja SvelteKit Stats 2,576 views 294 copies 104 downloads Cursor (.mdc) Windsurf (.md) fastapi.mdc Copy Download --- description: This rule explains FastAPI conventions and best practices for high-performance Python APIs. globs: .py alwaysApply: false ---  FastAPI rules - Use type hints for all function parameters and return values - Use Pydantic models for request and response validation - Use appropriate HTTP methods with path operation decorators (app.get, app.post, etc.) - Use dependency injection for shared logic like database connections and authentication - Use background tasks for non-blocking operations - Use proper status codes for responses (201 for creation, 404 for not found, etc.) - Use APIRouter for organizing routes by feature or resource - Use path parameters, query parameters, and request bodies appropriately fastapi.md Copy Download --- trigger: glob description: This rule explains FastAPI conventions and best practices for high-performance Python APIs. globs: .py ---  FastAPI rules - Use type hints for all function parameters and return values - Use Pydantic models for request and response validation - Use appropriate HTTP methods with path operation decorators (app.get, app.post, etc.) - Use dependency injection for shared logic like database connections and authentication - Use background tasks for non-blocking operations - Use proper status codes for responses (201 for creation, 404 for not found, etc.) - Use APIRouter for organizing routes by feature or resource - Use path parameters, query parameters, and request bodies appropriately Add a snippet Suggest changes The FastAPI rule helps you follow best practices when developing Python APIs with FastAPI, ensuring your code is type-safe, properly structured, and follows HTTP conventions. This rule guides Cursor's AI to provide suggestions aligned with FastAPI's recommended patterns. What this rule does The FastAPI rule provides guidance for developing high-performance Python APIs using the FastAPI framework. It encapsulates key best practices and conventions that make your API code more maintainable, type-safe, and properly structured. The rule focuses on several important aspects of FastAPI development: Type annotations for API functions Requestresponse validation using Pydantic Proper HTTP method usage Dependency injection patterns Background task implementation HTTP status code usage Route organization Parameter handling FastAPI best practices explained Type hints and validation The rule emphasizes using Python type hints for all function parameters and return values. This practice enables FastAPI's automatic documentation generation and request validation. Paired with Pydantic models, it creates a robust validation system for your API data: from fastapi import FastAPI from pydantic import BaseModel app  FastAPI() class Item(BaseModel): name: str price: float is_offer: bool  False app.post(\"items\", response_modelItem) def create_item(item: Item): return item HTTP methods and status codes The rule recommends using appropriate HTTP methods via FastAPI's path operation decorators (app.get, app.post, etc.) and returning proper status codes: app.post(\"items\", status_code201) def create_item(item: Item):  Create the item return \"id\": item_id, \"name\": item.name app.get(\"itemsitem_id\", status_code200) def read_item(item_id: int): if item_not_found: raise HTTPException(status_code404, detail\"Item not found\") return \"id\": item_id, \"name\": \"Example item\" Route organization and dependency injection The rule encourages organizing routes by feature using APIRouter and implementing dependency injection for shared logic: from fastapi import Depends, APIRouter router  APIRouter(prefix\"users\", tags\"users\") def get_db(): db  SessionLocal() try: yield db finally: db.close() router.get(\"user_id\") def read_user(user_id: int, db  Depends(get_db)): return db.query(User).filter(User.id  user_id).first() app.include_router(router) Using FastAPI in Cursor The FastAPI rule (stored as fastapi.mdc in your project's .cursorrules directory) is designed to be automatically applied when working with Python files. Since it has a glob pattern of .py, Cursor will automatically invoke this rule whenever you're editing any Python file in your project. When active, this rule provides context to Cursor's AI features, helping it understand FastAPI conventions. This means when you: Use Cmd-K to request code completion or modifications Chat with the AI about your FastAPI code Generate new FastAPI endpoints or functionality The AI will follow the best practices defined in the rule, such as using type hints, appropriate status codes, and Pydantic models. Usage tips When to manually invoke the rule While this rule automatically applies to Python files, you can also manually invoke it by typing fastapi in the Cmd-K prompt or chat if you want to specifically focus on FastAPI guidance. Combining with other rules This rule works well with other Python-related rules, such as those for code style, testing, or documentation. The FastAPI rule will specifically handle the API structure and conventions while other rules can handle complementary aspects of your codebase. Getting the most from this rule For maximum benefit: Ensure your project has the FastAPI dependencies installed Use the rule when designing new endpoints or refactoring existing ones Reference the rule when asking the AI to generate API validation logic or route organization Using this rule consistently will help maintain a well-structured, type-safe FastAPI codebase that follows recommended best practices. Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/suggest/fastapi",
      "https://playbooks.com/rules/add/fastapi"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains FastAPI conventions and best practices for high-performance Python APIs.",
      "og:title": "FastAPI Cursor Rules for AI",
      "og:description": "This rule explains FastAPI conventions and best practices for high-performance Python APIs.",
      "og:image": "https://assets.playbooks.com/og-images/5d1015aea6.png",
      "og:url": "https://playbooks.com/rules/fastapi",
      "og:type": "website",
      "twitter:title": "FastAPI Cursor Rules for AI",
      "twitter:description": "This rule explains FastAPI conventions and best practices for high-performance Python APIs.",
      "twitter:image": "https://assets.playbooks.com/og-images/5d1015aea6.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "FastAPI Cursor Rules for AI",
        "og:description": "This rule explains FastAPI conventions and best practices for high-performance Python APIs.",
        "og:image": "https://assets.playbooks.com/og-images/5d1015aea6.png",
        "og:url": "https://playbooks.com/rules/fastapi",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "FastAPI Cursor Rules for AI",
        "twitter:description": "This rule explains FastAPI conventions and best practices for high-performance Python APIs.",
        "twitter:image": "https://assets.playbooks.com/og-images/5d1015aea6.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    FastAPI"
      ],
      "h2": [
        "What this rule does",
        "FastAPI best practices explained",
        "Using FastAPI in Cursor",
        "Usage tips"
      ],
      "h3": [
        "Type hints and validation",
        "HTTP methods and status codes",
        "Route organization and dependency injection",
        "When to manually invoke the rule",
        "Combining with other rules",
        "Getting the most from this rule"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/rule-analytics",
    "timestamp": "2025-06-12T10:11:46.384239",
    "title": "Cursor rule to track how often rules are used",
    "text": "Cursor rule to track how often rules are used playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor rule to track how often rules are used This rule explains how to create and update an analytics.md file to track how often .mdc rules is being used. Back to rules Type Integration Stats 671 views 73 copies 40 downloads Author Elie Steinbock Cursor (.mdc) Windsurf (.md) rule-analytics.mdc Copy Download --- description: This rule explains how to create and update an analytics.md file to track how often .mdc rules is being used. globs:  alwaysApply: false ---  Cursor Rules Analytics Each time you use a Cursor rule, update the analytics tracking file. File location:  PROJECT_ROOT.cursoranalytics.md   Format The analytics file contains a count of how many times each rule has been used:  rule-name.mdc: 5 another-rule.mdc: 2  Add new rules as needed. rule-analytics.md Copy Download --- trigger: model_decision description: This rule explains how to create and update an analytics.md file to track how often .mdc rules is being used. ---  Cursor Rules Analytics Each time you use a Cursor rule, update the analytics tracking file. File location:  PROJECT_ROOT.cursoranalytics.md   Format The analytics file contains a count of how many times each rule has been used:  rule-name.mdc: 5 another-rule.mdc: 2  Add new rules as needed. Add a snippet Suggest changes Track rule usage with automated analytics for your Cursor projects. This rule manages a centralized analytics file that keeps count of how often each Cursor rule is being used, providing visibility into which rules are most valuable to your workflow. What this rule does The Cursor Rules Analytics rule creates and maintains a simple tracking system that automatically counts how many times each rule in your project has been used. It works by updating a dedicated analytics file within your project's .cursor directory each time a rule is invoked. The analytics data is stored in a straightforward formata list of rule filenames paired with their usage counts: rule-name.mdc: 5 another-rule.mdc: 2 This provides a quick way to see which rules are most frequently used in your workflow, helping you understand which rules provide the most value. How the analytics tracking works When the rule is activated, it checks for the existence of an analytics file at .cursoranalytics.md in your project's root directory. If the file doesn't exist, it creates one. Each time a rule is used, the counter for that specific rule is incremented in the analytics file. The system is designed to be: Simple: Plain text format that's easy to read Persistent: Analytics are stored in your project, making them available across sessions Extensible: New rules are automatically added to the tracking list Using Cursor Rules Analytics in Cursor The rule is stored in the file rule-analytics.mdc and can be activated in Cursor based on its glob pattern configuration: Since this rule has a glob pattern of , it's configured as an \"Auto Attached\" rule that activates automatically whenever you're working with any file in your project. This means the analytics tracking should work without manual intervention. If you need to invoke it manually for any reason, you can do so by typing rule-analytics in the chat or Command-K interface. The automatic nature of this rule makes it particularly valuableonce configured, you can simply work as usual while the rule silently tracks which rules are being used most frequently. Usage tips Reviewing analytics data To check which rules are being used most often: Open the analytics file at .cursoranalytics.md in your project Rules are listed with their usage counts in descending order Use this information to identify your most valuable rules Leveraging analytics insights Refine frequently used rules: If certain rules show high usage, consider optimizing them further for even greater productivity Share valuable rules: When you see rules with high usage counts, consider sharing them with teammates Prune unused rules: Rules with consistently low counts might be candidates for removal or revision Version control considerations Since the analytics file lives in the .cursor directory, you may want to: Include it in version control to share analytics across your team Exclude it if you prefer to keep usage tracking personal By monitoring rule usage through this analytics system, you can make more informed decisions about which rules to invest time in improving and which might be unnecessary for your workflow. Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/suggest/rule-analytics",
      "https://playbooks.com/rules/add/rule-analytics"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains how to create and update an analytics.md file to track how often .mdc rules is being used.",
      "og:title": "Cursor rule to track how often rules are used",
      "og:description": "This rule explains how to create and update an analytics.md file to track how often .mdc rules is being used.",
      "og:image": "https://assets.playbooks.com/og-images/fd5feeaac4.png",
      "og:url": "https://playbooks.com/rules/rule-analytics",
      "og:type": "website",
      "twitter:title": "Cursor rule to track how often rules are used",
      "twitter:description": "This rule explains how to create and update an analytics.md file to track how often .mdc rules is being used.",
      "twitter:image": "https://assets.playbooks.com/og-images/fd5feeaac4.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Cursor rule to track how often rules are used",
        "og:description": "This rule explains how to create and update an analytics.md file to track how often .mdc rules is being used.",
        "og:image": "https://assets.playbooks.com/og-images/fd5feeaac4.png",
        "og:url": "https://playbooks.com/rules/rule-analytics",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Cursor rule to track how often rules are used",
        "twitter:description": "This rule explains how to create and update an analytics.md file to track how often .mdc rules is being used.",
        "twitter:image": "https://assets.playbooks.com/og-images/fd5feeaac4.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor rule to track how often rules are used"
      ],
      "h2": [
        "What this rule does",
        "How the analytics tracking works",
        "Using Cursor Rules Analytics in Cursor",
        "Usage tips"
      ],
      "h3": [
        "Reviewing analytics data",
        "Leveraging analytics insights",
        "Version control considerations"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/builder",
    "timestamp": "2025-06-12T10:11:46.973213",
    "title": "Build your own Cursor rules for AI coding",
    "text": "Build your own Cursor rules for AI coding playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Build your own Cursor rules for AI coding Free builder to compose your own Cursor rules starter kit to work from. Export to Cursor, Windsurf, and Cline. Stack Options Download Backend No Backend Skip backend selection and browse framework-tagged frontend options only Django This rule explains Django conventions and best practices for backend development. Express.js This rule explains Express.js conventions and best practices for Node.js backend development. FastAPI This rule explains FastAPI conventions and best practices for high-performance Python APIs. Flask This rule explains Flask conventions and best practices for lightweight Python web applications. Flutter This rule explains Flutter widget patterns and best practices for cross-platform mobile development. Laravel This rule explains Laravel conventions and best practices for backend development. Next.js This rule explains Next.js conventions and best practices for fullstack development. React Native This rule explains React Native component patterns and mobile-specific considerations. Ruby on Rails This rule explains Ruby on Rails conventions and best practices for backend development. SvelteKit This rule explains SvelteKit conventions and best practices for fullstack development. SwiftUI This rule explains SwiftUI patterns and best practices for iOS, macOS, watchOS, and tvOS development. Frontend Frontend options will show here after you select a backend Search Filter by type Backend Frontend Fullstack Mobile Database Integration Filter by language CSS Dart JavaScript PHP Python Ruby Swift TypeScript Additional Rules Create Rules This rule explains how to create new .mdc project rule files for the Cursor agent. Cursor Rules Analytics This rule explains how to create and update an analytics.md file to track how often .mdc rules is being used. Django Template Language This rule explains Django Template Language syntax and best practices. ERB This rule explains ERB template syntax and best practices for Ruby applications. Hotwire This rule explains Hotwire (Turbo and Stimulus) patterns for modern Rails applications. Laravel TALL Stack This rule explains how to build Livewire components and use the TALL stack effectively. Laravel VILT Stack This rule explains how to build Vue components with Inertia.js in Laravel applications. Memory This rule defines how the AI agent should manage and utilize memory improve coding consistency. MySQL This rule explains MySQL database design patterns and query optimization techniques. Postgres Database Functions This rule provides guidelines for writing PostgreSQL database functions. PostgreSQL This rule explains PostgreSQL database design patterns and advanced features usage. SQLite This rule explains SQLite database design patterns and performance considerations. Supabase Edge Functions This rule explains coding rules for creating Supabase Edge Functions. Supabase Migrations This rule explains how to write Postgres migrations provided by the Supabase CLI. Supabase RLS Policy This rule provides guidelines for writing Postgres Row Level Security policies. Tailwind CSS This rule explains Tailwind CSS conventions, utility classes, and best practices for modern UI development. Tailwind CSS 4 This rule explains Tailwind CSS 4 changes, new features, and best practices for modern UI development. Task List This rule explains how to create and manage task lists to track project progress. Vitest Testing This rule explains the guidelines for writing Vitest tests for Next.js applications. Back to Stack Continue to Download No rules selected Please select at least one backend framework and compatible frontend to continue. Back to Stack Selection Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Free builder to compose your own Cursor rules starter kit to work from. Export to Cursor, Windsurf, and Cline.",
      "og:title": "Build your own Cursor rules for AI coding",
      "og:description": "Free builder to compose your own Cursor rules starter kit to work from. Export to Cursor, Windsurf, and Cline.",
      "og:image": "https://assets.playbooks.com/og-images/ae05d216fd.png",
      "og:url": "https://playbooks.com/rules/builder",
      "og:type": "website",
      "twitter:title": "Build your own Cursor rules for AI coding",
      "twitter:description": "Free builder to compose your own Cursor rules starter kit to work from. Export to Cursor, Windsurf, and Cline.",
      "twitter:image": "https://assets.playbooks.com/og-images/ae05d216fd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Build your own Cursor rules for AI coding",
        "og:description": "Free builder to compose your own Cursor rules starter kit to work from. Export to Cursor, Windsurf, and Cline.",
        "og:image": "https://assets.playbooks.com/og-images/ae05d216fd.png",
        "og:url": "https://playbooks.com/rules/builder",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Build your own Cursor rules for AI coding",
        "twitter:description": "Free builder to compose your own Cursor rules starter kit to work from. Export to Cursor, Windsurf, and Cline.",
        "twitter:image": "https://assets.playbooks.com/og-images/ae05d216fd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Build your own Cursor rules for AI coding"
      ],
      "h2": [
        "Search"
      ],
      "h3": [
        "No rules selected"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/laravel",
    "timestamp": "2025-06-12T10:11:51.430659",
    "title": "Laravel Cursor Rules for AI",
    "text": "Laravel Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for Laravel This rule explains Laravel conventions and best practices for backend development. Back to rules Type Backend Language(s) PHP Compatible with Laravel TALL Stack Laravel VILT Stack Next.js React Vue.js SvelteKit Stats 2,094 views 112 copies 59 downloads Contributors Venelin Kochev Venelin Kochev Cursor (.mdc) Windsurf (.md) laravel.mdc Copy Download --- description: This rule explains Laravel conventions and best practices for backend development. globs: .php alwaysApply: false ---  Laravel rules - Use php artisan make:option to create models, migrations, controllers, etc. - appConsoleKernel.php does not exist in Laravel 11. If the file is not present, use the the app.php(mdc:bootstrapapp.php) file for related configurations. - In Laravel 11 commands created in appConsoleCommands are automatically registered and available to use. - Add environment variables to config files and avoid using env variables directly in the code. For example config('app.name') instead of env('APP_NAME'). - Avoid N1 queries by using eager loading or batch loading. Examples: php users  User::with('posts')-get(); posts  Post::whereIn('user_id', users-pluck('id'))-get();  - Prefer soft deletes for models using the SoftDeletes trait: php class User extends Model  use SoftDeletes;   laravel.md Copy Download --- trigger: glob description: This rule explains Laravel conventions and best practices for backend development. globs: .php ---  Laravel rules - Use php artisan make:option to create models, migrations, controllers, etc. - appConsoleKernel.php does not exist in Laravel 11. If the file is not present, use the the app.php(mdc:bootstrapapp.php) file for related configurations. - In Laravel 11 commands created in appConsoleCommands are automatically registered and available to use. - Add environment variables to config files and avoid using env variables directly in the code. For example config('app.name') instead of env('APP_NAME'). - Avoid N1 queries by using eager loading or batch loading. Examples: php users  User::with('posts')-get(); posts  Post::whereIn('user_id', users-pluck('id'))-get();  - Prefer soft deletes for models using the SoftDeletes trait: php class User extends Model  use SoftDeletes;   Add a snippet Suggest changes Related Snippets Laravel TALL Stack This rule explains how to build Livewire components and use the TALL stack effectively. Laravel VILT Stack This rule explains how to build Vue components with Inertia.js in Laravel applications. The Laravel rule in Cursor provides a convenient reference for Laravel conventions and best practices, helping developers maintain consistent, efficient PHP code in Laravel applications. It covers essential Laravel practices like artisan commands, environment variables, database query optimization, and soft delete implementation. What this rule does The Laravel rule provides context to Cursor's AI assistant about Laravel framework conventions and best practices for backend development. When active, it guides code suggestions and completions to align with Laravel's preferred patterns and approaches. This rule helps developers avoid common pitfalls and follow recommended Laravel methodologies for: Using artisan commands Managing environment variables Preventing database query performance issues Implementing soft deletes Working with Laravel 11 specific features Laravel conventions and best practices Artisan commands The rule encourages using Laravel's built-in artisan command tool for creating framework components. Instead of manually creating files, you should use commands like: php artisan make:model Post php artisan make:controller PostController php artisan make:migration create_posts_table Configuration management The rule recommends proper environment variable usage by accessing them through config files rather than directly with the env() helper function in your application code:  Recommended appName  config('app.name');  Not recommended appName  env('APP_NAME'); This practice ensures your application uses cached configuration values in production environments. Database query optimization To prevent the N1 query problem (a common performance issue), the rule suggests using eager loading with the with() method or batch loading strategies:  Eager loading example users  User::with('posts')-get();  Batch loading example posts  Post::whereIn('user_id', users-pluck('id'))-get(); Soft deletes For models that shouldn't be permanently removed from the database, the rule advises implementing soft deletes: class User extends Model  use SoftDeletes;  Laravel 11 considerations The rule provides guidance specific to Laravel 11, noting that: The appConsoleKernel.php file may not exist Commands in appConsoleCommands are automatically registered Using Laravel in Cursor The Laravel rule is stored in your project's .cursorrules directory as laravel.mdc. This rule is configured as an \"Auto Attached\" rule with the glob pattern .php, meaning it automatically activates whenever you're working with PHP files in your project. When active, the rule provides contextual guidance to Cursor's AI, influencing: Code completions Recommendations Generated code Responses to your questions about Laravel You don't need to manually activate this rule - it will automatically provide Laravel-specific context when you're editing PHP files. If you want to explicitly reference it in a conversation with the AI assistant, you can type laravel in the chat or Cmd-K interface. Usage tips Use this rule when working on Laravel applications to ensure the AI provides suggestions that follow Laravel best practices Combine this rule with other PHP-related rules for comprehensive guidance Consider expanding the rule with project-specific Laravel conventions if your team has additional standards The rule is particularly helpful for developers new to Laravel who need guidance on framework conventions Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/laravel-vilt",
      "https://playbooks.com/rules/add/laravel",
      "https://playbooks.com/rules/suggest/laravel",
      "https://playbooks.com/rules/vuejs",
      "https://playbooks.com/rules/laravel-tall"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains Laravel conventions and best practices for backend development.",
      "og:title": "Laravel Cursor Rules for AI",
      "og:description": "This rule explains Laravel conventions and best practices for backend development.",
      "og:image": "https://assets.playbooks.com/og-images/643663bc98.png",
      "og:url": "https://playbooks.com/rules/laravel",
      "og:type": "website",
      "twitter:title": "Laravel Cursor Rules for AI",
      "twitter:description": "This rule explains Laravel conventions and best practices for backend development.",
      "twitter:image": "https://assets.playbooks.com/og-images/643663bc98.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Laravel Cursor Rules for AI",
        "og:description": "This rule explains Laravel conventions and best practices for backend development.",
        "og:image": "https://assets.playbooks.com/og-images/643663bc98.png",
        "og:url": "https://playbooks.com/rules/laravel",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Laravel Cursor Rules for AI",
        "twitter:description": "This rule explains Laravel conventions and best practices for backend development.",
        "twitter:image": "https://assets.playbooks.com/og-images/643663bc98.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    Laravel"
      ],
      "h2": [
        "Related Snippets",
        "What this rule does",
        "Laravel conventions and best practices",
        "Using Laravel in Cursor",
        "Usage tips"
      ],
      "h3": [
        "Laravel TALL Stack",
        "Laravel VILT Stack",
        "Artisan commands",
        "Configuration management",
        "Database query optimization",
        "Soft deletes",
        "Laravel 11+ considerations"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/flutter",
    "timestamp": "2025-06-12T10:11:51.787466",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  52964 REQUEST_METHOD  GET REQUEST_URI  rulesflutter REQUEST_TIME_FLOAT  1749748311.6518688 REQUEST_TIME  1749748311 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit537.36 (KHTML, like Gecko) Chrome91.0.4472.124 Safari537.36 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6IjRwWmNobTdQRlBvazNUYU9XUkJDMlE9PSIsInZhbHVlIjoiZWtMK0VMK0xicDR4QjVkQUM5WjBod3FXcHlIV2JZZ0VKZGo0Y3NJMy8yZVdKNm1ydzFrcVRIbG9BaFk2czJ0QTNTalFteWFhUnJicDdiMjRuanJZKy9UYk41TWw5UlF5cjY0K3FuVVFKQU51bkdMdzRVTGJ2dWJhSlZVdTZqbEMiLCJtYWMiOiIyYzdlOWIwYmE0MWQ4ZDYxZDMxZDBiYzM3MzJjMGFmZDU2NjI0YzgwZGVhMzY4MjUyOTVlZmI5NGFlMzU2YjE4IiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IksxL2FETnpRdWZ6d0NTSjBIQndCcnc9PSIsInZhbHVlIjoiTG13VFlXTnlGWEN4UW56M1BtcFJWb0NEM0o0WmRWL1JVRjhoa3owWVFabmhqbVZOTlRybDhyVUNrd3o5cjJYeGRaZXlJMDRHc0VHakkxY2hiK0xJYW9KdzFlaDVGTFAwN0dPWWVkR0NLTjVBTDF5T1hrclppSktZaVNFeXloT2MiLCJtYWMiOiIzMjZmYzQzOTYxMGMzMWRiNGI2MGY1NTU0ZjM4MjNlNGNmNTliMjYxZDg1OGMzZjY4ZTMzNDQyNWM5ZTg2MTBlIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/tailwind",
    "timestamp": "2025-06-12T10:11:52.786009",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  51095 REQUEST_METHOD  GET REQUEST_URI  rulestailwind REQUEST_TIME_FLOAT  1749748312.6501205 REQUEST_TIME  1749748312 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit537.36 (KHTML, like Gecko) Chrome91.0.4472.124 Safari537.36 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6IjRwWmNobTdQRlBvazNUYU9XUkJDMlE9PSIsInZhbHVlIjoiZWtMK0VMK0xicDR4QjVkQUM5WjBod3FXcHlIV2JZZ0VKZGo0Y3NJMy8yZVdKNm1ydzFrcVRIbG9BaFk2czJ0QTNTalFteWFhUnJicDdiMjRuanJZKy9UYk41TWw5UlF5cjY0K3FuVVFKQU51bkdMdzRVTGJ2dWJhSlZVdTZqbEMiLCJtYWMiOiIyYzdlOWIwYmE0MWQ4ZDYxZDMxZDBiYzM3MzJjMGFmZDU2NjI0YzgwZGVhMzY4MjUyOTVlZmI5NGFlMzU2YjE4IiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IksxL2FETnpRdWZ6d0NTSjBIQndCcnc9PSIsInZhbHVlIjoiTG13VFlXTnlGWEN4UW56M1BtcFJWb0NEM0o0WmRWL1JVRjhoa3owWVFabmhqbVZOTlRybDhyVUNrd3o5cjJYeGRaZXlJMDRHc0VHakkxY2hiK0xJYW9KdzFlaDVGTFAwN0dPWWVkR0NLTjVBTDF5T1hrclppSktZaVNFeXloT2MiLCJtYWMiOiIzMjZmYzQzOTYxMGMzMWRiNGI2MGY1NTU0ZjM4MjNlNGNmNTliMjYxZDg1OGMzZjY4ZTMzNDQyNWM5ZTg2MTBlIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/vuejs",
    "timestamp": "2025-06-12T10:11:53.789022",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  61090 REQUEST_METHOD  GET REQUEST_URI  rulesvuejs REQUEST_TIME_FLOAT  1749748313.653515 REQUEST_TIME  1749748313 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko20100101 Firefox89.0 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6InJBdGswTjQyeDdUdEw3WHpPeHJOREE9PSIsInZhbHVlIjoiZFk0c3ZEaFpHZVFJOXk5eXV0QzUwbHhIV09Qcmt5UWZWLzFCQ0R5aTJiM1lMTmtPdzRMQ0ptTzBWMElvK05wQVBJTkVxYmJsb0RreDNpQVdOYTZlNy9kcG1mMllrUldZSWtZMms3aHg2YmVITFFXb3I0aEo2eVlud2gwNnNWclAiLCJtYWMiOiJmZjkzNmNmMDg4OTY3YmM2OTY0NWI5MjM1NGEyNzk2ZTkwOWMxY2MyODliMTIzNjdjMTcwYTM2MmYzZmM0MWFmIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IjZHRGNwN1pnS3E0STVENUgrMTBpc2c9PSIsInZhbHVlIjoibWpJeFllZXFwaHpXUkcrNGlBM0tOUithUFNPbWtLdU84T0JCR3V4NnFTRTROZ2U2dHpHZFk2QnZYY2IvaWEzem81cko0VDEvMUdlc01LZnZXTlNOZm9RdHVjMDJGTTR2dWZQTndBYUM4a2x3TVNNYU96bTRBTURKbFJMWXc3S2ciLCJtYWMiOiI4OTFkMGFkZmY2OThhNDFmMzM2MGVhNjhiM2I1ZGYyOWFiZjhkNDc3ZTdkNzZiOTc0Nzc4NTU4NDE5OTBkZDExIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/add/create-rules",
    "timestamp": "2025-06-12T10:11:54.788218",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  63287 REQUEST_METHOD  GET REQUEST_URI  rulesaddcreate-rules REQUEST_TIME_FLOAT  1749748314.652628 REQUEST_TIME  1749748314 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit605.1.15 (KHTML, like Gecko) Version14.1.1 Safari605.1.15 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6InJBdGswTjQyeDdUdEw3WHpPeHJOREE9PSIsInZhbHVlIjoiZFk0c3ZEaFpHZVFJOXk5eXV0QzUwbHhIV09Qcmt5UWZWLzFCQ0R5aTJiM1lMTmtPdzRMQ0ptTzBWMElvK05wQVBJTkVxYmJsb0RreDNpQVdOYTZlNy9kcG1mMllrUldZSWtZMms3aHg2YmVITFFXb3I0aEo2eVlud2gwNnNWclAiLCJtYWMiOiJmZjkzNmNmMDg4OTY3YmM2OTY0NWI5MjM1NGEyNzk2ZTkwOWMxY2MyODliMTIzNjdjMTcwYTM2MmYzZmM0MWFmIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IjZHRGNwN1pnS3E0STVENUgrMTBpc2c9PSIsInZhbHVlIjoibWpJeFllZXFwaHpXUkcrNGlBM0tOUithUFNPbWtLdU84T0JCR3V4NnFTRTROZ2U2dHpHZFk2QnZYY2IvaWEzem81cko0VDEvMUdlc01LZnZXTlNOZm9RdHVjMDJGTTR2dWZQTndBYUM4a2x3TVNNYU96bTRBTURKbFJMWXc3S2ciLCJtYWMiOiI4OTFkMGFkZmY2OThhNDFmMzM2MGVhNjhiM2I1ZGYyOWFiZjhkNDc3ZTdkNzZiOTc0Nzc4NTU4NDE5OTBkZDExIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/suggest/create-rules",
    "timestamp": "2025-06-12T10:11:55.789918",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  50402 REQUEST_METHOD  GET REQUEST_URI  rulessuggestcreate-rules REQUEST_TIME_FLOAT  1749748315.6534214 REQUEST_TIME  1749748315 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko20100101 Firefox89.0 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6InJBdGswTjQyeDdUdEw3WHpPeHJOREE9PSIsInZhbHVlIjoiZFk0c3ZEaFpHZVFJOXk5eXV0QzUwbHhIV09Qcmt5UWZWLzFCQ0R5aTJiM1lMTmtPdzRMQ0ptTzBWMElvK05wQVBJTkVxYmJsb0RreDNpQVdOYTZlNy9kcG1mMllrUldZSWtZMms3aHg2YmVITFFXb3I0aEo2eVlud2gwNnNWclAiLCJtYWMiOiJmZjkzNmNmMDg4OTY3YmM2OTY0NWI5MjM1NGEyNzk2ZTkwOWMxY2MyODliMTIzNjdjMTcwYTM2MmYzZmM0MWFmIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IjZHRGNwN1pnS3E0STVENUgrMTBpc2c9PSIsInZhbHVlIjoibWpJeFllZXFwaHpXUkcrNGlBM0tOUithUFNPbWtLdU84T0JCR3V4NnFTRTROZ2U2dHpHZFk2QnZYY2IvaWEzem81cko0VDEvMUdlc01LZnZXTlNOZm9RdHVjMDJGTTR2dWZQTndBYUM4a2x3TVNNYU96bTRBTURKbFJMWXc3S2ciLCJtYWMiOiI4OTFkMGFkZmY2OThhNDFmMzM2MGVhNjhiM2I1ZGYyOWFiZjhkNDc3ZTdkNzZiOTc0Nzc4NTU4NDE5OTBkZDExIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/suggest/memory",
    "timestamp": "2025-06-12T10:11:56.787512",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  55622 REQUEST_METHOD  GET REQUEST_URI  rulessuggestmemory REQUEST_TIME_FLOAT  1749748316.6518745 REQUEST_TIME  1749748316 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit537.36 (KHTML, like Gecko) Chrome91.0.4472.124 Safari537.36 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6InJBdGswTjQyeDdUdEw3WHpPeHJOREE9PSIsInZhbHVlIjoiZFk0c3ZEaFpHZVFJOXk5eXV0QzUwbHhIV09Qcmt5UWZWLzFCQ0R5aTJiM1lMTmtPdzRMQ0ptTzBWMElvK05wQVBJTkVxYmJsb0RreDNpQVdOYTZlNy9kcG1mMllrUldZSWtZMms3aHg2YmVITFFXb3I0aEo2eVlud2gwNnNWclAiLCJtYWMiOiJmZjkzNmNmMDg4OTY3YmM2OTY0NWI5MjM1NGEyNzk2ZTkwOWMxY2MyODliMTIzNjdjMTcwYTM2MmYzZmM0MWFmIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IjZHRGNwN1pnS3E0STVENUgrMTBpc2c9PSIsInZhbHVlIjoibWpJeFllZXFwaHpXUkcrNGlBM0tOUithUFNPbWtLdU84T0JCR3V4NnFTRTROZ2U2dHpHZFk2QnZYY2IvaWEzem81cko0VDEvMUdlc01LZnZXTlNOZm9RdHVjMDJGTTR2dWZQTndBYUM4a2x3TVNNYU96bTRBTURKbFJMWXc3S2ciLCJtYWMiOiI4OTFkMGFkZmY2OThhNDFmMzM2MGVhNjhiM2I1ZGYyOWFiZjhkNDc3ZTdkNzZiOTc0Nzc4NTU4NDE5OTBkZDExIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/add/memory",
    "timestamp": "2025-06-12T10:11:57.788048",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  50877 REQUEST_METHOD  GET REQUEST_URI  rulesaddmemory REQUEST_TIME_FLOAT  1749748317.6521022 REQUEST_TIME  1749748317 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit605.1.15 (KHTML, like Gecko) Version14.1.1 Safari605.1.15 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6InJBdGswTjQyeDdUdEw3WHpPeHJOREE9PSIsInZhbHVlIjoiZFk0c3ZEaFpHZVFJOXk5eXV0QzUwbHhIV09Qcmt5UWZWLzFCQ0R5aTJiM1lMTmtPdzRMQ0ptTzBWMElvK05wQVBJTkVxYmJsb0RreDNpQVdOYTZlNy9kcG1mMllrUldZSWtZMms3aHg2YmVITFFXb3I0aEo2eVlud2gwNnNWclAiLCJtYWMiOiJmZjkzNmNmMDg4OTY3YmM2OTY0NWI5MjM1NGEyNzk2ZTkwOWMxY2MyODliMTIzNjdjMTcwYTM2MmYzZmM0MWFmIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IjZHRGNwN1pnS3E0STVENUgrMTBpc2c9PSIsInZhbHVlIjoibWpJeFllZXFwaHpXUkcrNGlBM0tOUithUFNPbWtLdU84T0JCR3V4NnFTRTROZ2U2dHpHZFk2QnZYY2IvaWEzem81cko0VDEvMUdlc01LZnZXTlNOZm9RdHVjMDJGTTR2dWZQTndBYUM4a2x3TVNNYU96bTRBTURKbFJMWXc3S2ciLCJtYWMiOiI4OTFkMGFkZmY2OThhNDFmMzM2MGVhNjhiM2I1ZGYyOWFiZjhkNDc3ZTdkNzZiOTc0Nzc4NTU4NDE5OTBkZDExIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/add/expressjs",
    "timestamp": "2025-06-12T10:11:58.936999",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  52485 REQUEST_METHOD  GET REQUEST_URI  rulesaddexpressjs REQUEST_TIME_FLOAT  1749748318.7991235 REQUEST_TIME  1749748318 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (X11; Linux x86_64) AppleWebKit537.36 (KHTML, like Gecko) Chrome91.0.4472.124 Safari537.36 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6InJBdGswTjQyeDdUdEw3WHpPeHJOREE9PSIsInZhbHVlIjoiZFk0c3ZEaFpHZVFJOXk5eXV0QzUwbHhIV09Qcmt5UWZWLzFCQ0R5aTJiM1lMTmtPdzRMQ0ptTzBWMElvK05wQVBJTkVxYmJsb0RreDNpQVdOYTZlNy9kcG1mMllrUldZSWtZMms3aHg2YmVITFFXb3I0aEo2eVlud2gwNnNWclAiLCJtYWMiOiJmZjkzNmNmMDg4OTY3YmM2OTY0NWI5MjM1NGEyNzk2ZTkwOWMxY2MyODliMTIzNjdjMTcwYTM2MmYzZmM0MWFmIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IjZHRGNwN1pnS3E0STVENUgrMTBpc2c9PSIsInZhbHVlIjoibWpJeFllZXFwaHpXUkcrNGlBM0tOUithUFNPbWtLdU84T0JCR3V4NnFTRTROZ2U2dHpHZFk2QnZYY2IvaWEzem81cko0VDEvMUdlc01LZnZXTlNOZm9RdHVjMDJGTTR2dWZQTndBYUM4a2x3TVNNYU96bTRBTURKbFJMWXc3S2ciLCJtYWMiOiI4OTFkMGFkZmY2OThhNDFmMzM2MGVhNjhiM2I1ZGYyOWFiZjhkNDc3ZTdkNzZiOTc0Nzc4NTU4NDE5OTBkZDExIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/suggest/expressjs",
    "timestamp": "2025-06-12T10:11:59.787673",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  51580 REQUEST_METHOD  GET REQUEST_URI  rulessuggestexpressjs REQUEST_TIME_FLOAT  1749748319.6520474 REQUEST_TIME  1749748319 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (Windows NT 10.0; Win64; x64) AppleWebKit537.36 (KHTML, like Gecko) Edge91.0.864.59 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6InJBdGswTjQyeDdUdEw3WHpPeHJOREE9PSIsInZhbHVlIjoiZFk0c3ZEaFpHZVFJOXk5eXV0QzUwbHhIV09Qcmt5UWZWLzFCQ0R5aTJiM1lMTmtPdzRMQ0ptTzBWMElvK05wQVBJTkVxYmJsb0RreDNpQVdOYTZlNy9kcG1mMllrUldZSWtZMms3aHg2YmVITFFXb3I0aEo2eVlud2gwNnNWclAiLCJtYWMiOiJmZjkzNmNmMDg4OTY3YmM2OTY0NWI5MjM1NGEyNzk2ZTkwOWMxY2MyODliMTIzNjdjMTcwYTM2MmYzZmM0MWFmIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IjZHRGNwN1pnS3E0STVENUgrMTBpc2c9PSIsInZhbHVlIjoibWpJeFllZXFwaHpXUkcrNGlBM0tOUithUFNPbWtLdU84T0JCR3V4NnFTRTROZ2U2dHpHZFk2QnZYY2IvaWEzem81cko0VDEvMUdlc01LZnZXTlNOZm9RdHVjMDJGTTR2dWZQTndBYUM4a2x3TVNNYU96bTRBTURKbFJMWXc3S2ciLCJtYWMiOiI4OTFkMGFkZmY2OThhNDFmMzM2MGVhNjhiM2I1ZGYyOWFiZjhkNDc3ZTdkNzZiOTc0Nzc4NTU4NDE5OTBkZDExIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/add/flask",
    "timestamp": "2025-06-12T10:12:00.688284",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  51362 REQUEST_METHOD  GET REQUEST_URI  rulesaddflask REQUEST_TIME_FLOAT  1749748320.5525534 REQUEST_TIME  1749748320 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit537.36 (KHTML, like Gecko) Chrome91.0.4472.124 Safari537.36 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6InJBdGswTjQyeDdUdEw3WHpPeHJOREE9PSIsInZhbHVlIjoiZFk0c3ZEaFpHZVFJOXk5eXV0QzUwbHhIV09Qcmt5UWZWLzFCQ0R5aTJiM1lMTmtPdzRMQ0ptTzBWMElvK05wQVBJTkVxYmJsb0RreDNpQVdOYTZlNy9kcG1mMllrUldZSWtZMms3aHg2YmVITFFXb3I0aEo2eVlud2gwNnNWclAiLCJtYWMiOiJmZjkzNmNmMDg4OTY3YmM2OTY0NWI5MjM1NGEyNzk2ZTkwOWMxY2MyODliMTIzNjdjMTcwYTM2MmYzZmM0MWFmIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IjZHRGNwN1pnS3E0STVENUgrMTBpc2c9PSIsInZhbHVlIjoibWpJeFllZXFwaHpXUkcrNGlBM0tOUithUFNPbWtLdU84T0JCR3V4NnFTRTROZ2U2dHpHZFk2QnZYY2IvaWEzem81cko0VDEvMUdlc01LZnZXTlNOZm9RdHVjMDJGTTR2dWZQTndBYUM4a2x3TVNNYU96bTRBTURKbFJMWXc3S2ciLCJtYWMiOiI4OTFkMGFkZmY2OThhNDFmMzM2MGVhNjhiM2I1ZGYyOWFiZjhkNDc3ZTdkNzZiOTc0Nzc4NTU4NDE5OTBkZDExIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/suggest/flask",
    "timestamp": "2025-06-12T10:12:01.586319",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  54967 REQUEST_METHOD  GET REQUEST_URI  rulessuggestflask REQUEST_TIME_FLOAT  1749748321.4485228 REQUEST_TIME  1749748321 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit537.36 (KHTML, like Gecko) Chrome91.0.4472.124 Safari537.36 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6InJBdGswTjQyeDdUdEw3WHpPeHJOREE9PSIsInZhbHVlIjoiZFk0c3ZEaFpHZVFJOXk5eXV0QzUwbHhIV09Qcmt5UWZWLzFCQ0R5aTJiM1lMTmtPdzRMQ0ptTzBWMElvK05wQVBJTkVxYmJsb0RreDNpQVdOYTZlNy9kcG1mMllrUldZSWtZMms3aHg2YmVITFFXb3I0aEo2eVlud2gwNnNWclAiLCJtYWMiOiJmZjkzNmNmMDg4OTY3YmM2OTY0NWI5MjM1NGEyNzk2ZTkwOWMxY2MyODliMTIzNjdjMTcwYTM2MmYzZmM0MWFmIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IjZHRGNwN1pnS3E0STVENUgrMTBpc2c9PSIsInZhbHVlIjoibWpJeFllZXFwaHpXUkcrNGlBM0tOUithUFNPbWtLdU84T0JCR3V4NnFTRTROZ2U2dHpHZFk2QnZYY2IvaWEzem81cko0VDEvMUdlc01LZnZXTlNOZm9RdHVjMDJGTTR2dWZQTndBYUM4a2x3TVNNYU96bTRBTURKbFJMWXc3S2ciLCJtYWMiOiI4OTFkMGFkZmY2OThhNDFmMzM2MGVhNjhiM2I1ZGYyOWFiZjhkNDc3ZTdkNzZiOTc0Nzc4NTU4NDE5OTBkZDExIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/suggest/swiftui",
    "timestamp": "2025-06-12T10:12:02.326209",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  63007 REQUEST_METHOD  GET REQUEST_URI  rulessuggestswiftui REQUEST_TIME_FLOAT  1749748322.1898797 REQUEST_TIME  1749748322 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (Windows NT 10.0; Win64; x64) AppleWebKit537.36 (KHTML, like Gecko) Edge91.0.864.59 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6InJBdGswTjQyeDdUdEw3WHpPeHJOREE9PSIsInZhbHVlIjoiZFk0c3ZEaFpHZVFJOXk5eXV0QzUwbHhIV09Qcmt5UWZWLzFCQ0R5aTJiM1lMTmtPdzRMQ0ptTzBWMElvK05wQVBJTkVxYmJsb0RreDNpQVdOYTZlNy9kcG1mMllrUldZSWtZMms3aHg2YmVITFFXb3I0aEo2eVlud2gwNnNWclAiLCJtYWMiOiJmZjkzNmNmMDg4OTY3YmM2OTY0NWI5MjM1NGEyNzk2ZTkwOWMxY2MyODliMTIzNjdjMTcwYTM2MmYzZmM0MWFmIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IjZHRGNwN1pnS3E0STVENUgrMTBpc2c9PSIsInZhbHVlIjoibWpJeFllZXFwaHpXUkcrNGlBM0tOUithUFNPbWtLdU84T0JCR3V4NnFTRTROZ2U2dHpHZFk2QnZYY2IvaWEzem81cko0VDEvMUdlc01LZnZXTlNOZm9RdHVjMDJGTTR2dWZQTndBYUM4a2x3TVNNYU96bTRBTURKbFJMWXc3S2ciLCJtYWMiOiI4OTFkMGFkZmY2OThhNDFmMzM2MGVhNjhiM2I1ZGYyOWFiZjhkNDc3ZTdkNzZiOTc0Nzc4NTU4NDE5OTBkZDExIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/add/swiftui",
    "timestamp": "2025-06-12T10:12:02.886206",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  51440 REQUEST_METHOD  GET REQUEST_URI  rulesaddswiftui REQUEST_TIME_FLOAT  1749748322.7503614 REQUEST_TIME  1749748322 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (Windows NT 10.0; Win64; x64) AppleWebKit537.36 (KHTML, like Gecko) Chrome91.0.4472.124 Safari537.36 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6InJBdGswTjQyeDdUdEw3WHpPeHJOREE9PSIsInZhbHVlIjoiZFk0c3ZEaFpHZVFJOXk5eXV0QzUwbHhIV09Qcmt5UWZWLzFCQ0R5aTJiM1lMTmtPdzRMQ0ptTzBWMElvK05wQVBJTkVxYmJsb0RreDNpQVdOYTZlNy9kcG1mMllrUldZSWtZMms3aHg2YmVITFFXb3I0aEo2eVlud2gwNnNWclAiLCJtYWMiOiJmZjkzNmNmMDg4OTY3YmM2OTY0NWI5MjM1NGEyNzk2ZTkwOWMxY2MyODliMTIzNjdjMTcwYTM2MmYzZmM0MWFmIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IjZHRGNwN1pnS3E0STVENUgrMTBpc2c9PSIsInZhbHVlIjoibWpJeFllZXFwaHpXUkcrNGlBM0tOUithUFNPbWtLdU84T0JCR3V4NnFTRTROZ2U2dHpHZFk2QnZYY2IvaWEzem81cko0VDEvMUdlc01LZnZXTlNOZm9RdHVjMDJGTTR2dWZQTndBYUM4a2x3TVNNYU96bTRBTURKbFJMWXc3S2ciLCJtYWMiOiI4OTFkMGFkZmY2OThhNDFmMzM2MGVhNjhiM2I1ZGYyOWFiZjhkNDc3ZTdkNzZiOTc0Nzc4NTU4NDE5OTBkZDExIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/add/react",
    "timestamp": "2025-06-12T10:12:03.476779",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  55579 REQUEST_METHOD  GET REQUEST_URI  rulesaddreact REQUEST_TIME_FLOAT  1749748323.3408453 REQUEST_TIME  1749748323 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit605.1.15 (KHTML, like Gecko) Version14.1.1 Safari605.1.15 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6InJBdGswTjQyeDdUdEw3WHpPeHJOREE9PSIsInZhbHVlIjoiZFk0c3ZEaFpHZVFJOXk5eXV0QzUwbHhIV09Qcmt5UWZWLzFCQ0R5aTJiM1lMTmtPdzRMQ0ptTzBWMElvK05wQVBJTkVxYmJsb0RreDNpQVdOYTZlNy9kcG1mMllrUldZSWtZMms3aHg2YmVITFFXb3I0aEo2eVlud2gwNnNWclAiLCJtYWMiOiJmZjkzNmNmMDg4OTY3YmM2OTY0NWI5MjM1NGEyNzk2ZTkwOWMxY2MyODliMTIzNjdjMTcwYTM2MmYzZmM0MWFmIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IjZHRGNwN1pnS3E0STVENUgrMTBpc2c9PSIsInZhbHVlIjoibWpJeFllZXFwaHpXUkcrNGlBM0tOUithUFNPbWtLdU84T0JCR3V4NnFTRTROZ2U2dHpHZFk2QnZYY2IvaWEzem81cko0VDEvMUdlc01LZnZXTlNOZm9RdHVjMDJGTTR2dWZQTndBYUM4a2x3TVNNYU96bTRBTURKbFJMWXc3S2ciLCJtYWMiOiI4OTFkMGFkZmY2OThhNDFmMzM2MGVhNjhiM2I1ZGYyOWFiZjhkNDc3ZTdkNzZiOTc0Nzc4NTU4NDE5OTBkZDExIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/suggest/react",
    "timestamp": "2025-06-12T10:12:04.009824",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  64198 REQUEST_METHOD  GET REQUEST_URI  rulessuggestreact REQUEST_TIME_FLOAT  1749748323.8741403 REQUEST_TIME  1749748323 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (X11; Ubuntu; Linux x86_64; rv:89.0) Gecko20100101 Firefox89.0 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6InJBdGswTjQyeDdUdEw3WHpPeHJOREE9PSIsInZhbHVlIjoiZFk0c3ZEaFpHZVFJOXk5eXV0QzUwbHhIV09Qcmt5UWZWLzFCQ0R5aTJiM1lMTmtPdzRMQ0ptTzBWMElvK05wQVBJTkVxYmJsb0RreDNpQVdOYTZlNy9kcG1mMllrUldZSWtZMms3aHg2YmVITFFXb3I0aEo2eVlud2gwNnNWclAiLCJtYWMiOiJmZjkzNmNmMDg4OTY3YmM2OTY0NWI5MjM1NGEyNzk2ZTkwOWMxY2MyODliMTIzNjdjMTcwYTM2MmYzZmM0MWFmIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IjZHRGNwN1pnS3E0STVENUgrMTBpc2c9PSIsInZhbHVlIjoibWpJeFllZXFwaHpXUkcrNGlBM0tOUithUFNPbWtLdU84T0JCR3V4NnFTRTROZ2U2dHpHZFk2QnZYY2IvaWEzem81cko0VDEvMUdlc01LZnZXTlNOZm9RdHVjMDJGTTR2dWZQTndBYUM4a2x3TVNNYU96bTRBTURKbFJMWXc3S2ciLCJtYWMiOiI4OTFkMGFkZmY2OThhNDFmMzM2MGVhNjhiM2I1ZGYyOWFiZjhkNDc3ZTdkNzZiOTc0Nzc4NTU4NDE5OTBkZDExIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/hotwire",
    "timestamp": "2025-06-12T10:12:04.989057",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  54942 REQUEST_METHOD  GET REQUEST_URI  ruleshotwire REQUEST_TIME_FLOAT  1749748324.6483157 REQUEST_TIME  1749748324 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit605.1.15 (KHTML, like Gecko) Version14.1.1 Safari605.1.15 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6InJBdGswTjQyeDdUdEw3WHpPeHJOREE9PSIsInZhbHVlIjoiZFk0c3ZEaFpHZVFJOXk5eXV0QzUwbHhIV09Qcmt5UWZWLzFCQ0R5aTJiM1lMTmtPdzRMQ0ptTzBWMElvK05wQVBJTkVxYmJsb0RreDNpQVdOYTZlNy9kcG1mMllrUldZSWtZMms3aHg2YmVITFFXb3I0aEo2eVlud2gwNnNWclAiLCJtYWMiOiJmZjkzNmNmMDg4OTY3YmM2OTY0NWI5MjM1NGEyNzk2ZTkwOWMxY2MyODliMTIzNjdjMTcwYTM2MmYzZmM0MWFmIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IjZHRGNwN1pnS3E0STVENUgrMTBpc2c9PSIsInZhbHVlIjoibWpJeFllZXFwaHpXUkcrNGlBM0tOUithUFNPbWtLdU84T0JCR3V4NnFTRTROZ2U2dHpHZFk2QnZYY2IvaWEzem81cko0VDEvMUdlc01LZnZXTlNOZm9RdHVjMDJGTTR2dWZQTndBYUM4a2x3TVNNYU96bTRBTURKbFJMWXc3S2ciLCJtYWMiOiI4OTFkMGFkZmY2OThhNDFmMzM2MGVhNjhiM2I1ZGYyOWFiZjhkNDc3ZTdkNzZiOTc0Nzc4NTU4NDE5OTBkZDExIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/add/ruby-on-rails",
    "timestamp": "2025-06-12T10:12:05.017085",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  53562 REQUEST_METHOD  GET REQUEST_URI  rulesaddruby-on-rails REQUEST_TIME_FLOAT  1749748324.8796186 REQUEST_TIME  1749748324 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit537.36 (KHTML, like Gecko) Chrome91.0.4472.124 Safari537.36 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6InJBdGswTjQyeDdUdEw3WHpPeHJOREE9PSIsInZhbHVlIjoiZFk0c3ZEaFpHZVFJOXk5eXV0QzUwbHhIV09Qcmt5UWZWLzFCQ0R5aTJiM1lMTmtPdzRMQ0ptTzBWMElvK05wQVBJTkVxYmJsb0RreDNpQVdOYTZlNy9kcG1mMllrUldZSWtZMms3aHg2YmVITFFXb3I0aEo2eVlud2gwNnNWclAiLCJtYWMiOiJmZjkzNmNmMDg4OTY3YmM2OTY0NWI5MjM1NGEyNzk2ZTkwOWMxY2MyODliMTIzNjdjMTcwYTM2MmYzZmM0MWFmIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IjZHRGNwN1pnS3E0STVENUgrMTBpc2c9PSIsInZhbHVlIjoibWpJeFllZXFwaHpXUkcrNGlBM0tOUithUFNPbWtLdU84T0JCR3V4NnFTRTROZ2U2dHpHZFk2QnZYY2IvaWEzem81cko0VDEvMUdlc01LZnZXTlNOZm9RdHVjMDJGTTR2dWZQTndBYUM4a2x3TVNNYU96bTRBTURKbFJMWXc3S2ciLCJtYWMiOiI4OTFkMGFkZmY2OThhNDFmMzM2MGVhNjhiM2I1ZGYyOWFiZjhkNDc3ZTdkNzZiOTc0Nzc4NTU4NDE5OTBkZDExIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/suggest/ruby-on-rails",
    "timestamp": "2025-06-12T10:12:05.571654",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  61770 REQUEST_METHOD  GET REQUEST_URI  rulessuggestruby-on-rails REQUEST_TIME_FLOAT  1749748325.4331722 REQUEST_TIME  1749748325 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (X11; Ubuntu; Linux x86_64; rv:89.0) Gecko20100101 Firefox89.0 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6InJBdGswTjQyeDdUdEw3WHpPeHJOREE9PSIsInZhbHVlIjoiZFk0c3ZEaFpHZVFJOXk5eXV0QzUwbHhIV09Qcmt5UWZWLzFCQ0R5aTJiM1lMTmtPdzRMQ0ptTzBWMElvK05wQVBJTkVxYmJsb0RreDNpQVdOYTZlNy9kcG1mMllrUldZSWtZMms3aHg2YmVITFFXb3I0aEo2eVlud2gwNnNWclAiLCJtYWMiOiJmZjkzNmNmMDg4OTY3YmM2OTY0NWI5MjM1NGEyNzk2ZTkwOWMxY2MyODliMTIzNjdjMTcwYTM2MmYzZmM0MWFmIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IjZHRGNwN1pnS3E0STVENUgrMTBpc2c9PSIsInZhbHVlIjoibWpJeFllZXFwaHpXUkcrNGlBM0tOUithUFNPbWtLdU84T0JCR3V4NnFTRTROZ2U2dHpHZFk2QnZYY2IvaWEzem81cko0VDEvMUdlc01LZnZXTlNOZm9RdHVjMDJGTTR2dWZQTndBYUM4a2x3TVNNYU96bTRBTURKbFJMWXc3S2ciLCJtYWMiOiI4OTFkMGFkZmY2OThhNDFmMzM2MGVhNjhiM2I1ZGYyOWFiZjhkNDc3ZTdkNzZiOTc0Nzc4NTU4NDE5OTBkZDExIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/erb",
    "timestamp": "2025-06-12T10:12:05.750582",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  56742 REQUEST_METHOD  GET REQUEST_URI  ruleserb REQUEST_TIME_FLOAT  1749748325.613316 REQUEST_TIME  1749748325 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (Windows NT 10.0; Win64; x64) AppleWebKit537.36 (KHTML, like Gecko) Edge91.0.864.59 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6InJBdGswTjQyeDdUdEw3WHpPeHJOREE9PSIsInZhbHVlIjoiZFk0c3ZEaFpHZVFJOXk5eXV0QzUwbHhIV09Qcmt5UWZWLzFCQ0R5aTJiM1lMTmtPdzRMQ0ptTzBWMElvK05wQVBJTkVxYmJsb0RreDNpQVdOYTZlNy9kcG1mMllrUldZSWtZMms3aHg2YmVITFFXb3I0aEo2eVlud2gwNnNWclAiLCJtYWMiOiJmZjkzNmNmMDg4OTY3YmM2OTY0NWI5MjM1NGEyNzk2ZTkwOWMxY2MyODliMTIzNjdjMTcwYTM2MmYzZmM0MWFmIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IjZHRGNwN1pnS3E0STVENUgrMTBpc2c9PSIsInZhbHVlIjoibWpJeFllZXFwaHpXUkcrNGlBM0tOUithUFNPbWtLdU84T0JCR3V4NnFTRTROZ2U2dHpHZFk2QnZYY2IvaWEzem81cko0VDEvMUdlc01LZnZXTlNOZm9RdHVjMDJGTTR2dWZQTndBYUM4a2x3TVNNYU96bTRBTURKbFJMWXc3S2ciLCJtYWMiOiI4OTFkMGFkZmY2OThhNDFmMzM2MGVhNjhiM2I1ZGYyOWFiZjhkNDc3ZTdkNzZiOTc0Nzc4NTU4NDE5OTBkZDExIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/suggest/jinja",
    "timestamp": "2025-06-12T10:12:06.065835",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  65173 REQUEST_METHOD  GET REQUEST_URI  rulessuggestjinja REQUEST_TIME_FLOAT  1749748325.9294288 REQUEST_TIME  1749748325 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (X11; Linux x86_64) AppleWebKit537.36 (KHTML, like Gecko) Chrome91.0.4472.124 Safari537.36 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6InJBdGswTjQyeDdUdEw3WHpPeHJOREE9PSIsInZhbHVlIjoiZFk0c3ZEaFpHZVFJOXk5eXV0QzUwbHhIV09Qcmt5UWZWLzFCQ0R5aTJiM1lMTmtPdzRMQ0ptTzBWMElvK05wQVBJTkVxYmJsb0RreDNpQVdOYTZlNy9kcG1mMllrUldZSWtZMms3aHg2YmVITFFXb3I0aEo2eVlud2gwNnNWclAiLCJtYWMiOiJmZjkzNmNmMDg4OTY3YmM2OTY0NWI5MjM1NGEyNzk2ZTkwOWMxY2MyODliMTIzNjdjMTcwYTM2MmYzZmM0MWFmIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IjZHRGNwN1pnS3E0STVENUgrMTBpc2c9PSIsInZhbHVlIjoibWpJeFllZXFwaHpXUkcrNGlBM0tOUithUFNPbWtLdU84T0JCR3V4NnFTRTROZ2U2dHpHZFk2QnZYY2IvaWEzem81cko0VDEvMUdlc01LZnZXTlNOZm9RdHVjMDJGTTR2dWZQTndBYUM4a2x3TVNNYU96bTRBTURKbFJMWXc3S2ciLCJtYWMiOiI4OTFkMGFkZmY2OThhNDFmMzM2MGVhNjhiM2I1ZGYyOWFiZjhkNDc3ZTdkNzZiOTc0Nzc4NTU4NDE5OTBkZDExIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/add/jinja",
    "timestamp": "2025-06-12T10:12:06.347005",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  54722 REQUEST_METHOD  GET REQUEST_URI  rulesaddjinja REQUEST_TIME_FLOAT  1749748326.211489 REQUEST_TIME  1749748326 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit605.1.15 (KHTML, like Gecko) Version14.1.1 Safari605.1.15 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6InJBdGswTjQyeDdUdEw3WHpPeHJOREE9PSIsInZhbHVlIjoiZFk0c3ZEaFpHZVFJOXk5eXV0QzUwbHhIV09Qcmt5UWZWLzFCQ0R5aTJiM1lMTmtPdzRMQ0ptTzBWMElvK05wQVBJTkVxYmJsb0RreDNpQVdOYTZlNy9kcG1mMllrUldZSWtZMms3aHg2YmVITFFXb3I0aEo2eVlud2gwNnNWclAiLCJtYWMiOiJmZjkzNmNmMDg4OTY3YmM2OTY0NWI5MjM1NGEyNzk2ZTkwOWMxY2MyODliMTIzNjdjMTcwYTM2MmYzZmM0MWFmIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IjZHRGNwN1pnS3E0STVENUgrMTBpc2c9PSIsInZhbHVlIjoibWpJeFllZXFwaHpXUkcrNGlBM0tOUithUFNPbWtLdU84T0JCR3V4NnFTRTROZ2U2dHpHZFk2QnZYY2IvaWEzem81cko0VDEvMUdlc01LZnZXTlNOZm9RdHVjMDJGTTR2dWZQTndBYUM4a2x3TVNNYU96bTRBTURKbFJMWXc3S2ciLCJtYWMiOiI4OTFkMGFkZmY2OThhNDFmMzM2MGVhNjhiM2I1ZGYyOWFiZjhkNDc3ZTdkNzZiOTc0Nzc4NTU4NDE5OTBkZDExIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/add/nextjs",
    "timestamp": "2025-06-12T10:12:06.615036",
    "title": "",
    "text": "REMOTE_ADDR  35.86.140.60 REMOTE_PORT  59873 REQUEST_METHOD  GET REQUEST_URI  rulesaddnextjs REQUEST_TIME_FLOAT  1749748326.4784226 REQUEST_TIME  1749748326 HTTP_HOST  playbooks.com HTTP_USER-AGENT  Mozilla5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit605.1.15 (KHTML, like Gecko) Version14.1.1 Safari605.1.15 HTTP_ACCEPT-ENCODING  gzip, deflate HTTP_ACCEPT  texthtml,applicationxhtmlxml,applicationxml;q0.9,imagewebp,;q0.8 HTTP_CONNECTION  keep-alive HTTP_ACCEPT-LANGUAGE  en-US,en;q0.5 HTTP_UPGRADE-INSECURE-REQUESTS  1 HTTP_CACHE-CONTROL  max-age0 HTTP_DNT  1 HTTP_PRAGMA  no-cache HTTP_COOKIE  XSRF-TOKENeyJpdiI6InJBdGswTjQyeDdUdEw3WHpPeHJOREE9PSIsInZhbHVlIjoiZFk0c3ZEaFpHZVFJOXk5eXV0QzUwbHhIV09Qcmt5UWZWLzFCQ0R5aTJiM1lMTmtPdzRMQ0ptTzBWMElvK05wQVBJTkVxYmJsb0RreDNpQVdOYTZlNy9kcG1mMllrUldZSWtZMms3aHg2YmVITFFXb3I0aEo2eVlud2gwNnNWclAiLCJtYWMiOiJmZjkzNmNmMDg4OTY3YmM2OTY0NWI5MjM1NGEyNzk2ZTkwOWMxY2MyODliMTIzNjdjMTcwYTM2MmYzZmM0MWFmIiwidGFnIjoiIn03D; playbooks_sessioneyJpdiI6IjZHRGNwN1pnS3E0STVENUgrMTBpc2c9PSIsInZhbHVlIjoibWpJeFllZXFwaHpXUkcrNGlBM0tOUithUFNPbWtLdU84T0JCR3V4NnFTRTROZ2U2dHpHZFk2QnZYY2IvaWEzem81cko0VDEvMUdlc01LZnZXTlNOZm9RdHVjMDJGTTR2dWZQTndBYUM4a2x3TVNNYU96bTRBTURKbFJMWXc3S2ciLCJtYWMiOiI4OTFkMGFkZmY2OThhNDFmMzM2MGVhNjhiM2I1ZGYyOWFiZjhkNDc3ZTdkNzZiOTc0Nzc4NTU4NDE5OTBkZDExIiwidGFnIjoiIn03D",
    "keywords": [],
    "links": [],
    "metadata": {},
    "structured_data": {},
    "headers": {}
  },
  {
    "url": "https://playbooks.com/rules/suggest/nextjs",
    "timestamp": "2025-06-12T10:12:08.933935",
    "title": "Login | Playbooks",
    "text": "Login  Playbooks Log in to playbooks and join the community for free Continue with Google Continue with GitHub Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Login to your Playbooks account",
      "og:title": "Login | Playbooks",
      "og:description": "Login to your Playbooks account",
      "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "og:url": "https://playbooks.com/login",
      "og:type": "website",
      "twitter:title": "Login | Playbooks",
      "twitter:description": "Login to your Playbooks account",
      "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Login | Playbooks",
        "og:description": "Login to your Playbooks account",
        "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "og:url": "https://playbooks.com/login",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Login | Playbooks",
        "twitter:description": "Login to your Playbooks account",
        "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Log in to playbooks and join the community for free"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/suggest/fastapi",
    "timestamp": "2025-06-12T10:12:09.457003",
    "title": "Login | Playbooks",
    "text": "Login  Playbooks Log in to playbooks and join the community for free Continue with Google Continue with GitHub Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Login to your Playbooks account",
      "og:title": "Login | Playbooks",
      "og:description": "Login to your Playbooks account",
      "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "og:url": "https://playbooks.com/login",
      "og:type": "website",
      "twitter:title": "Login | Playbooks",
      "twitter:description": "Login to your Playbooks account",
      "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Login | Playbooks",
        "og:description": "Login to your Playbooks account",
        "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "og:url": "https://playbooks.com/login",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Login | Playbooks",
        "twitter:description": "Login to your Playbooks account",
        "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Log in to playbooks and join the community for free"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/add/fastapi",
    "timestamp": "2025-06-12T10:12:09.926021",
    "title": "Login | Playbooks",
    "text": "Login  Playbooks Log in to playbooks and join the community for free Continue with Google Continue with GitHub Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Login to your Playbooks account",
      "og:title": "Login | Playbooks",
      "og:description": "Login to your Playbooks account",
      "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "og:url": "https://playbooks.com/login",
      "og:type": "website",
      "twitter:title": "Login | Playbooks",
      "twitter:description": "Login to your Playbooks account",
      "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Login | Playbooks",
        "og:description": "Login to your Playbooks account",
        "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "og:url": "https://playbooks.com/login",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Login | Playbooks",
        "twitter:description": "Login to your Playbooks account",
        "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Log in to playbooks and join the community for free"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/add/sveltekit",
    "timestamp": "2025-06-12T10:12:10.442185",
    "title": "Login | Playbooks",
    "text": "Login  Playbooks Log in to playbooks and join the community for free Continue with Google Continue with GitHub Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Login to your Playbooks account",
      "og:title": "Login | Playbooks",
      "og:description": "Login to your Playbooks account",
      "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "og:url": "https://playbooks.com/login",
      "og:type": "website",
      "twitter:title": "Login | Playbooks",
      "twitter:description": "Login to your Playbooks account",
      "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Login | Playbooks",
        "og:description": "Login to your Playbooks account",
        "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "og:url": "https://playbooks.com/login",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Login | Playbooks",
        "twitter:description": "Login to your Playbooks account",
        "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Log in to playbooks and join the community for free"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/suggest/sveltekit",
    "timestamp": "2025-06-12T10:12:10.983294",
    "title": "Login | Playbooks",
    "text": "Login  Playbooks Log in to playbooks and join the community for free Continue with Google Continue with GitHub Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Login to your Playbooks account",
      "og:title": "Login | Playbooks",
      "og:description": "Login to your Playbooks account",
      "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "og:url": "https://playbooks.com/login",
      "og:type": "website",
      "twitter:title": "Login | Playbooks",
      "twitter:description": "Login to your Playbooks account",
      "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Login | Playbooks",
        "og:description": "Login to your Playbooks account",
        "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "og:url": "https://playbooks.com/login",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Login | Playbooks",
        "twitter:description": "Login to your Playbooks account",
        "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Log in to playbooks and join the community for free"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/suggest/task-lists",
    "timestamp": "2025-06-12T10:12:11.502074",
    "title": "Login | Playbooks",
    "text": "Login  Playbooks Log in to playbooks and join the community for free Continue with Google Continue with GitHub Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Login to your Playbooks account",
      "og:title": "Login | Playbooks",
      "og:description": "Login to your Playbooks account",
      "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "og:url": "https://playbooks.com/login",
      "og:type": "website",
      "twitter:title": "Login | Playbooks",
      "twitter:description": "Login to your Playbooks account",
      "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Login | Playbooks",
        "og:description": "Login to your Playbooks account",
        "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "og:url": "https://playbooks.com/login",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Login | Playbooks",
        "twitter:description": "Login to your Playbooks account",
        "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Log in to playbooks and join the community for free"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/add/rule-analytics",
    "timestamp": "2025-06-12T10:12:12.157296",
    "title": "Login | Playbooks",
    "text": "Login  Playbooks Log in to playbooks and join the community for free Continue with Google Continue with GitHub Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Login to your Playbooks account",
      "og:title": "Login | Playbooks",
      "og:description": "Login to your Playbooks account",
      "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "og:url": "https://playbooks.com/login",
      "og:type": "website",
      "twitter:title": "Login | Playbooks",
      "twitter:description": "Login to your Playbooks account",
      "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Login | Playbooks",
        "og:description": "Login to your Playbooks account",
        "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "og:url": "https://playbooks.com/login",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Login | Playbooks",
        "twitter:description": "Login to your Playbooks account",
        "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Log in to playbooks and join the community for free"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/supabase-edge-functions",
    "timestamp": "2025-06-12T10:12:13.540624",
    "title": "Supabase Edge Functions Cursor Rules for AI",
    "text": "Supabase Edge Functions Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for Supabase Edge Functions This rule explains coding rules for creating Supabase Edge Functions. Back to rules Type Database Used with PostgreSQL Stats 189 views 18 copies 7 downloads Author Ian Nuttall Cursor (.mdc) Windsurf (.md) supabase-edge-functions.mdc Copy Download --- description: This rule explains coding rules for creating Supabase Edge Functions. globs: supabasefunctions.ts alwaysApply: false ---  Supabase Edge Functions rules You're an expert in writing TypeScript and Deno JavaScript runtime. Generate high-quality Supabase Edge Functions that adhere to the following best practices:  Guidelines 1. Try to use Web APIs and Denos core APIs instead of external dependencies (eg: use fetch instead of Axios, use WebSockets API instead of node-ws) 2. If you are reusing utility methods between Edge Functions, add them to supabasefunctions_shared and import using a relative path. Do NOT have cross dependencies between Edge Functions. 3. Do NOT use bare specifiers when importing dependecnies. If you need to use an external dependency, make sure it's prefixed with either npm: or jsr:. For example, supabasesupabase-js should be written as npm:supabasesupabase-js. 4. For external imports, always define a version. For example, npm:express should be written as npm:email protected. 5. For external dependencies, importing via npm: and jsr: is preferred. Minimize the use of imports from deno.landx , esm.sh and unpkg.com . If you have a package from one of those CDNs, you can replace the CDN hostname with npm: specifier. 6. You can also use Node built-in APIs. You will need to import them using node: specifier. For example, to import Node process: import process from \"node:process\". Use Node APIs when you find gaps in Deno APIs. 7. Do NOT use import  serve  from \"https:deno.landemail protectedhttpserver.ts\". Instead use the built-in Deno.serve. 8. Following environment variables (ie. secrets) are pre-populated in both local and hosted Supabase environments. Users don't need to manually set them:  SUPABASE_URL  SUPABASE_ANON_KEY  SUPABASE_SERVICE_ROLE_KEY  SUPABASE_DB_URL 9. To set other environment variables (ie. secrets) users can put them in a env file and run the supabase secrets set --env-file pathtoenv-file 10. A single Edge Function can handle multiple routes. It is recommended to use a library like Express or Hono to handle the routes as it's easier for developer to understand and maintain. Each route must be prefixed with function-name so they are routed correctly. 11. File write operations are ONLY permitted on tmp directory. You can use either Deno or Node File APIs. 12. Use EdgeRuntime.waitUntil(promise) static method to run long-running tasks in the background without blocking response to a request. Do NOT assume it is available in the request  execution context.  Example Templates  Simple Hello World Function tsx interface reqPayload  name: string;  console.info('server started'); Deno.serve(async (req: Request)   const  name : reqPayload  await req.json(); const data   message: Hello name from foo!, ; return new Response( JSON.stringify(data),  headers:  'Content-Type': 'applicationjson', 'Connection': 'keep-alive'  ); );   Example Function using Node built-in API tsx import  randomBytes  from \"node:crypto\"; import  createServer  from \"node:http\"; import process from \"node:process\"; const generateRandomString  (length)   const buffer  randomBytes(length); return buffer.toString('hex'); ; const randomString  generateRandomString(10); console.log(randomString); const server  createServer((req, res)   const message  Hello; res.end(message); ); server.listen(9999);   Using npm packages in Functions tsx import express from \"npm:email protected\"; const app  express(); app.get((.), (req, res)   res.send(\"Welcome to Supabase\"); ); app.listen(8000);   Generate embeddings using built-in Supabase.ai API tsx const model  new Supabase.ai.Session('gte-small'); Deno.serve(async (req: Request)   const params  new URL(req.url).searchParams; const input  params.get('text'); const output  await model.run(input,  mean_pool: true, normalize: true ); return new Response( JSON.stringify( output, ),  headers:  'Content-Type': 'applicationjson', 'Connection': 'keep-alive', , , ); );  supabase-edge-functions.md Copy Download --- trigger: glob description: This rule explains coding rules for creating Supabase Edge Functions. globs: supabasefunctions.ts ---  Supabase Edge Functions rules You're an expert in writing TypeScript and Deno JavaScript runtime. Generate high-quality Supabase Edge Functions that adhere to the following best practices:  Guidelines 1. Try to use Web APIs and Denos core APIs instead of external dependencies (eg: use fetch instead of Axios, use WebSockets API instead of node-ws) 2. If you are reusing utility methods between Edge Functions, add them to supabasefunctions_shared and import using a relative path. Do NOT have cross dependencies between Edge Functions. 3. Do NOT use bare specifiers when importing dependecnies. If you need to use an external dependency, make sure it's prefixed with either npm: or jsr:. For example, supabasesupabase-js should be written as npm:supabasesupabase-js. 4. For external imports, always define a version. For example, npm:express should be written as npm:email protected. 5. For external dependencies, importing via npm: and jsr: is preferred. Minimize the use of imports from deno.landx , esm.sh and unpkg.com . If you have a package from one of those CDNs, you can replace the CDN hostname with npm: specifier. 6. You can also use Node built-in APIs. You will need to import them using node: specifier. For example, to import Node process: import process from \"node:process\". Use Node APIs when you find gaps in Deno APIs. 7. Do NOT use import  serve  from \"https:deno.landemail protectedhttpserver.ts\". Instead use the built-in Deno.serve. 8. Following environment variables (ie. secrets) are pre-populated in both local and hosted Supabase environments. Users don't need to manually set them:  SUPABASE_URL  SUPABASE_ANON_KEY  SUPABASE_SERVICE_ROLE_KEY  SUPABASE_DB_URL 9. To set other environment variables (ie. secrets) users can put them in a env file and run the supabase secrets set --env-file pathtoenv-file 10. A single Edge Function can handle multiple routes. It is recommended to use a library like Express or Hono to handle the routes as it's easier for developer to understand and maintain. Each route must be prefixed with function-name so they are routed correctly. 11. File write operations are ONLY permitted on tmp directory. You can use either Deno or Node File APIs. 12. Use EdgeRuntime.waitUntil(promise) static method to run long-running tasks in the background without blocking response to a request. Do NOT assume it is available in the request  execution context.  Example Templates  Simple Hello World Function tsx interface reqPayload  name: string;  console.info('server started'); Deno.serve(async (req: Request)   const  name : reqPayload  await req.json(); const data   message: Hello name from foo!, ; return new Response( JSON.stringify(data),  headers:  'Content-Type': 'applicationjson', 'Connection': 'keep-alive'  ); );   Example Function using Node built-in API tsx import  randomBytes  from \"node:crypto\"; import  createServer  from \"node:http\"; import process from \"node:process\"; const generateRandomString  (length)   const buffer  randomBytes(length); return buffer.toString('hex'); ; const randomString  generateRandomString(10); console.log(randomString); const server  createServer((req, res)   const message  Hello; res.end(message); ); server.listen(9999);   Using npm packages in Functions tsx import express from \"npm:email protected\"; const app  express(); app.get((.), (req, res)   res.send(\"Welcome to Supabase\"); ); app.listen(8000);   Generate embeddings using built-in Supabase.ai API tsx const model  new Supabase.ai.Session('gte-small'); Deno.serve(async (req: Request)   const params  new URL(req.url).searchParams; const input  params.get('text'); const output  await model.run(input,  mean_pool: true, normalize: true ); return new Response( JSON.stringify( output, ),  headers:  'Content-Type': 'applicationjson', 'Connection': 'keep-alive', , , ); );  Suggest changes Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/suggest/supabase-edge-functions"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains coding rules for creating Supabase Edge Functions.",
      "og:title": "Supabase Edge Functions Cursor Rules for AI",
      "og:description": "This rule explains coding rules for creating Supabase Edge Functions.",
      "og:image": "https://assets.playbooks.com/og-images/c7366b4075.png",
      "og:url": "https://playbooks.com/rules/supabase-edge-functions",
      "og:type": "website",
      "twitter:title": "Supabase Edge Functions Cursor Rules for AI",
      "twitter:description": "This rule explains coding rules for creating Supabase Edge Functions.",
      "twitter:image": "https://assets.playbooks.com/og-images/c7366b4075.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Supabase Edge Functions Cursor Rules for AI",
        "og:description": "This rule explains coding rules for creating Supabase Edge Functions.",
        "og:image": "https://assets.playbooks.com/og-images/c7366b4075.png",
        "og:url": "https://playbooks.com/rules/supabase-edge-functions",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Supabase Edge Functions Cursor Rules for AI",
        "twitter:description": "This rule explains coding rules for creating Supabase Edge Functions.",
        "twitter:image": "https://assets.playbooks.com/og-images/c7366b4075.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    Supabase Edge Functions"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/postgres-database-functions",
    "timestamp": "2025-06-12T10:12:14.969168",
    "title": "Postgres Database Functions Cursor Rules for AI",
    "text": "Postgres Database Functions Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for Postgres Database Functions This rule provides guidelines for writing PostgreSQL database functions. Back to rules Type Database Used with PostgreSQL Stats 202 views 17 copies 7 downloads Author Ian Nuttall Cursor (.mdc) Windsurf (.md) postgres-database-functions.mdc Copy Download --- description: This rule provides guidelines for writing PostgreSQL database functions. globs: .sql alwaysApply: false ---  Postgres Database Functions rules You're a Postgres expert in writing database functions. Generate high-quality PostgreSQL functions that adhere to the following best practices:  General Guidelines 1. Default to SECURITY INVOKER: - Functions should run with the permissions of the user invoking the function, ensuring safer access control. - Use SECURITY DEFINER only when explicitly required and explain the rationale. 2. Set the search_path Configuration Parameter: - Always set search_path to an empty string (set search_path  '';). - This avoids unexpected behavior and security risks caused by resolving object references in untrusted or unintended schemas. - Use fully qualified names (e.g., schema_name.table_name) for all database objects referenced within the function. 3. Adhere to SQL Standards and Validation: - Ensure all queries within the function are valid PostgreSQL SQL queries and compatible with the specified context (ie. Supabase).  Best Practices 1. Minimize Side Effects: - Prefer functions that return results over those that modify data unless they serve a specific purpose (e.g., triggers). 2. Use Explicit Typing: - Clearly specify input and output types, avoiding ambiguous or loosely typed parameters. 3. Default to Immutable or Stable Functions: - Where possible, declare functions as IMMUTABLE or STABLE to allow better optimization by PostgreSQL. Use VOLATILE only if the function modifies data or has side effects. 4. Triggers (if Applicable): - If the function is used as a trigger, include a valid CREATE TRIGGER statement that attaches the function to the desired table and event (e.g., BEFORE INSERT).  Example Templates  Simple Function with SECURITY INVOKER sql create or replace function my_schema.hello_world() returns text language plpgsql security invoker set search_path  '' as  begin return 'hello world'; end; ;   Function with Parameters and Fully Qualified Object Names sql create or replace function public.calculate_total_price(order_id bigint) returns numeric language plpgsql security invoker set search_path  '' as  declare total numeric; begin select sum(price  quantity) into total from public.order_items where order_id  calculate_total_price.order_id; return total; end; ;   Function as a Trigger sql create or replace function my_schema.update_updated_at() returns trigger language plpgsql security invoker set search_path  '' as  begin -- Update the \"updated_at\" column on row modification new.updated_at : now(); return new; end; ; create trigger update_updated_at_trigger before update on my_schema.my_table for each row execute function my_schema.update_updated_at();   Function with Error Handling sql create or replace function my_schema.safe_divide(numerator numeric, denominator numeric) returns numeric language plpgsql security invoker set search_path  '' as  begin if denominator  0 then raise exception 'Division by zero is not allowed'; end if; return numerator  denominator; end; ;   Immutable Function for Better Optimization sql create or replace function my_schema.full_name(first_name text, last_name text) returns text language sql security invoker set search_path  '' immutable as  select first_name  ' '  last_name; ;  postgres-database-functions.md Copy Download --- trigger: glob description: This rule provides guidelines for writing PostgreSQL database functions. globs: .sql ---  Postgres Database Functions rules You're a Postgres expert in writing database functions. Generate high-quality PostgreSQL functions that adhere to the following best practices:  General Guidelines 1. Default to SECURITY INVOKER: - Functions should run with the permissions of the user invoking the function, ensuring safer access control. - Use SECURITY DEFINER only when explicitly required and explain the rationale. 2. Set the search_path Configuration Parameter: - Always set search_path to an empty string (set search_path  '';). - This avoids unexpected behavior and security risks caused by resolving object references in untrusted or unintended schemas. - Use fully qualified names (e.g., schema_name.table_name) for all database objects referenced within the function. 3. Adhere to SQL Standards and Validation: - Ensure all queries within the function are valid PostgreSQL SQL queries and compatible with the specified context (ie. Supabase).  Best Practices 1. Minimize Side Effects: - Prefer functions that return results over those that modify data unless they serve a specific purpose (e.g., triggers). 2. Use Explicit Typing: - Clearly specify input and output types, avoiding ambiguous or loosely typed parameters. 3. Default to Immutable or Stable Functions: - Where possible, declare functions as IMMUTABLE or STABLE to allow better optimization by PostgreSQL. Use VOLATILE only if the function modifies data or has side effects. 4. Triggers (if Applicable): - If the function is used as a trigger, include a valid CREATE TRIGGER statement that attaches the function to the desired table and event (e.g., BEFORE INSERT).  Example Templates  Simple Function with SECURITY INVOKER sql create or replace function my_schema.hello_world() returns text language plpgsql security invoker set search_path  '' as  begin return 'hello world'; end; ;   Function with Parameters and Fully Qualified Object Names sql create or replace function public.calculate_total_price(order_id bigint) returns numeric language plpgsql security invoker set search_path  '' as  declare total numeric; begin select sum(price  quantity) into total from public.order_items where order_id  calculate_total_price.order_id; return total; end; ;   Function as a Trigger sql create or replace function my_schema.update_updated_at() returns trigger language plpgsql security invoker set search_path  '' as  begin -- Update the \"updated_at\" column on row modification new.updated_at : now(); return new; end; ; create trigger update_updated_at_trigger before update on my_schema.my_table for each row execute function my_schema.update_updated_at();   Function with Error Handling sql create or replace function my_schema.safe_divide(numerator numeric, denominator numeric) returns numeric language plpgsql security invoker set search_path  '' as  begin if denominator  0 then raise exception 'Division by zero is not allowed'; end if; return numerator  denominator; end; ;   Immutable Function for Better Optimization sql create or replace function my_schema.full_name(first_name text, last_name text) returns text language sql security invoker set search_path  '' immutable as  select first_name  ' '  last_name; ;  Suggest changes Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/suggest/postgres-database-functions"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule provides guidelines for writing PostgreSQL database functions.",
      "og:title": "Postgres Database Functions Cursor Rules for AI",
      "og:description": "This rule provides guidelines for writing PostgreSQL database functions.",
      "og:image": "https://assets.playbooks.com/og-images/f2aaf253b6.png",
      "og:url": "https://playbooks.com/rules/postgres-database-functions",
      "og:type": "website",
      "twitter:title": "Postgres Database Functions Cursor Rules for AI",
      "twitter:description": "This rule provides guidelines for writing PostgreSQL database functions.",
      "twitter:image": "https://assets.playbooks.com/og-images/f2aaf253b6.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Postgres Database Functions Cursor Rules for AI",
        "og:description": "This rule provides guidelines for writing PostgreSQL database functions.",
        "og:image": "https://assets.playbooks.com/og-images/f2aaf253b6.png",
        "og:url": "https://playbooks.com/rules/postgres-database-functions",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Postgres Database Functions Cursor Rules for AI",
        "twitter:description": "This rule provides guidelines for writing PostgreSQL database functions.",
        "twitter:image": "https://assets.playbooks.com/og-images/f2aaf253b6.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    Postgres Database Functions"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/add/laravel",
    "timestamp": "2025-06-12T10:12:15.471288",
    "title": "Login | Playbooks",
    "text": "Login  Playbooks Log in to playbooks and join the community for free Continue with Google Continue with GitHub Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "Login to your Playbooks account",
      "og:title": "Login | Playbooks",
      "og:description": "Login to your Playbooks account",
      "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "og:url": "https://playbooks.com/login",
      "og:type": "website",
      "twitter:title": "Login | Playbooks",
      "twitter:description": "Login to your Playbooks account",
      "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Login | Playbooks",
        "og:description": "Login to your Playbooks account",
        "og:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "og:url": "https://playbooks.com/login",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Login | Playbooks",
        "twitter:description": "Login to your Playbooks account",
        "twitter:image": "https://assets.playbooks.com/og-images/b9a28005dd.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Log in to playbooks and join the community for free"
      ]
    }
  },
  {
    "url": "https://playbooks.com/rules/laravel-tall",
    "timestamp": "2025-06-12T10:12:16.444712",
    "title": "Laravel TALL Stack Cursor Rules for AI",
    "text": "Laravel TALL Stack Cursor Rules for AI playbooks Learn Rules Cursor Rules Windsurf Rules MCPs Modes Prompts Log in Menu Learn Rules Cursor Rules Windsurf Rules MCPs Modes AI Image Editor Log in Cursor Rules for Laravel TALL Stack This rule explains how to build Livewire components and use the TALL stack effectively. Back to rules Type Frontend Language(s) PHP Used with Laravel Stats 395 views 25 copies 12 downloads Contributors Venelin Kochev Venelin Kochev Cursor (.mdc) Windsurf (.md) laravel-tall.mdc Copy Download --- description: This rule explains how to build Livewire components and use the TALL stack effectively. globs: .blade.php alwaysApply: false ---  Laravel TALL rules - Livewire components namespace is now AppLivewire and not AppHttpLivewire - To dispatch events we always use this-dispatch(), not this-emit or this-dispatchBrowserEvent - The layout path is now components.layouts.app instead of layouts.app - wire:model is deferred by default so to achieve same behavior as before we need to use wire:model.live - The same applies for entangle - When updating a Livewire blade component everything must be within a single tag, if you need to add custom CSS, put that in app.css(mdc:resourcescssapp.css) - Any time you have a loop in Blade templates using something like foreach, you need to add wire:key to the opening tag of the first element within the loop. The same applies to Livewire components within a loop. - Livewire includes its own bundle of Alpine under the hood we do not need to manually include it in the resourcesjsapp.js or with a script tag in the Blade View. - Use On('event-name') attribute for event listeners instead of protected listeners - Use wire:dirty to style elements when the component is in a dirtyunsaved state - Use wire:loading for loading states during actions - Use wire:confirm for confirmation dialogs laravel-tall.md Copy Download --- trigger: glob description: This rule explains how to build Livewire components and use the TALL stack effectively. globs: .blade.php ---  Laravel TALL rules - Livewire components namespace is now AppLivewire and not AppHttpLivewire - To dispatch events we always use this-dispatch(), not this-emit or this-dispatchBrowserEvent - The layout path is now components.layouts.app instead of layouts.app - wire:model is deferred by default so to achieve same behavior as before we need to use wire:model.live - The same applies for entangle - When updating a Livewire blade component everything must be within a single tag, if you need to add custom CSS, put that in app.css(mdc:resourcescssapp.css) - Any time you have a loop in Blade templates using something like foreach, you need to add wire:key to the opening tag of the first element within the loop. The same applies to Livewire components within a loop. - Livewire includes its own bundle of Alpine under the hood we do not need to manually include it in the resourcesjsapp.js or with a script tag in the Blade View. - Use On('event-name') attribute for event listeners instead of protected listeners - Use wire:dirty to style elements when the component is in a dirtyunsaved state - Use wire:loading for loading states during actions - Use wire:confirm for confirmation dialogs Suggest changes Privacy  Terms  Advertise by Ian Nuttall Want to 10x your AI skills? Get a free account and learn to code  market your apps using AI (with or without vibes!). Continue with Google Continue with GitHub Nah, maybe later",
    "keywords": [],
    "links": [
      "https://playbooks.com/rules/suggest/laravel-tall"
    ],
    "metadata": {
      "viewport": "width=device-width, initial-scale=1, maximum-scale=1",
      "description": "This rule explains how to build Livewire components and use the TALL stack effectively.",
      "og:title": "Laravel TALL Stack Cursor Rules for AI",
      "og:description": "This rule explains how to build Livewire components and use the TALL stack effectively.",
      "og:image": "https://assets.playbooks.com/og-images/22bf1001d2.png",
      "og:url": "https://playbooks.com/rules/laravel-tall",
      "og:type": "website",
      "twitter:title": "Laravel TALL Stack Cursor Rules for AI",
      "twitter:description": "This rule explains how to build Livewire components and use the TALL stack effectively.",
      "twitter:image": "https://assets.playbooks.com/og-images/22bf1001d2.png",
      "twitter:card": "summary_large_image",
      "twitter:site": "@iannuttall",
      "csrf-token": "D8nRjeA2pY6u9211YIDljwQ2sGLRyMcH98KsiooM"
    },
    "structured_data": {
      "open_graph": {
        "og:title": "Laravel TALL Stack Cursor Rules for AI",
        "og:description": "This rule explains how to build Livewire components and use the TALL stack effectively.",
        "og:image": "https://assets.playbooks.com/og-images/22bf1001d2.png",
        "og:url": "https://playbooks.com/rules/laravel-tall",
        "og:type": "website"
      },
      "twitter_card": {
        "twitter:title": "Laravel TALL Stack Cursor Rules for AI",
        "twitter:description": "This rule explains how to build Livewire components and use the TALL stack effectively.",
        "twitter:image": "https://assets.playbooks.com/og-images/22bf1001d2.png",
        "twitter:card": "summary_large_image",
        "twitter:site": "@iannuttall"
      }
    },
    "headers": {
      "h1": [
        "Cursor Rules for\n                    Laravel TALL Stack"
      ]
    }
  }
]